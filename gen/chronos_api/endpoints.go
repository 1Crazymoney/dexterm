// Code generated by goa v3.1.1, DO NOT EDIT.
//
// ChronosAPI endpoints
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package chronosapi

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "ChronosAPI" service endpoints.
type Endpoints struct {
	SymbolInfo goa.Endpoint
	History    goa.Endpoint
}

// NewEndpoints wraps the methods of the "ChronosAPI" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SymbolInfo: NewSymbolInfoEndpoint(s),
		History:    NewHistoryEndpoint(s),
	}
}

// Use applies the given middleware to all the "ChronosAPI" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SymbolInfo = m(e.SymbolInfo)
	e.History = m(e.History)
}

// NewSymbolInfoEndpoint returns an endpoint function that calls the method
// "symbolInfo" of service "ChronosAPI".
func NewSymbolInfoEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SymbolInfoPayload)
		return s.SymbolInfo(ctx, p)
	}
}

// NewHistoryEndpoint returns an endpoint function that calls the method
// "history" of service "ChronosAPI".
func NewHistoryEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*HistoryPayload)
		return s.History(ctx, p)
	}
}
