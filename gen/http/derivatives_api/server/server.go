// Code generated by goa v3.1.1, DO NOT EDIT.
//
// DerivativesAPI HTTP server
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"context"
	"net/http"

	derivativesapi "github.com/InjectiveLabs/injective-core/api/gen/derivatives_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the DerivativesAPI service endpoint HTTP handlers.
type Server struct {
	Mounts    []*MountPoint
	Orders    http.Handler
	PostOrder http.Handler
	CORS      http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the DerivativesAPI service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *derivativesapi.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Orders", "GET", "/api/sda/v0/orders"},
			{"PostOrder", "POST", "/api/sda/v0/order"},
			{"CORS", "OPTIONS", "/api/sda/v0/orders"},
			{"CORS", "OPTIONS", "/api/sda/v0/order"},
		},
		Orders:    NewOrdersHandler(e.Orders, mux, decoder, encoder, errhandler, formatter),
		PostOrder: NewPostOrderHandler(e.PostOrder, mux, decoder, encoder, errhandler, formatter),
		CORS:      NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "DerivativesAPI" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Orders = m(s.Orders)
	s.PostOrder = m(s.PostOrder)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the DerivativesAPI endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountOrdersHandler(mux, h.Orders)
	MountPostOrderHandler(mux, h.PostOrder)
	MountCORSHandler(mux, h.CORS)
}

// MountOrdersHandler configures the mux to serve the "DerivativesAPI" service
// "orders" endpoint.
func MountOrdersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleDerivativesAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/sda/v0/orders", f)
}

// NewOrdersHandler creates a HTTP handler which loads the HTTP request and
// calls the "DerivativesAPI" service "orders" endpoint.
func NewOrdersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeOrdersRequest(mux, decoder)
		encodeResponse = EncodeOrdersResponse(encoder)
		encodeError    = EncodeOrdersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "orders")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DerivativesAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPostOrderHandler configures the mux to serve the "DerivativesAPI"
// service "postOrder" endpoint.
func MountPostOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleDerivativesAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/sda/v0/order", f)
}

// NewPostOrderHandler creates a HTTP handler which loads the HTTP request and
// calls the "DerivativesAPI" service "postOrder" endpoint.
func NewPostOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePostOrderRequest(mux, decoder)
		encodeResponse = EncodePostOrderResponse(encoder)
		encodeError    = EncodePostOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "postOrder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "DerivativesAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service DerivativesAPI.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleDerivativesAPIOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/api/sda/v0/orders", f)
	mux.Handle("OPTIONS", "/api/sda/v0/order", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleDerivativesAPIOrigin applies the CORS response headers corresponding
// to the origin for the service DerivativesAPI.
func handleDerivativesAPIOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST")
				w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
