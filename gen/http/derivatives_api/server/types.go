// Code generated by goa v3.1.1, DO NOT EDIT.
//
// DerivativesAPI HTTP server types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"unicode/utf8"

	derivativesapi "github.com/InjectiveLabs/injective-core/api/gen/derivatives_api"
	goa "goa.design/goa/v3/pkg"
)

// PostOrderRequestBody is the type of the "DerivativesAPI" service "postOrder"
// endpoint HTTP request body.
type PostOrderRequestBody struct {
	// Specify chain ID.
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// Futures contract address?
	ExchangeAddress *string `form:"exchangeAddress,omitempty" json:"exchangeAddress,omitempty" xml:"exchangeAddress,omitempty"`
	// Address that created the order.
	MakerAddress *string `form:"makerAddress,omitempty" json:"makerAddress,omitempty" xml:"makerAddress,omitempty"`
	// Empty.
	TakerAddress *string `form:"takerAddress,omitempty" json:"takerAddress,omitempty" xml:"takerAddress,omitempty"`
	// Empty.
	FeeRecipientAddress *string `form:"feeRecipientAddress,omitempty" json:"feeRecipientAddress,omitempty" xml:"feeRecipientAddress,omitempty"`
	// Empty.
	SenderAddress *string `form:"senderAddress,omitempty" json:"senderAddress,omitempty" xml:"senderAddress,omitempty"`
	// The price of 1 contract denominated in base currency.
	MakerAssetAmount *string `form:"makerAssetAmount,omitempty" json:"makerAssetAmount,omitempty" xml:"makerAssetAmount,omitempty"`
	// The quantity of contracts the maker seeks to obtain.
	TakerAssetAmount *string `form:"takerAssetAmount,omitempty" json:"takerAssetAmount,omitempty" xml:"takerAssetAmount,omitempty"`
	// The direction of the contract. 1 for LONG, 2 for SHORT.
	MakerFee *string `form:"makerFee,omitempty" json:"makerFee,omitempty" xml:"makerFee,omitempty"`
	// Empty.
	TakerFee *string `form:"takerFee,omitempty" json:"takerFee,omitempty" xml:"takerFee,omitempty"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds *string `form:"expirationTimeSeconds,omitempty" json:"expirationTimeSeconds,omitempty" xml:"expirationTimeSeconds,omitempty"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt *string `form:"salt,omitempty" json:"salt,omitempty" xml:"salt,omitempty"`
	// The account ID of the account entering into the position. Must be an account
	// owned by makerAddress
	MakerAssetData *string `form:"makerAssetData,omitempty" json:"makerAssetData,omitempty" xml:"makerAssetData,omitempty"`
	// The marketID of the market for the position
	TakerAssetData *string `form:"takerAssetData,omitempty" json:"takerAssetData,omitempty" xml:"takerAssetData,omitempty"`
	// Empty.
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// Empty.
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
	// Order signature.
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// OrdersResponseBody is the type of the "DerivativesAPI" service "orders"
// endpoint HTTP response body.
type OrdersResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Total records found in collection.
	Total int `form:"total" json:"total" xml:"total"`
	// The page number, starts from 1.
	Page int `form:"page" json:"page" xml:"page"`
	// Records limit per each page.
	PerPage int `form:"perPage" json:"perPage" xml:"perPage"`
	// Derivative orders.
	Records []*DerivativeOrderRecordResponseBody `form:"records" json:"records" xml:"records"`
}

// PostOrderResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body.
type PostOrderResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
}

// OrdersValidationErrorResponseBody is the type of the "DerivativesAPI"
// service "orders" endpoint HTTP response body for the "validation_error"
// error.
type OrdersValidationErrorResponseBody struct {
	// General error code
	Code int `form:"code" json:"code" xml:"code"`
	// Error reason description
	Reason string `form:"reason" json:"reason" xml:"reason"`
	// A list of explained validation errors.
	ValidationErrors []*SDAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrdersNotFoundResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "not_found" error.
type OrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OrdersRateLimitResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "rate_limit" error.
type OrdersRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OrdersInternalResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "internal" error.
type OrdersInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OrdersNotImplementedResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "not_implemented" error.
type OrdersNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostOrderValidationErrorResponseBody is the type of the "DerivativesAPI"
// service "postOrder" endpoint HTTP response body for the "validation_error"
// error.
type PostOrderValidationErrorResponseBody struct {
	// General error code
	Code int `form:"code" json:"code" xml:"code"`
	// Error reason description
	Reason string `form:"reason" json:"reason" xml:"reason"`
	// A list of explained validation errors.
	ValidationErrors []*SDAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// PostOrderNotFoundResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body for the "not_found" error.
type PostOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostOrderRateLimitResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body for the "rate_limit" error.
type PostOrderRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostOrderInternalResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body for the "internal" error.
type PostOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostOrderNotImplementedResponseBody is the type of the "DerivativesAPI"
// service "postOrder" endpoint HTTP response body for the "not_implemented"
// error.
type PostOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DerivativeOrderRecordResponseBody is used to define fields on response body
// types.
type DerivativeOrderRecordResponseBody struct {
	// Derivative Order item.
	DerivativeOrder *DerivativeOrderResponseBody `form:"derivativeOrder" json:"derivativeOrder" xml:"derivativeOrder"`
	// Additional meta data.
	MetaData map[string]string `form:"metaData" json:"metaData" xml:"metaData"`
}

// DerivativeOrderResponseBody is used to define fields on response body types.
type DerivativeOrderResponseBody struct {
	// Specify chain ID.
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// Futures contract address?
	ExchangeAddress string `form:"exchangeAddress" json:"exchangeAddress" xml:"exchangeAddress"`
	// Address that created the order.
	MakerAddress string `form:"makerAddress" json:"makerAddress" xml:"makerAddress"`
	// Empty.
	TakerAddress string `form:"takerAddress" json:"takerAddress" xml:"takerAddress"`
	// Empty.
	FeeRecipientAddress string `form:"feeRecipientAddress" json:"feeRecipientAddress" xml:"feeRecipientAddress"`
	// Empty.
	SenderAddress string `form:"senderAddress" json:"senderAddress" xml:"senderAddress"`
	// The price of 1 contract denominated in base currency.
	MakerAssetAmount string `form:"makerAssetAmount" json:"makerAssetAmount" xml:"makerAssetAmount"`
	// The quantity of contracts the maker seeks to obtain.
	TakerAssetAmount string `form:"takerAssetAmount" json:"takerAssetAmount" xml:"takerAssetAmount"`
	// The direction of the contract. 1 for LONG, 2 for SHORT.
	MakerFee string `form:"makerFee" json:"makerFee" xml:"makerFee"`
	// Empty.
	TakerFee string `form:"takerFee" json:"takerFee" xml:"takerFee"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string `form:"expirationTimeSeconds" json:"expirationTimeSeconds" xml:"expirationTimeSeconds"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt string `form:"salt" json:"salt" xml:"salt"`
	// The account ID of the account entering into the position. Must be an account
	// owned by makerAddress
	MakerAssetData string `form:"makerAssetData" json:"makerAssetData" xml:"makerAssetData"`
	// The marketID of the market for the position
	TakerAssetData string `form:"takerAssetData" json:"takerAssetData" xml:"takerAssetData"`
	// Empty.
	MakerFeeAssetData string `form:"makerFeeAssetData" json:"makerFeeAssetData" xml:"makerFeeAssetData"`
	// Empty.
	TakerFeeAssetData string `form:"takerFeeAssetData" json:"takerFeeAssetData" xml:"takerFeeAssetData"`
	// Order signature.
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// SDAValidationErrorResponseBody is used to define fields on response body
// types.
type SDAValidationErrorResponseBody struct {
	// Validation error code
	Code int `form:"code" json:"code" xml:"code"`
	// Validation error reason description
	Reason string `form:"reason" json:"reason" xml:"reason"`
	// Field name
	Field *string `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
}

// NewOrdersResponseBody builds the HTTP response body from the result of the
// "orders" endpoint of the "DerivativesAPI" service.
func NewOrdersResponseBody(res *derivativesapi.OrdersResult) *OrdersResponseBody {
	body := &OrdersResponseBody{
		RLimitLimit:     res.RLimitLimit,
		RLimitRemaining: res.RLimitRemaining,
		RLimitReset:     res.RLimitReset,
		Total:           res.Total,
		Page:            res.Page,
		PerPage:         res.PerPage,
	}
	if res.Records != nil {
		body.Records = make([]*DerivativeOrderRecordResponseBody, len(res.Records))
		for i, val := range res.Records {
			body.Records[i] = marshalDerivativesapiDerivativeOrderRecordToDerivativeOrderRecordResponseBody(val)
		}
	}
	return body
}

// NewPostOrderResponseBody builds the HTTP response body from the result of
// the "postOrder" endpoint of the "DerivativesAPI" service.
func NewPostOrderResponseBody(res *derivativesapi.PostOrderResult) *PostOrderResponseBody {
	body := &PostOrderResponseBody{
		RLimitLimit:     res.RLimitLimit,
		RLimitRemaining: res.RLimitRemaining,
		RLimitReset:     res.RLimitReset,
	}
	return body
}

// NewOrdersValidationErrorResponseBody builds the HTTP response body from the
// result of the "orders" endpoint of the "DerivativesAPI" service.
func NewOrdersValidationErrorResponseBody(res *derivativesapi.SDAValidationErrorResponse) *OrdersValidationErrorResponseBody {
	body := &OrdersValidationErrorResponseBody{
		Code:   res.Code,
		Reason: res.Reason,
	}
	if res.ValidationErrors != nil {
		body.ValidationErrors = make([]*SDAValidationErrorResponseBody, len(res.ValidationErrors))
		for i, val := range res.ValidationErrors {
			body.ValidationErrors[i] = marshalDerivativesapiSDAValidationErrorToSDAValidationErrorResponseBody(val)
		}
	}
	return body
}

// NewOrdersNotFoundResponseBody builds the HTTP response body from the result
// of the "orders" endpoint of the "DerivativesAPI" service.
func NewOrdersNotFoundResponseBody(res *goa.ServiceError) *OrdersNotFoundResponseBody {
	body := &OrdersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewOrdersRateLimitResponseBody builds the HTTP response body from the result
// of the "orders" endpoint of the "DerivativesAPI" service.
func NewOrdersRateLimitResponseBody(res *goa.ServiceError) *OrdersRateLimitResponseBody {
	body := &OrdersRateLimitResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewOrdersInternalResponseBody builds the HTTP response body from the result
// of the "orders" endpoint of the "DerivativesAPI" service.
func NewOrdersInternalResponseBody(res *goa.ServiceError) *OrdersInternalResponseBody {
	body := &OrdersInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewOrdersNotImplementedResponseBody builds the HTTP response body from the
// result of the "orders" endpoint of the "DerivativesAPI" service.
func NewOrdersNotImplementedResponseBody(res *goa.ServiceError) *OrdersNotImplementedResponseBody {
	body := &OrdersNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostOrderValidationErrorResponseBody builds the HTTP response body from
// the result of the "postOrder" endpoint of the "DerivativesAPI" service.
func NewPostOrderValidationErrorResponseBody(res *derivativesapi.SDAValidationErrorResponse) *PostOrderValidationErrorResponseBody {
	body := &PostOrderValidationErrorResponseBody{
		Code:   res.Code,
		Reason: res.Reason,
	}
	if res.ValidationErrors != nil {
		body.ValidationErrors = make([]*SDAValidationErrorResponseBody, len(res.ValidationErrors))
		for i, val := range res.ValidationErrors {
			body.ValidationErrors[i] = marshalDerivativesapiSDAValidationErrorToSDAValidationErrorResponseBody(val)
		}
	}
	return body
}

// NewPostOrderNotFoundResponseBody builds the HTTP response body from the
// result of the "postOrder" endpoint of the "DerivativesAPI" service.
func NewPostOrderNotFoundResponseBody(res *goa.ServiceError) *PostOrderNotFoundResponseBody {
	body := &PostOrderNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostOrderRateLimitResponseBody builds the HTTP response body from the
// result of the "postOrder" endpoint of the "DerivativesAPI" service.
func NewPostOrderRateLimitResponseBody(res *goa.ServiceError) *PostOrderRateLimitResponseBody {
	body := &PostOrderRateLimitResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostOrderInternalResponseBody builds the HTTP response body from the
// result of the "postOrder" endpoint of the "DerivativesAPI" service.
func NewPostOrderInternalResponseBody(res *goa.ServiceError) *PostOrderInternalResponseBody {
	body := &PostOrderInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostOrderNotImplementedResponseBody builds the HTTP response body from
// the result of the "postOrder" endpoint of the "DerivativesAPI" service.
func NewPostOrderNotImplementedResponseBody(res *goa.ServiceError) *PostOrderNotImplementedResponseBody {
	body := &PostOrderNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewOrdersPayload builds a DerivativesAPI service orders endpoint payload.
func NewOrdersPayload(page int, perPage int, takerAssetData *string) *derivativesapi.OrdersPayload {
	v := &derivativesapi.OrdersPayload{}
	v.Page = page
	v.PerPage = perPage
	v.TakerAssetData = takerAssetData

	return v
}

// NewPostOrderPayload builds a DerivativesAPI service postOrder endpoint
// payload.
func NewPostOrderPayload(body *PostOrderRequestBody) *derivativesapi.PostOrderPayload {
	v := &derivativesapi.PostOrderPayload{
		ChainID:               *body.ChainID,
		ExchangeAddress:       *body.ExchangeAddress,
		MakerAddress:          *body.MakerAddress,
		TakerAddress:          *body.TakerAddress,
		FeeRecipientAddress:   *body.FeeRecipientAddress,
		SenderAddress:         *body.SenderAddress,
		MakerAssetAmount:      *body.MakerAssetAmount,
		TakerAssetAmount:      *body.TakerAssetAmount,
		MakerFee:              *body.MakerFee,
		TakerFee:              *body.TakerFee,
		ExpirationTimeSeconds: *body.ExpirationTimeSeconds,
		Salt:                  *body.Salt,
		MakerAssetData:        *body.MakerAssetData,
		TakerAssetData:        *body.TakerAssetData,
		MakerFeeAssetData:     *body.MakerFeeAssetData,
		TakerFeeAssetData:     *body.TakerFeeAssetData,
		Signature:             *body.Signature,
	}

	return v
}

// ValidatePostOrderRequestBody runs the validations defined on
// PostOrderRequestBody
func ValidatePostOrderRequestBody(body *PostOrderRequestBody) (err error) {
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	if body.ExchangeAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exchangeAddress", "body"))
	}
	if body.MakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAddress", "body"))
	}
	if body.TakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAddress", "body"))
	}
	if body.FeeRecipientAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feeRecipientAddress", "body"))
	}
	if body.SenderAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("senderAddress", "body"))
	}
	if body.MakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetAmount", "body"))
	}
	if body.TakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetAmount", "body"))
	}
	if body.MakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFee", "body"))
	}
	if body.TakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFee", "body"))
	}
	if body.ExpirationTimeSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expirationTimeSeconds", "body"))
	}
	if body.Salt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("salt", "body"))
	}
	if body.MakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetData", "body"))
	}
	if body.TakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetData", "body"))
	}
	if body.MakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFeeAssetData", "body"))
	}
	if body.TakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFeeAssetData", "body"))
	}
	if body.Signature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("signature", "body"))
	}
	if body.ChainID != nil {
		if !(*body.ChainID == 1 || *body.ChainID == 3 || *body.ChainID == 4 || *body.ChainID == 42 || *body.ChainID == 1337) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.chainId", *body.ChainID, []interface{}{1, 3, 4, 42, 1337}))
		}
	}
	if body.ExchangeAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.exchangeAddress", *body.ExchangeAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, true))
		}
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, false))
		}
	}
	if body.MakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAddress", *body.MakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, true))
		}
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, false))
		}
	}
	if body.TakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAddress", *body.TakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, true))
		}
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, false))
		}
	}
	if body.FeeRecipientAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", *body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, true))
		}
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, false))
		}
	}
	if body.SenderAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", *body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, true))
		}
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, false))
		}
	}
	if body.MakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetAmount", *body.MakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.MakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetAmount", *body.MakerAssetAmount, utf8.RuneCountInString(*body.MakerAssetAmount), 100, false))
		}
	}
	if body.TakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetAmount", *body.TakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.TakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetAmount", *body.TakerAssetAmount, utf8.RuneCountInString(*body.TakerAssetAmount), 100, false))
		}
	}
	if body.MakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", *body.MakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerFee != nil {
		if utf8.RuneCountInString(*body.MakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", *body.MakerFee, utf8.RuneCountInString(*body.MakerFee), 100, false))
		}
	}
	if body.TakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", *body.TakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerFee != nil {
		if utf8.RuneCountInString(*body.TakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", *body.TakerFee, utf8.RuneCountInString(*body.TakerFee), 100, false))
		}
	}
	if body.ExpirationTimeSeconds != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, "^\\d+(\\.\\d+)?$"))
	}
	if body.ExpirationTimeSeconds != nil {
		if utf8.RuneCountInString(*body.ExpirationTimeSeconds) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, utf8.RuneCountInString(*body.ExpirationTimeSeconds), 100, false))
		}
	}
	if body.Salt != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.salt", *body.Salt, "^\\d+(\\.\\d+)?$"))
	}
	if body.Salt != nil {
		if utf8.RuneCountInString(*body.Salt) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.salt", *body.Salt, utf8.RuneCountInString(*body.Salt), 100, false))
		}
	}
	if body.MakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", *body.MakerAssetData, "^0x[0-9a-fA-F]{32}$"))
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) < 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 34, true))
		}
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 34, false))
		}
	}
	if body.TakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", *body.TakerAssetData, "^0x[0-9a-fA-F]{32}$"))
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) < 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 34, true))
		}
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 34, false))
		}
	}
	if body.MakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", *body.MakerFeeAssetData, "^0x0$"))
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 3, true))
		}
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 3, false))
		}
	}
	if body.TakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", *body.TakerFeeAssetData, "^0x0$"))
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 3, true))
		}
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 3, false))
		}
	}
	if body.Signature != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.signature", *body.Signature, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	return
}
