// Code generated by goa v3.1.1, DO NOT EDIT.
//
// DerivativesAPI HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"unicode/utf8"

	derivativesapi "github.com/InjectiveLabs/injective-core/api/gen/derivatives_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeOrdersResponse returns an encoder for responses returned by the
// DerivativesAPI orders endpoint.
func EncodeOrdersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*derivativesapi.OrdersResult)
		enc := encoder(ctx, w)
		body := NewOrdersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeOrdersRequest returns a decoder for requests sent to the
// DerivativesAPI orders endpoint.
func DecodeOrdersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page           int
			perPage        int
			takerAssetData *string
			err            error
		)
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		{
			perPageRaw := r.URL.Query().Get("perPage")
			if perPageRaw == "" {
				perPage = 100
			} else {
				v, err2 := strconv.ParseInt(perPageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("perPage", perPageRaw, "integer"))
				}
				perPage = int(v)
			}
		}
		takerAssetDataRaw := r.URL.Query().Get("takerAssetData")
		if takerAssetDataRaw != "" {
			takerAssetData = &takerAssetDataRaw
		}
		if takerAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("takerAssetData", *takerAssetData, "^0x[0-9a-fA-F]{32}$"))
		}
		if takerAssetData != nil {
			if utf8.RuneCountInString(*takerAssetData) < 34 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetData", *takerAssetData, utf8.RuneCountInString(*takerAssetData), 34, true))
			}
		}
		if takerAssetData != nil {
			if utf8.RuneCountInString(*takerAssetData) > 34 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetData", *takerAssetData, utf8.RuneCountInString(*takerAssetData), 34, false))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewOrdersPayload(page, perPage, takerAssetData)

		return payload, nil
	}
}

// EncodeOrdersError returns an encoder for errors returned by the orders
// DerivativesAPI endpoint.
func EncodeOrdersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "validation_error":
			res := v.(*derivativesapi.SDAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePostOrderResponse returns an encoder for responses returned by the
// DerivativesAPI postOrder endpoint.
func EncodePostOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*derivativesapi.PostOrderResult)
		enc := encoder(ctx, w)
		body := NewPostOrderResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodePostOrderRequest returns a decoder for requests sent to the
// DerivativesAPI postOrder endpoint.
func DecodePostOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PostOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePostOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPostOrderPayload(&body)

		return payload, nil
	}
}

// EncodePostOrderError returns an encoder for errors returned by the postOrder
// DerivativesAPI endpoint.
func EncodePostOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "validation_error":
			res := v.(*derivativesapi.SDAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalDerivativesapiDerivativeOrderRecordToDerivativeOrderRecordResponseBody
// builds a value of type *DerivativeOrderRecordResponseBody from a value of
// type *derivativesapi.DerivativeOrderRecord.
func marshalDerivativesapiDerivativeOrderRecordToDerivativeOrderRecordResponseBody(v *derivativesapi.DerivativeOrderRecord) *DerivativeOrderRecordResponseBody {
	res := &DerivativeOrderRecordResponseBody{}
	if v.DerivativeOrder != nil {
		res.DerivativeOrder = marshalDerivativesapiDerivativeOrderToDerivativeOrderResponseBody(v.DerivativeOrder)
	}
	if v.MetaData != nil {
		res.MetaData = make(map[string]string, len(v.MetaData))
		for key, val := range v.MetaData {
			tk := key
			tv := val
			res.MetaData[tk] = tv
		}
	}

	return res
}

// marshalDerivativesapiDerivativeOrderToDerivativeOrderResponseBody builds a
// value of type *DerivativeOrderResponseBody from a value of type
// *derivativesapi.DerivativeOrder.
func marshalDerivativesapiDerivativeOrderToDerivativeOrderResponseBody(v *derivativesapi.DerivativeOrder) *DerivativeOrderResponseBody {
	res := &DerivativeOrderResponseBody{
		ChainID:               v.ChainID,
		ExchangeAddress:       v.ExchangeAddress,
		MakerAddress:          v.MakerAddress,
		TakerAddress:          v.TakerAddress,
		FeeRecipientAddress:   v.FeeRecipientAddress,
		SenderAddress:         v.SenderAddress,
		MakerAssetAmount:      v.MakerAssetAmount,
		TakerAssetAmount:      v.TakerAssetAmount,
		MakerFee:              v.MakerFee,
		TakerFee:              v.TakerFee,
		ExpirationTimeSeconds: v.ExpirationTimeSeconds,
		Salt:                  v.Salt,
		MakerAssetData:        v.MakerAssetData,
		TakerAssetData:        v.TakerAssetData,
		MakerFeeAssetData:     v.MakerFeeAssetData,
		TakerFeeAssetData:     v.TakerFeeAssetData,
		Signature:             v.Signature,
	}

	return res
}

// marshalDerivativesapiSDAValidationErrorToSDAValidationErrorResponseBody
// builds a value of type *SDAValidationErrorResponseBody from a value of type
// *derivativesapi.SDAValidationError.
func marshalDerivativesapiSDAValidationErrorToSDAValidationErrorResponseBody(v *derivativesapi.SDAValidationError) *SDAValidationErrorResponseBody {
	if v == nil {
		return nil
	}
	res := &SDAValidationErrorResponseBody{
		Code:   v.Code,
		Reason: v.Reason,
		Field:  v.Field,
	}

	return res
}
