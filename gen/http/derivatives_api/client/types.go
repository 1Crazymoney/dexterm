// Code generated by goa v3.1.1, DO NOT EDIT.
//
// DerivativesAPI HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package client

import (
	"unicode/utf8"

	derivativesapi "github.com/InjectiveLabs/injective-core/api/gen/derivatives_api"
	goa "goa.design/goa/v3/pkg"
)

// PostOrderRequestBody is the type of the "DerivativesAPI" service "postOrder"
// endpoint HTTP request body.
type PostOrderRequestBody struct {
	// Specify chain ID.
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// Futures contract address?
	ExchangeAddress string `form:"exchangeAddress" json:"exchangeAddress" xml:"exchangeAddress"`
	// Address that created the order.
	MakerAddress string `form:"makerAddress" json:"makerAddress" xml:"makerAddress"`
	// Empty.
	TakerAddress string `form:"takerAddress" json:"takerAddress" xml:"takerAddress"`
	// Empty.
	FeeRecipientAddress string `form:"feeRecipientAddress" json:"feeRecipientAddress" xml:"feeRecipientAddress"`
	// Empty.
	SenderAddress string `form:"senderAddress" json:"senderAddress" xml:"senderAddress"`
	// The price of 1 contract denominated in base currency.
	MakerAssetAmount string `form:"makerAssetAmount" json:"makerAssetAmount" xml:"makerAssetAmount"`
	// The quantity of contracts the maker seeks to obtain.
	TakerAssetAmount string `form:"takerAssetAmount" json:"takerAssetAmount" xml:"takerAssetAmount"`
	// The direction of the contract. 1 for LONG, 2 for SHORT.
	MakerFee string `form:"makerFee" json:"makerFee" xml:"makerFee"`
	// Empty.
	TakerFee string `form:"takerFee" json:"takerFee" xml:"takerFee"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string `form:"expirationTimeSeconds" json:"expirationTimeSeconds" xml:"expirationTimeSeconds"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt string `form:"salt" json:"salt" xml:"salt"`
	// The account ID of the account entering into the position. Must be an account
	// owned by makerAddress
	MakerAssetData string `form:"makerAssetData" json:"makerAssetData" xml:"makerAssetData"`
	// The marketID of the market for the position
	TakerAssetData string `form:"takerAssetData" json:"takerAssetData" xml:"takerAssetData"`
	// Empty.
	MakerFeeAssetData string `form:"makerFeeAssetData" json:"makerFeeAssetData" xml:"makerFeeAssetData"`
	// Empty.
	TakerFeeAssetData string `form:"takerFeeAssetData" json:"takerFeeAssetData" xml:"takerFeeAssetData"`
	// Order signature.
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// OrdersResponseBody is the type of the "DerivativesAPI" service "orders"
// endpoint HTTP response body.
type OrdersResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// Derivative orders.
	Records []*DerivativeOrderRecordResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// PostOrderResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body.
type PostOrderResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
}

// OrdersValidationErrorResponseBody is the type of the "DerivativesAPI"
// service "orders" endpoint HTTP response body for the "validation_error"
// error.
type OrdersValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SDAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrdersNotFoundResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "not_found" error.
type OrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersRateLimitResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "rate_limit" error.
type OrdersRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersInternalResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "internal" error.
type OrdersInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersNotImplementedResponseBody is the type of the "DerivativesAPI" service
// "orders" endpoint HTTP response body for the "not_implemented" error.
type OrdersNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderValidationErrorResponseBody is the type of the "DerivativesAPI"
// service "postOrder" endpoint HTTP response body for the "validation_error"
// error.
type PostOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SDAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// PostOrderNotFoundResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body for the "not_found" error.
type PostOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderRateLimitResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body for the "rate_limit" error.
type PostOrderRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderInternalResponseBody is the type of the "DerivativesAPI" service
// "postOrder" endpoint HTTP response body for the "internal" error.
type PostOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderNotImplementedResponseBody is the type of the "DerivativesAPI"
// service "postOrder" endpoint HTTP response body for the "not_implemented"
// error.
type PostOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DerivativeOrderRecordResponseBody is used to define fields on response body
// types.
type DerivativeOrderRecordResponseBody struct {
	// Derivative Order item.
	DerivativeOrder *DerivativeOrderResponseBody `form:"derivativeOrder,omitempty" json:"derivativeOrder,omitempty" xml:"derivativeOrder,omitempty"`
	// Additional meta data.
	MetaData map[string]string `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// DerivativeOrderResponseBody is used to define fields on response body types.
type DerivativeOrderResponseBody struct {
	// Specify chain ID.
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// Futures contract address?
	ExchangeAddress *string `form:"exchangeAddress,omitempty" json:"exchangeAddress,omitempty" xml:"exchangeAddress,omitempty"`
	// Address that created the order.
	MakerAddress *string `form:"makerAddress,omitempty" json:"makerAddress,omitempty" xml:"makerAddress,omitempty"`
	// Empty.
	TakerAddress *string `form:"takerAddress,omitempty" json:"takerAddress,omitempty" xml:"takerAddress,omitempty"`
	// Empty.
	FeeRecipientAddress *string `form:"feeRecipientAddress,omitempty" json:"feeRecipientAddress,omitempty" xml:"feeRecipientAddress,omitempty"`
	// Empty.
	SenderAddress *string `form:"senderAddress,omitempty" json:"senderAddress,omitempty" xml:"senderAddress,omitempty"`
	// The price of 1 contract denominated in base currency.
	MakerAssetAmount *string `form:"makerAssetAmount,omitempty" json:"makerAssetAmount,omitempty" xml:"makerAssetAmount,omitempty"`
	// The quantity of contracts the maker seeks to obtain.
	TakerAssetAmount *string `form:"takerAssetAmount,omitempty" json:"takerAssetAmount,omitempty" xml:"takerAssetAmount,omitempty"`
	// The direction of the contract. 1 for LONG, 2 for SHORT.
	MakerFee *string `form:"makerFee,omitempty" json:"makerFee,omitempty" xml:"makerFee,omitempty"`
	// Empty.
	TakerFee *string `form:"takerFee,omitempty" json:"takerFee,omitempty" xml:"takerFee,omitempty"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds *string `form:"expirationTimeSeconds,omitempty" json:"expirationTimeSeconds,omitempty" xml:"expirationTimeSeconds,omitempty"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt *string `form:"salt,omitempty" json:"salt,omitempty" xml:"salt,omitempty"`
	// The account ID of the account entering into the position. Must be an account
	// owned by makerAddress
	MakerAssetData *string `form:"makerAssetData,omitempty" json:"makerAssetData,omitempty" xml:"makerAssetData,omitempty"`
	// The marketID of the market for the position
	TakerAssetData *string `form:"takerAssetData,omitempty" json:"takerAssetData,omitempty" xml:"takerAssetData,omitempty"`
	// Empty.
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// Empty.
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
	// Order signature.
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// SDAValidationErrorResponseBody is used to define fields on response body
// types.
type SDAValidationErrorResponseBody struct {
	// Validation error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Validation error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Field name
	Field *string `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
}

// NewPostOrderRequestBody builds the HTTP request body from the payload of the
// "postOrder" endpoint of the "DerivativesAPI" service.
func NewPostOrderRequestBody(p *derivativesapi.PostOrderPayload) *PostOrderRequestBody {
	body := &PostOrderRequestBody{
		ChainID:               p.ChainID,
		ExchangeAddress:       p.ExchangeAddress,
		MakerAddress:          p.MakerAddress,
		TakerAddress:          p.TakerAddress,
		FeeRecipientAddress:   p.FeeRecipientAddress,
		SenderAddress:         p.SenderAddress,
		MakerAssetAmount:      p.MakerAssetAmount,
		TakerAssetAmount:      p.TakerAssetAmount,
		MakerFee:              p.MakerFee,
		TakerFee:              p.TakerFee,
		ExpirationTimeSeconds: p.ExpirationTimeSeconds,
		Salt:                  p.Salt,
		MakerAssetData:        p.MakerAssetData,
		TakerAssetData:        p.TakerAssetData,
		MakerFeeAssetData:     p.MakerFeeAssetData,
		TakerFeeAssetData:     p.TakerFeeAssetData,
		Signature:             p.Signature,
	}
	return body
}

// NewOrdersResultOK builds a "DerivativesAPI" service "orders" endpoint result
// from a HTTP "OK" response.
func NewOrdersResultOK(body *OrdersResponseBody) *derivativesapi.OrdersResult {
	v := &derivativesapi.OrdersResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		Total:           *body.Total,
		Page:            *body.Page,
		PerPage:         *body.PerPage,
	}
	v.Records = make([]*derivativesapi.DerivativeOrderRecord, len(body.Records))
	for i, val := range body.Records {
		v.Records[i] = unmarshalDerivativeOrderRecordResponseBodyToDerivativesapiDerivativeOrderRecord(val)
	}

	return v
}

// NewOrdersValidationError builds a DerivativesAPI service orders endpoint
// validation_error error.
func NewOrdersValidationError(body *OrdersValidationErrorResponseBody) *derivativesapi.SDAValidationErrorResponse {
	v := &derivativesapi.SDAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*derivativesapi.SDAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSDAValidationErrorResponseBodyToDerivativesapiSDAValidationError(val)
		}
	}

	return v
}

// NewOrdersNotFound builds a DerivativesAPI service orders endpoint not_found
// error.
func NewOrdersNotFound(body *OrdersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrdersRateLimit builds a DerivativesAPI service orders endpoint
// rate_limit error.
func NewOrdersRateLimit(body *OrdersRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrdersInternal builds a DerivativesAPI service orders endpoint internal
// error.
func NewOrdersInternal(body *OrdersInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrdersNotImplemented builds a DerivativesAPI service orders endpoint
// not_implemented error.
func NewOrdersNotImplemented(body *OrdersNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderResultCreated builds a "DerivativesAPI" service "postOrder"
// endpoint result from a HTTP "Created" response.
func NewPostOrderResultCreated(body *PostOrderResponseBody) *derivativesapi.PostOrderResult {
	v := &derivativesapi.PostOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}

	return v
}

// NewPostOrderValidationError builds a DerivativesAPI service postOrder
// endpoint validation_error error.
func NewPostOrderValidationError(body *PostOrderValidationErrorResponseBody) *derivativesapi.SDAValidationErrorResponse {
	v := &derivativesapi.SDAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*derivativesapi.SDAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSDAValidationErrorResponseBodyToDerivativesapiSDAValidationError(val)
		}
	}

	return v
}

// NewPostOrderNotFound builds a DerivativesAPI service postOrder endpoint
// not_found error.
func NewPostOrderNotFound(body *PostOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderRateLimit builds a DerivativesAPI service postOrder endpoint
// rate_limit error.
func NewPostOrderRateLimit(body *PostOrderRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderInternal builds a DerivativesAPI service postOrder endpoint
// internal error.
func NewPostOrderInternal(body *PostOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderNotImplemented builds a DerivativesAPI service postOrder
// endpoint not_implemented error.
func NewPostOrderNotImplemented(body *PostOrderNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateOrdersResponseBody runs the validations defined on OrdersResponseBody
func ValidateOrdersResponseBody(body *OrdersResponseBody) (err error) {
	if body.Records == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("records", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		if e != nil {
			if err2 := ValidateDerivativeOrderRecordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrdersValidationErrorResponseBody runs the validations defined on
// orders_validation_error_response_body
func ValidateOrdersValidationErrorResponseBody(body *OrdersValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSDAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrdersNotFoundResponseBody runs the validations defined on
// orders_not_found_response_body
func ValidateOrdersNotFoundResponseBody(body *OrdersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersRateLimitResponseBody runs the validations defined on
// orders_rate_limit_response_body
func ValidateOrdersRateLimitResponseBody(body *OrdersRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersInternalResponseBody runs the validations defined on
// orders_internal_response_body
func ValidateOrdersInternalResponseBody(body *OrdersInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersNotImplementedResponseBody runs the validations defined on
// orders_not_implemented_response_body
func ValidateOrdersNotImplementedResponseBody(body *OrdersNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderValidationErrorResponseBody runs the validations defined on
// postOrder_validation_error_response_body
func ValidatePostOrderValidationErrorResponseBody(body *PostOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSDAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePostOrderNotFoundResponseBody runs the validations defined on
// postOrder_not_found_response_body
func ValidatePostOrderNotFoundResponseBody(body *PostOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderRateLimitResponseBody runs the validations defined on
// postOrder_rate_limit_response_body
func ValidatePostOrderRateLimitResponseBody(body *PostOrderRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderInternalResponseBody runs the validations defined on
// postOrder_internal_response_body
func ValidatePostOrderInternalResponseBody(body *PostOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderNotImplementedResponseBody runs the validations defined on
// postOrder_not_implemented_response_body
func ValidatePostOrderNotImplementedResponseBody(body *PostOrderNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDerivativeOrderRecordResponseBody runs the validations defined on
// DerivativeOrderRecordResponseBody
func ValidateDerivativeOrderRecordResponseBody(body *DerivativeOrderRecordResponseBody) (err error) {
	if body.DerivativeOrder == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("derivativeOrder", "body"))
	}
	if body.MetaData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("metaData", "body"))
	}
	if body.DerivativeOrder != nil {
		if err2 := ValidateDerivativeOrderResponseBody(body.DerivativeOrder); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDerivativeOrderResponseBody runs the validations defined on
// DerivativeOrderResponseBody
func ValidateDerivativeOrderResponseBody(body *DerivativeOrderResponseBody) (err error) {
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	if body.ExchangeAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exchangeAddress", "body"))
	}
	if body.MakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAddress", "body"))
	}
	if body.TakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAddress", "body"))
	}
	if body.FeeRecipientAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feeRecipientAddress", "body"))
	}
	if body.SenderAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("senderAddress", "body"))
	}
	if body.MakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetAmount", "body"))
	}
	if body.TakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetAmount", "body"))
	}
	if body.MakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFee", "body"))
	}
	if body.TakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFee", "body"))
	}
	if body.ExpirationTimeSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expirationTimeSeconds", "body"))
	}
	if body.Salt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("salt", "body"))
	}
	if body.MakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetData", "body"))
	}
	if body.TakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetData", "body"))
	}
	if body.MakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFeeAssetData", "body"))
	}
	if body.TakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFeeAssetData", "body"))
	}
	if body.Signature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("signature", "body"))
	}
	if body.ChainID != nil {
		if !(*body.ChainID == 1 || *body.ChainID == 3 || *body.ChainID == 4 || *body.ChainID == 42 || *body.ChainID == 1337) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.chainId", *body.ChainID, []interface{}{1, 3, 4, 42, 1337}))
		}
	}
	if body.ExchangeAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.exchangeAddress", *body.ExchangeAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, true))
		}
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, false))
		}
	}
	if body.MakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAddress", *body.MakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, true))
		}
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, false))
		}
	}
	if body.TakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAddress", *body.TakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, true))
		}
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, false))
		}
	}
	if body.FeeRecipientAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", *body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, true))
		}
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, false))
		}
	}
	if body.SenderAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", *body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, true))
		}
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, false))
		}
	}
	if body.MakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetAmount", *body.MakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.MakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetAmount", *body.MakerAssetAmount, utf8.RuneCountInString(*body.MakerAssetAmount), 100, false))
		}
	}
	if body.TakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetAmount", *body.TakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.TakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetAmount", *body.TakerAssetAmount, utf8.RuneCountInString(*body.TakerAssetAmount), 100, false))
		}
	}
	if body.MakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", *body.MakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerFee != nil {
		if utf8.RuneCountInString(*body.MakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", *body.MakerFee, utf8.RuneCountInString(*body.MakerFee), 100, false))
		}
	}
	if body.TakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", *body.TakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerFee != nil {
		if utf8.RuneCountInString(*body.TakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", *body.TakerFee, utf8.RuneCountInString(*body.TakerFee), 100, false))
		}
	}
	if body.ExpirationTimeSeconds != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, "^\\d+(\\.\\d+)?$"))
	}
	if body.ExpirationTimeSeconds != nil {
		if utf8.RuneCountInString(*body.ExpirationTimeSeconds) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, utf8.RuneCountInString(*body.ExpirationTimeSeconds), 100, false))
		}
	}
	if body.Salt != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.salt", *body.Salt, "^\\d+(\\.\\d+)?$"))
	}
	if body.Salt != nil {
		if utf8.RuneCountInString(*body.Salt) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.salt", *body.Salt, utf8.RuneCountInString(*body.Salt), 100, false))
		}
	}
	if body.MakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", *body.MakerAssetData, "^0x[0-9a-fA-F]{32}$"))
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) < 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 34, true))
		}
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 34, false))
		}
	}
	if body.TakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", *body.TakerAssetData, "^0x[0-9a-fA-F]{32}$"))
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) < 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 34, true))
		}
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 34, false))
		}
	}
	if body.MakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", *body.MakerFeeAssetData, "^0x0$"))
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 3, true))
		}
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 3, false))
		}
	}
	if body.TakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", *body.TakerFeeAssetData, "^0x0$"))
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 3, true))
		}
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 3, false))
		}
	}
	if body.Signature != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.signature", *body.Signature, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	return
}

// ValidateSDAValidationErrorResponseBody runs the validations defined on
// SDAValidationErrorResponseBody
func ValidateSDAValidationErrorResponseBody(body *SDAValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 1000 || *body.Code == 1001 || *body.Code == 1002 || *body.Code == 1003 || *body.Code == 1004 || *body.Code == 1005 || *body.Code == 1006) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{1000, 1001, 1002, 1003, 1004, 1005, 1006}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Required field" || *body.Reason == "Incorrect format" || *body.Reason == "Invalid address" || *body.Reason == "Address not supported" || *body.Reason == "Value out of range" || *body.Reason == "Invalid signature or hash" || *body.Reason == "Unsupported option") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Required field", "Incorrect format", "Invalid address", "Address not supported", "Value out of range", "Invalid signature or hash", "Unsupported option"}))
		}
	}
	return
}
