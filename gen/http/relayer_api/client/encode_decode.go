// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RelayerAPI HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	relayerapi "github.com/InjectiveLabs/dexterm/gen/relayer_api"
	goahttp "goa.design/goa/v3/http"
)

// BuildAssetPairsRequest instantiates a HTTP request object with method and
// path set to call the "RelayerAPI" service "assetPairs" endpoint
func (c *Client) BuildAssetPairsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AssetPairsRelayerAPIPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerAPI", "assetPairs", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAssetPairsRequest returns an encoder for requests sent to the
// RelayerAPI assetPairs server.
func EncodeAssetPairsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayerapi.AssetPairsPayload)
		if !ok {
			return goahttp.ErrInvalidType("RelayerAPI", "assetPairs", "*relayerapi.AssetPairsPayload", v)
		}
		values := req.URL.Query()
		if p.AssetDataA != nil {
			values.Add("assetDataA", *p.AssetDataA)
		}
		if p.AssetDataB != nil {
			values.Add("assetDataB", *p.AssetDataB)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAssetPairsResponse returns a decoder for responses returned by the
// RelayerAPI assetPairs endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAssetPairsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodeAssetPairsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AssetPairsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "assetPairs", err)
			}
			err = ValidateAssetPairsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "assetPairs", err)
			}
			res := NewAssetPairsResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body AssetPairsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "assetPairs", err)
			}
			err = ValidateAssetPairsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "assetPairs", err)
			}
			return nil, NewAssetPairsNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body AssetPairsRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "assetPairs", err)
			}
			err = ValidateAssetPairsRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "assetPairs", err)
			}
			return nil, NewAssetPairsRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body AssetPairsInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "assetPairs", err)
			}
			err = ValidateAssetPairsInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "assetPairs", err)
			}
			return nil, NewAssetPairsInternal(&body)
		case http.StatusNotImplemented:
			var (
				body AssetPairsNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "assetPairs", err)
			}
			err = ValidateAssetPairsNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "assetPairs", err)
			}
			return nil, NewAssetPairsNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body AssetPairsValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "assetPairs", err)
			}
			err = ValidateAssetPairsValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "assetPairs", err)
			}
			return nil, NewAssetPairsValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerAPI", "assetPairs", resp.StatusCode, string(body))
		}
	}
}

// BuildOrdersRequest instantiates a HTTP request object with method and path
// set to call the "RelayerAPI" service "orders" endpoint
func (c *Client) BuildOrdersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OrdersRelayerAPIPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerAPI", "orders", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeOrdersRequest returns an encoder for requests sent to the RelayerAPI
// orders server.
func EncodeOrdersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayerapi.OrdersPayload)
		if !ok {
			return goahttp.ErrInvalidType("RelayerAPI", "orders", "*relayerapi.OrdersPayload", v)
		}
		values := req.URL.Query()
		if p.MakerAssetProxyID != nil {
			values.Add("makerAssetProxyId", *p.MakerAssetProxyID)
		}
		if p.TakerAssetProxyID != nil {
			values.Add("takerAssetProxyId", *p.TakerAssetProxyID)
		}
		if p.MakerAssetAddress != nil {
			values.Add("makerAssetAddress", *p.MakerAssetAddress)
		}
		if p.TakerAssetAddress != nil {
			values.Add("takerAssetAddress", *p.TakerAssetAddress)
		}
		if p.ExchangeAddress != nil {
			values.Add("exchangeAddress", *p.ExchangeAddress)
		}
		if p.SenderAddress != nil {
			values.Add("senderAddress", *p.SenderAddress)
		}
		if p.MakerAssetData != nil {
			values.Add("makerAssetData", *p.MakerAssetData)
		}
		if p.TakerAssetData != nil {
			values.Add("takerAssetData", *p.TakerAssetData)
		}
		if p.TraderAssetData != nil {
			values.Add("traderAssetData", *p.TraderAssetData)
		}
		if p.MakerAddress != nil {
			values.Add("makerAddress", *p.MakerAddress)
		}
		if p.TakerAddress != nil {
			values.Add("takerAddress", *p.TakerAddress)
		}
		if p.TraderAddress != nil {
			values.Add("traderAddress", *p.TraderAddress)
		}
		if p.FeeRecipientAddress != nil {
			values.Add("feeRecipientAddress", *p.FeeRecipientAddress)
		}
		req.URL.RawQuery = values.Encode()
		body := NewOrdersRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("RelayerAPI", "orders", err)
		}
		return nil
	}
}

// DecodeOrdersResponse returns a decoder for responses returned by the
// RelayerAPI orders endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeOrdersResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodeOrdersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body OrdersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orders", err)
			}
			err = ValidateOrdersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orders", err)
			}
			res := NewOrdersResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body OrdersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orders", err)
			}
			err = ValidateOrdersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orders", err)
			}
			return nil, NewOrdersNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body OrdersRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orders", err)
			}
			err = ValidateOrdersRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orders", err)
			}
			return nil, NewOrdersRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body OrdersInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orders", err)
			}
			err = ValidateOrdersInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orders", err)
			}
			return nil, NewOrdersInternal(&body)
		case http.StatusNotImplemented:
			var (
				body OrdersNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orders", err)
			}
			err = ValidateOrdersNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orders", err)
			}
			return nil, NewOrdersNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body OrdersValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orders", err)
			}
			err = ValidateOrdersValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orders", err)
			}
			return nil, NewOrdersValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerAPI", "orders", resp.StatusCode, string(body))
		}
	}
}

// BuildOrderByHashRequest instantiates a HTTP request object with method and
// path set to call the "RelayerAPI" service "orderByHash" endpoint
func (c *Client) BuildOrderByHashRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orderHash string
	)
	{
		p, ok := v.(*relayerapi.OrderByHashPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("RelayerAPI", "orderByHash", "*relayerapi.OrderByHashPayload", v)
		}
		orderHash = p.OrderHash
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OrderByHashRelayerAPIPath(orderHash)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerAPI", "orderByHash", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeOrderByHashResponse returns a decoder for responses returned by the
// RelayerAPI orderByHash endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeOrderByHashResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodeOrderByHashResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body OrderByHashResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderByHash", err)
			}
			err = ValidateOrderByHashResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderByHash", err)
			}
			res := NewOrderByHashResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body OrderByHashNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderByHash", err)
			}
			err = ValidateOrderByHashNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderByHash", err)
			}
			return nil, NewOrderByHashNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body OrderByHashRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderByHash", err)
			}
			err = ValidateOrderByHashRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderByHash", err)
			}
			return nil, NewOrderByHashRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body OrderByHashInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderByHash", err)
			}
			err = ValidateOrderByHashInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderByHash", err)
			}
			return nil, NewOrderByHashInternal(&body)
		case http.StatusNotImplemented:
			var (
				body OrderByHashNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderByHash", err)
			}
			err = ValidateOrderByHashNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderByHash", err)
			}
			return nil, NewOrderByHashNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body OrderByHashValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderByHash", err)
			}
			err = ValidateOrderByHashValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderByHash", err)
			}
			return nil, NewOrderByHashValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerAPI", "orderByHash", resp.StatusCode, string(body))
		}
	}
}

// BuildOrderbookRequest instantiates a HTTP request object with method and
// path set to call the "RelayerAPI" service "orderbook" endpoint
func (c *Client) BuildOrderbookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OrderbookRelayerAPIPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerAPI", "orderbook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeOrderbookRequest returns an encoder for requests sent to the
// RelayerAPI orderbook server.
func EncodeOrderbookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayerapi.OrderbookPayload)
		if !ok {
			return goahttp.ErrInvalidType("RelayerAPI", "orderbook", "*relayerapi.OrderbookPayload", v)
		}
		values := req.URL.Query()
		values.Add("baseAssetData", p.BaseAssetData)
		values.Add("quoteAssetData", p.QuoteAssetData)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeOrderbookResponse returns a decoder for responses returned by the
// RelayerAPI orderbook endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeOrderbookResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodeOrderbookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body OrderbookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderbook", err)
			}
			err = ValidateOrderbookResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderbook", err)
			}
			res := NewOrderbookResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body OrderbookNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderbook", err)
			}
			err = ValidateOrderbookNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderbook", err)
			}
			return nil, NewOrderbookNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body OrderbookRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderbook", err)
			}
			err = ValidateOrderbookRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderbook", err)
			}
			return nil, NewOrderbookRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body OrderbookInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderbook", err)
			}
			err = ValidateOrderbookInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderbook", err)
			}
			return nil, NewOrderbookInternal(&body)
		case http.StatusNotImplemented:
			var (
				body OrderbookNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderbook", err)
			}
			err = ValidateOrderbookNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderbook", err)
			}
			return nil, NewOrderbookNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body OrderbookValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderbook", err)
			}
			err = ValidateOrderbookValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderbook", err)
			}
			return nil, NewOrderbookValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerAPI", "orderbook", resp.StatusCode, string(body))
		}
	}
}

// BuildOrderConfigRequest instantiates a HTTP request object with method and
// path set to call the "RelayerAPI" service "orderConfig" endpoint
func (c *Client) BuildOrderConfigRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OrderConfigRelayerAPIPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerAPI", "orderConfig", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeOrderConfigRequest returns an encoder for requests sent to the
// RelayerAPI orderConfig server.
func EncodeOrderConfigRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayerapi.OrderConfigPayload)
		if !ok {
			return goahttp.ErrInvalidType("RelayerAPI", "orderConfig", "*relayerapi.OrderConfigPayload", v)
		}
		body := NewOrderConfigRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("RelayerAPI", "orderConfig", err)
		}
		return nil
	}
}

// DecodeOrderConfigResponse returns a decoder for responses returned by the
// RelayerAPI orderConfig endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeOrderConfigResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodeOrderConfigResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body OrderConfigResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderConfig", err)
			}
			err = ValidateOrderConfigResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderConfig", err)
			}
			res := NewOrderConfigResultCreated(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body OrderConfigNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderConfig", err)
			}
			err = ValidateOrderConfigNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderConfig", err)
			}
			return nil, NewOrderConfigNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body OrderConfigRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderConfig", err)
			}
			err = ValidateOrderConfigRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderConfig", err)
			}
			return nil, NewOrderConfigRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body OrderConfigInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderConfig", err)
			}
			err = ValidateOrderConfigInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderConfig", err)
			}
			return nil, NewOrderConfigInternal(&body)
		case http.StatusNotImplemented:
			var (
				body OrderConfigNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderConfig", err)
			}
			err = ValidateOrderConfigNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderConfig", err)
			}
			return nil, NewOrderConfigNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body OrderConfigValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "orderConfig", err)
			}
			err = ValidateOrderConfigValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "orderConfig", err)
			}
			return nil, NewOrderConfigValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerAPI", "orderConfig", resp.StatusCode, string(body))
		}
	}
}

// BuildFeeRecipientsRequest instantiates a HTTP request object with method and
// path set to call the "RelayerAPI" service "feeRecipients" endpoint
func (c *Client) BuildFeeRecipientsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FeeRecipientsRelayerAPIPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerAPI", "feeRecipients", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFeeRecipientsResponse returns a decoder for responses returned by the
// RelayerAPI feeRecipients endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeFeeRecipientsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodeFeeRecipientsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FeeRecipientsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "feeRecipients", err)
			}
			err = ValidateFeeRecipientsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "feeRecipients", err)
			}
			res := NewFeeRecipientsResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body FeeRecipientsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "feeRecipients", err)
			}
			err = ValidateFeeRecipientsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "feeRecipients", err)
			}
			return nil, NewFeeRecipientsNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body FeeRecipientsRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "feeRecipients", err)
			}
			err = ValidateFeeRecipientsRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "feeRecipients", err)
			}
			return nil, NewFeeRecipientsRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body FeeRecipientsInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "feeRecipients", err)
			}
			err = ValidateFeeRecipientsInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "feeRecipients", err)
			}
			return nil, NewFeeRecipientsInternal(&body)
		case http.StatusNotImplemented:
			var (
				body FeeRecipientsNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "feeRecipients", err)
			}
			err = ValidateFeeRecipientsNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "feeRecipients", err)
			}
			return nil, NewFeeRecipientsNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body FeeRecipientsValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "feeRecipients", err)
			}
			err = ValidateFeeRecipientsValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "feeRecipients", err)
			}
			return nil, NewFeeRecipientsValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerAPI", "feeRecipients", resp.StatusCode, string(body))
		}
	}
}

// BuildPostOrderRequest instantiates a HTTP request object with method and
// path set to call the "RelayerAPI" service "postOrder" endpoint
func (c *Client) BuildPostOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PostOrderRelayerAPIPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerAPI", "postOrder", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePostOrderRequest returns an encoder for requests sent to the
// RelayerAPI postOrder server.
func EncodePostOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayerapi.PostOrderPayload)
		if !ok {
			return goahttp.ErrInvalidType("RelayerAPI", "postOrder", "*relayerapi.PostOrderPayload", v)
		}
		body := NewPostOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("RelayerAPI", "postOrder", err)
		}
		return nil
	}
}

// DecodePostOrderResponse returns a decoder for responses returned by the
// RelayerAPI postOrder endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodePostOrderResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodePostOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body PostOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "postOrder", err)
			}
			res := NewPostOrderResultCreated(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body PostOrderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "postOrder", err)
			}
			err = ValidatePostOrderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "postOrder", err)
			}
			return nil, NewPostOrderNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body PostOrderRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "postOrder", err)
			}
			err = ValidatePostOrderRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "postOrder", err)
			}
			return nil, NewPostOrderRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body PostOrderInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "postOrder", err)
			}
			err = ValidatePostOrderInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "postOrder", err)
			}
			return nil, NewPostOrderInternal(&body)
		case http.StatusNotImplemented:
			var (
				body PostOrderNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "postOrder", err)
			}
			err = ValidatePostOrderNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "postOrder", err)
			}
			return nil, NewPostOrderNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body PostOrderValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerAPI", "postOrder", err)
			}
			err = ValidatePostOrderValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerAPI", "postOrder", err)
			}
			return nil, NewPostOrderValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerAPI", "postOrder", resp.StatusCode, string(body))
		}
	}
}

// unmarshalAssetPairRecordResponseBodyToRelayerapiAssetPairRecord builds a
// value of type *relayerapi.AssetPairRecord from a value of type
// *AssetPairRecordResponseBody.
func unmarshalAssetPairRecordResponseBodyToRelayerapiAssetPairRecord(v *AssetPairRecordResponseBody) *relayerapi.AssetPairRecord {
	if v == nil {
		return nil
	}
	res := &relayerapi.AssetPairRecord{}
	res.AssetDataA = unmarshalAssetRecordResponseBodyToRelayerapiAssetRecord(v.AssetDataA)
	res.AssetDataB = unmarshalAssetRecordResponseBodyToRelayerapiAssetRecord(v.AssetDataB)

	return res
}

// unmarshalAssetRecordResponseBodyToRelayerapiAssetRecord builds a value of
// type *relayerapi.AssetRecord from a value of type *AssetRecordResponseBody.
func unmarshalAssetRecordResponseBodyToRelayerapiAssetRecord(v *AssetRecordResponseBody) *relayerapi.AssetRecord {
	res := &relayerapi.AssetRecord{
		AssetData: *v.AssetData,
		MinAmount: *v.MinAmount,
		MaxAmount: *v.MaxAmount,
		Precision: *v.Precision,
	}

	return res
}

// unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError builds
// a value of type *relayerapi.SRAValidationError from a value of type
// *SRAValidationErrorResponseBody.
func unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(v *SRAValidationErrorResponseBody) *relayerapi.SRAValidationError {
	if v == nil {
		return nil
	}
	res := &relayerapi.SRAValidationError{
		Code:   *v.Code,
		Reason: *v.Reason,
		Field:  v.Field,
	}

	return res
}

// unmarshalOrderRecordResponseBodyToRelayerapiOrderRecord builds a value of
// type *relayerapi.OrderRecord from a value of type *OrderRecordResponseBody.
func unmarshalOrderRecordResponseBodyToRelayerapiOrderRecord(v *OrderRecordResponseBody) *relayerapi.OrderRecord {
	if v == nil {
		return nil
	}
	res := &relayerapi.OrderRecord{
		MetaData: v.MetaData,
	}
	if v.Order != nil {
		res.Order = unmarshalOrderResponseBodyToRelayerapiOrder(v.Order)
	}

	return res
}

// unmarshalOrderResponseBodyToRelayerapiOrder builds a value of type
// *relayerapi.Order from a value of type *OrderResponseBody.
func unmarshalOrderResponseBodyToRelayerapiOrder(v *OrderResponseBody) *relayerapi.Order {
	if v == nil {
		return nil
	}
	res := &relayerapi.Order{
		ChainID:               *v.ChainID,
		ExchangeAddress:       *v.ExchangeAddress,
		MakerAddress:          *v.MakerAddress,
		TakerAddress:          *v.TakerAddress,
		FeeRecipientAddress:   *v.FeeRecipientAddress,
		SenderAddress:         *v.SenderAddress,
		MakerAssetAmount:      *v.MakerAssetAmount,
		TakerAssetAmount:      *v.TakerAssetAmount,
		MakerFee:              *v.MakerFee,
		TakerFee:              *v.TakerFee,
		ExpirationTimeSeconds: *v.ExpirationTimeSeconds,
		Salt:                  *v.Salt,
		MakerAssetData:        *v.MakerAssetData,
		TakerAssetData:        *v.TakerAssetData,
		MakerFeeAssetData:     *v.MakerFeeAssetData,
		TakerFeeAssetData:     *v.TakerFeeAssetData,
		Signature:             *v.Signature,
	}

	return res
}

// unmarshalSRAPaginatedOrderRecordsResponseBodyToRelayerapiSRAPaginatedOrderRecords
// builds a value of type *relayerapi.SRAPaginatedOrderRecords from a value of
// type *SRAPaginatedOrderRecordsResponseBody.
func unmarshalSRAPaginatedOrderRecordsResponseBodyToRelayerapiSRAPaginatedOrderRecords(v *SRAPaginatedOrderRecordsResponseBody) *relayerapi.SRAPaginatedOrderRecords {
	if v == nil {
		return nil
	}
	res := &relayerapi.SRAPaginatedOrderRecords{
		Total:   *v.Total,
		Page:    *v.Page,
		PerPage: *v.PerPage,
	}
	if v.Records != nil {
		res.Records = make([]*relayerapi.OrderRecord, len(v.Records))
		for i, val := range v.Records {
			res.Records[i] = unmarshalOrderRecordResponseBodyToRelayerapiOrderRecord(val)
		}
	}

	return res
}
