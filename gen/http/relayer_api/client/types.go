// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RelayerAPI HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package client

import (
	"unicode/utf8"

	relayerapi "github.com/InjectiveLabs/injective-core/api/gen/relayer_api"
	goa "goa.design/goa/v3/pkg"
)

// OrderConfigRequestBody is the type of the "RelayerAPI" service "orderConfig"
// endpoint HTTP request body.
type OrderConfigRequestBody struct {
	// Specify chain ID.
	ChainID int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// Exchange v3 contract address.
	ExchangeAddress string `form:"exchangeAddress" json:"exchangeAddress" xml:"exchangeAddress"`
	// Address that created the order.
	MakerAddress string `form:"makerAddress" json:"makerAddress" xml:"makerAddress"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress string `form:"takerAddress" json:"takerAddress" xml:"takerAddress"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount string `form:"makerAssetAmount" json:"makerAssetAmount" xml:"makerAssetAmount"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount string `form:"takerAssetAmount" json:"takerAssetAmount" xml:"takerAssetAmount"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string `form:"makerAssetData" json:"makerAssetData" xml:"makerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string `form:"takerAssetData" json:"takerAssetData" xml:"takerAssetData"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string `form:"expirationTimeSeconds" json:"expirationTimeSeconds" xml:"expirationTimeSeconds"`
}

// PostOrderRequestBody is the type of the "RelayerAPI" service "postOrder"
// endpoint HTTP request body.
type PostOrderRequestBody struct {
	// Specify chain ID.
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// Exchange v3 contract address.
	ExchangeAddress string `form:"exchangeAddress" json:"exchangeAddress" xml:"exchangeAddress"`
	// Address that created the order.
	MakerAddress string `form:"makerAddress" json:"makerAddress" xml:"makerAddress"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress string `form:"takerAddress" json:"takerAddress" xml:"takerAddress"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress string `form:"feeRecipientAddress" json:"feeRecipientAddress" xml:"feeRecipientAddress"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress string `form:"senderAddress" json:"senderAddress" xml:"senderAddress"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount string `form:"makerAssetAmount" json:"makerAssetAmount" xml:"makerAssetAmount"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount string `form:"takerAssetAmount" json:"takerAssetAmount" xml:"takerAssetAmount"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee string `form:"makerFee" json:"makerFee" xml:"makerFee"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee string `form:"takerFee" json:"takerFee" xml:"takerFee"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string `form:"expirationTimeSeconds" json:"expirationTimeSeconds" xml:"expirationTimeSeconds"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt string `form:"salt" json:"salt" xml:"salt"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string `form:"makerAssetData" json:"makerAssetData" xml:"makerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string `form:"takerAssetData" json:"takerAssetData" xml:"takerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData string `form:"makerFeeAssetData" json:"makerFeeAssetData" xml:"makerFeeAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData string `form:"takerFeeAssetData" json:"takerFeeAssetData" xml:"takerFeeAssetData"`
	// Order signature.
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// AssetPairsResponseBody is the type of the "RelayerAPI" service "assetPairs"
// endpoint HTTP response body.
type AssetPairsResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// Asset pairs that contain assetDataA and assetDataB (listed in any order).
	Records []*AssetPairRecordResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// OrdersResponseBody is the type of the "RelayerAPI" service "orders" endpoint
// HTTP response body.
type OrdersResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// If both makerAssetData and takerAssetData are specified, returned orders
	// will be sorted by price determined by (takerAssetAmount/makerAssetAmount).
	Records []*OrderRecordResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// OrderByHashResponseBody is the type of the "RelayerAPI" service
// "orderByHash" endpoint HTTP response body.
type OrderByHashResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Order item.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData map[string]string `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// OrderbookResponseBody is the type of the "RelayerAPI" service "orderbook"
// endpoint HTTP response body.
type OrderbookResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Array of signed orders where takerAssetData is equal to baseAssetData. Bids
	// will be sorted in descending order by price.
	Bids *SRAPaginatedOrderRecordsResponseBody `form:"bids,omitempty" json:"bids,omitempty" xml:"bids,omitempty"`
	// Array of signed orders where makerAssetData is equal to baseAssetData. Asks
	// will be sorted in ascending order by price.
	Asks *SRAPaginatedOrderRecordsResponseBody `form:"asks,omitempty" json:"asks,omitempty" xml:"asks,omitempty"`
}

// OrderConfigResponseBody is the type of the "RelayerAPI" service
// "orderConfig" endpoint HTTP response body.
type OrderConfigResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress *string `form:"senderAddress,omitempty" json:"senderAddress,omitempty" xml:"senderAddress,omitempty"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress *string `form:"feeRecipientAddress,omitempty" json:"feeRecipientAddress,omitempty" xml:"feeRecipientAddress,omitempty"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee *string `form:"makerFee,omitempty" json:"makerFee,omitempty" xml:"makerFee,omitempty"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee *string `form:"takerFee,omitempty" json:"takerFee,omitempty" xml:"takerFee,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
}

// FeeRecipientsResponseBody is the type of the "RelayerAPI" service
// "feeRecipients" endpoint HTTP response body.
type FeeRecipientsResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// List of all fee recipient addresses for a relayer
	List []string `form:"list,omitempty" json:"list,omitempty" xml:"list,omitempty"`
}

// PostOrderResponseBody is the type of the "RelayerAPI" service "postOrder"
// endpoint HTTP response body.
type PostOrderResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
}

// AssetPairsNotFoundResponseBody is the type of the "RelayerAPI" service
// "assetPairs" endpoint HTTP response body for the "not_found" error.
type AssetPairsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsRateLimitResponseBody is the type of the "RelayerAPI" service
// "assetPairs" endpoint HTTP response body for the "rate_limit" error.
type AssetPairsRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsInternalResponseBody is the type of the "RelayerAPI" service
// "assetPairs" endpoint HTTP response body for the "internal" error.
type AssetPairsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsNotImplementedResponseBody is the type of the "RelayerAPI" service
// "assetPairs" endpoint HTTP response body for the "not_implemented" error.
type AssetPairsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsValidationErrorResponseBody is the type of the "RelayerAPI"
// service "assetPairs" endpoint HTTP response body for the "validation_error"
// error.
type AssetPairsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SRAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrdersNotFoundResponseBody is the type of the "RelayerAPI" service "orders"
// endpoint HTTP response body for the "not_found" error.
type OrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersRateLimitResponseBody is the type of the "RelayerAPI" service "orders"
// endpoint HTTP response body for the "rate_limit" error.
type OrdersRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersInternalResponseBody is the type of the "RelayerAPI" service "orders"
// endpoint HTTP response body for the "internal" error.
type OrdersInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersNotImplementedResponseBody is the type of the "RelayerAPI" service
// "orders" endpoint HTTP response body for the "not_implemented" error.
type OrdersNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersValidationErrorResponseBody is the type of the "RelayerAPI" service
// "orders" endpoint HTTP response body for the "validation_error" error.
type OrdersValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SRAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrderByHashNotFoundResponseBody is the type of the "RelayerAPI" service
// "orderByHash" endpoint HTTP response body for the "not_found" error.
type OrderByHashNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashRateLimitResponseBody is the type of the "RelayerAPI" service
// "orderByHash" endpoint HTTP response body for the "rate_limit" error.
type OrderByHashRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashInternalResponseBody is the type of the "RelayerAPI" service
// "orderByHash" endpoint HTTP response body for the "internal" error.
type OrderByHashInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashNotImplementedResponseBody is the type of the "RelayerAPI"
// service "orderByHash" endpoint HTTP response body for the "not_implemented"
// error.
type OrderByHashNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashValidationErrorResponseBody is the type of the "RelayerAPI"
// service "orderByHash" endpoint HTTP response body for the "validation_error"
// error.
type OrderByHashValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SRAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrderbookNotFoundResponseBody is the type of the "RelayerAPI" service
// "orderbook" endpoint HTTP response body for the "not_found" error.
type OrderbookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookRateLimitResponseBody is the type of the "RelayerAPI" service
// "orderbook" endpoint HTTP response body for the "rate_limit" error.
type OrderbookRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookInternalResponseBody is the type of the "RelayerAPI" service
// "orderbook" endpoint HTTP response body for the "internal" error.
type OrderbookInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookNotImplementedResponseBody is the type of the "RelayerAPI" service
// "orderbook" endpoint HTTP response body for the "not_implemented" error.
type OrderbookNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookValidationErrorResponseBody is the type of the "RelayerAPI" service
// "orderbook" endpoint HTTP response body for the "validation_error" error.
type OrderbookValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SRAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrderConfigNotFoundResponseBody is the type of the "RelayerAPI" service
// "orderConfig" endpoint HTTP response body for the "not_found" error.
type OrderConfigNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigRateLimitResponseBody is the type of the "RelayerAPI" service
// "orderConfig" endpoint HTTP response body for the "rate_limit" error.
type OrderConfigRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigInternalResponseBody is the type of the "RelayerAPI" service
// "orderConfig" endpoint HTTP response body for the "internal" error.
type OrderConfigInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigNotImplementedResponseBody is the type of the "RelayerAPI"
// service "orderConfig" endpoint HTTP response body for the "not_implemented"
// error.
type OrderConfigNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigValidationErrorResponseBody is the type of the "RelayerAPI"
// service "orderConfig" endpoint HTTP response body for the "validation_error"
// error.
type OrderConfigValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SRAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// FeeRecipientsNotFoundResponseBody is the type of the "RelayerAPI" service
// "feeRecipients" endpoint HTTP response body for the "not_found" error.
type FeeRecipientsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsRateLimitResponseBody is the type of the "RelayerAPI" service
// "feeRecipients" endpoint HTTP response body for the "rate_limit" error.
type FeeRecipientsRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsInternalResponseBody is the type of the "RelayerAPI" service
// "feeRecipients" endpoint HTTP response body for the "internal" error.
type FeeRecipientsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsNotImplementedResponseBody is the type of the "RelayerAPI"
// service "feeRecipients" endpoint HTTP response body for the
// "not_implemented" error.
type FeeRecipientsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsValidationErrorResponseBody is the type of the "RelayerAPI"
// service "feeRecipients" endpoint HTTP response body for the
// "validation_error" error.
type FeeRecipientsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SRAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// PostOrderNotFoundResponseBody is the type of the "RelayerAPI" service
// "postOrder" endpoint HTTP response body for the "not_found" error.
type PostOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderRateLimitResponseBody is the type of the "RelayerAPI" service
// "postOrder" endpoint HTTP response body for the "rate_limit" error.
type PostOrderRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderInternalResponseBody is the type of the "RelayerAPI" service
// "postOrder" endpoint HTTP response body for the "internal" error.
type PostOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderNotImplementedResponseBody is the type of the "RelayerAPI" service
// "postOrder" endpoint HTTP response body for the "not_implemented" error.
type PostOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderValidationErrorResponseBody is the type of the "RelayerAPI" service
// "postOrder" endpoint HTTP response body for the "validation_error" error.
type PostOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*SRAValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// AssetPairRecordResponseBody is used to define fields on response body types.
type AssetPairRecordResponseBody struct {
	// First asset record of the pair.
	AssetDataA *AssetRecordResponseBody `form:"assetDataA,omitempty" json:"assetDataA,omitempty" xml:"assetDataA,omitempty"`
	// Second asset record of the pair.
	AssetDataB *AssetRecordResponseBody `form:"assetDataB,omitempty" json:"assetDataB,omitempty" xml:"assetDataB,omitempty"`
}

// AssetRecordResponseBody is used to define fields on response body types.
type AssetRecordResponseBody struct {
	// ABIv2 encoded assetData representing that token.
	AssetData *string `form:"assetData,omitempty" json:"assetData,omitempty" xml:"assetData,omitempty"`
	// The minimum trade amount the relayer will accept.
	MinAmount *string `form:"minAmount,omitempty" json:"minAmount,omitempty" xml:"minAmount,omitempty"`
	// The maximum trade amount the relayer will accept.
	MaxAmount *string `form:"maxAmount,omitempty" json:"maxAmount,omitempty" xml:"maxAmount,omitempty"`
	// The desired price precision a relayer would like to support within their
	// orderbook.
	Precision *string `form:"precision,omitempty" json:"precision,omitempty" xml:"precision,omitempty"`
}

// SRAValidationErrorResponseBody is used to define fields on response body
// types.
type SRAValidationErrorResponseBody struct {
	// Validation error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Validation error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Field name
	Field *string `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
}

// OrderRecordResponseBody is used to define fields on response body types.
type OrderRecordResponseBody struct {
	// Order item.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData map[string]string `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// OrderResponseBody is used to define fields on response body types.
type OrderResponseBody struct {
	// Specify chain ID.
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// Exchange v3 contract address.
	ExchangeAddress *string `form:"exchangeAddress,omitempty" json:"exchangeAddress,omitempty" xml:"exchangeAddress,omitempty"`
	// Address that created the order.
	MakerAddress *string `form:"makerAddress,omitempty" json:"makerAddress,omitempty" xml:"makerAddress,omitempty"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress *string `form:"takerAddress,omitempty" json:"takerAddress,omitempty" xml:"takerAddress,omitempty"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress *string `form:"feeRecipientAddress,omitempty" json:"feeRecipientAddress,omitempty" xml:"feeRecipientAddress,omitempty"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress *string `form:"senderAddress,omitempty" json:"senderAddress,omitempty" xml:"senderAddress,omitempty"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount *string `form:"makerAssetAmount,omitempty" json:"makerAssetAmount,omitempty" xml:"makerAssetAmount,omitempty"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount *string `form:"takerAssetAmount,omitempty" json:"takerAssetAmount,omitempty" xml:"takerAssetAmount,omitempty"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee *string `form:"makerFee,omitempty" json:"makerFee,omitempty" xml:"makerFee,omitempty"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee *string `form:"takerFee,omitempty" json:"takerFee,omitempty" xml:"takerFee,omitempty"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds *string `form:"expirationTimeSeconds,omitempty" json:"expirationTimeSeconds,omitempty" xml:"expirationTimeSeconds,omitempty"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt *string `form:"salt,omitempty" json:"salt,omitempty" xml:"salt,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData *string `form:"makerAssetData,omitempty" json:"makerAssetData,omitempty" xml:"makerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData *string `form:"takerAssetData,omitempty" json:"takerAssetData,omitempty" xml:"takerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
	// Order signature.
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// SRAPaginatedOrderRecordsResponseBody is used to define fields on response
// body types.
type SRAPaginatedOrderRecordsResponseBody struct {
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// Array of signed orders
	Records []*OrderRecordResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// NewOrderConfigRequestBody builds the HTTP request body from the payload of
// the "orderConfig" endpoint of the "RelayerAPI" service.
func NewOrderConfigRequestBody(p *relayerapi.OrderConfigPayload) *OrderConfigRequestBody {
	body := &OrderConfigRequestBody{
		ChainID:               p.ChainID,
		ExchangeAddress:       p.ExchangeAddress,
		MakerAddress:          p.MakerAddress,
		TakerAddress:          p.TakerAddress,
		MakerAssetAmount:      p.MakerAssetAmount,
		TakerAssetAmount:      p.TakerAssetAmount,
		MakerAssetData:        p.MakerAssetData,
		TakerAssetData:        p.TakerAssetData,
		ExpirationTimeSeconds: p.ExpirationTimeSeconds,
	}
	return body
}

// NewPostOrderRequestBody builds the HTTP request body from the payload of the
// "postOrder" endpoint of the "RelayerAPI" service.
func NewPostOrderRequestBody(p *relayerapi.PostOrderPayload) *PostOrderRequestBody {
	body := &PostOrderRequestBody{
		ChainID:               p.ChainID,
		ExchangeAddress:       p.ExchangeAddress,
		MakerAddress:          p.MakerAddress,
		TakerAddress:          p.TakerAddress,
		FeeRecipientAddress:   p.FeeRecipientAddress,
		SenderAddress:         p.SenderAddress,
		MakerAssetAmount:      p.MakerAssetAmount,
		TakerAssetAmount:      p.TakerAssetAmount,
		MakerFee:              p.MakerFee,
		TakerFee:              p.TakerFee,
		ExpirationTimeSeconds: p.ExpirationTimeSeconds,
		Salt:                  p.Salt,
		MakerAssetData:        p.MakerAssetData,
		TakerAssetData:        p.TakerAssetData,
		MakerFeeAssetData:     p.MakerFeeAssetData,
		TakerFeeAssetData:     p.TakerFeeAssetData,
		Signature:             p.Signature,
	}
	return body
}

// NewAssetPairsResultOK builds a "RelayerAPI" service "assetPairs" endpoint
// result from a HTTP "OK" response.
func NewAssetPairsResultOK(body *AssetPairsResponseBody) *relayerapi.AssetPairsResult {
	v := &relayerapi.AssetPairsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		Total:           *body.Total,
		Page:            *body.Page,
		PerPage:         *body.PerPage,
	}
	v.Records = make([]*relayerapi.AssetPairRecord, len(body.Records))
	for i, val := range body.Records {
		v.Records[i] = unmarshalAssetPairRecordResponseBodyToRelayerapiAssetPairRecord(val)
	}

	return v
}

// NewAssetPairsNotFound builds a RelayerAPI service assetPairs endpoint
// not_found error.
func NewAssetPairsNotFound(body *AssetPairsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAssetPairsRateLimit builds a RelayerAPI service assetPairs endpoint
// rate_limit error.
func NewAssetPairsRateLimit(body *AssetPairsRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAssetPairsInternal builds a RelayerAPI service assetPairs endpoint
// internal error.
func NewAssetPairsInternal(body *AssetPairsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAssetPairsNotImplemented builds a RelayerAPI service assetPairs endpoint
// not_implemented error.
func NewAssetPairsNotImplemented(body *AssetPairsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAssetPairsValidationError builds a RelayerAPI service assetPairs endpoint
// validation_error error.
func NewAssetPairsValidationError(body *AssetPairsValidationErrorResponseBody) *relayerapi.SRAValidationErrorResponse {
	v := &relayerapi.SRAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayerapi.SRAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(val)
		}
	}

	return v
}

// NewOrdersResultOK builds a "RelayerAPI" service "orders" endpoint result
// from a HTTP "OK" response.
func NewOrdersResultOK(body *OrdersResponseBody) *relayerapi.OrdersResult {
	v := &relayerapi.OrdersResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		Total:           *body.Total,
		Page:            *body.Page,
		PerPage:         *body.PerPage,
	}
	v.Records = make([]*relayerapi.OrderRecord, len(body.Records))
	for i, val := range body.Records {
		v.Records[i] = unmarshalOrderRecordResponseBodyToRelayerapiOrderRecord(val)
	}

	return v
}

// NewOrdersNotFound builds a RelayerAPI service orders endpoint not_found
// error.
func NewOrdersNotFound(body *OrdersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrdersRateLimit builds a RelayerAPI service orders endpoint rate_limit
// error.
func NewOrdersRateLimit(body *OrdersRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrdersInternal builds a RelayerAPI service orders endpoint internal error.
func NewOrdersInternal(body *OrdersInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrdersNotImplemented builds a RelayerAPI service orders endpoint
// not_implemented error.
func NewOrdersNotImplemented(body *OrdersNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrdersValidationError builds a RelayerAPI service orders endpoint
// validation_error error.
func NewOrdersValidationError(body *OrdersValidationErrorResponseBody) *relayerapi.SRAValidationErrorResponse {
	v := &relayerapi.SRAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayerapi.SRAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(val)
		}
	}

	return v
}

// NewOrderByHashResultOK builds a "RelayerAPI" service "orderByHash" endpoint
// result from a HTTP "OK" response.
func NewOrderByHashResultOK(body *OrderByHashResponseBody) *relayerapi.OrderByHashResult {
	v := &relayerapi.OrderByHashResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}
	v.Order = unmarshalOrderResponseBodyToRelayerapiOrder(body.Order)
	v.MetaData = make(map[string]string, len(body.MetaData))
	for key, val := range body.MetaData {
		tk := key
		tv := val
		v.MetaData[tk] = tv
	}

	return v
}

// NewOrderByHashNotFound builds a RelayerAPI service orderByHash endpoint
// not_found error.
func NewOrderByHashNotFound(body *OrderByHashNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderByHashRateLimit builds a RelayerAPI service orderByHash endpoint
// rate_limit error.
func NewOrderByHashRateLimit(body *OrderByHashRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderByHashInternal builds a RelayerAPI service orderByHash endpoint
// internal error.
func NewOrderByHashInternal(body *OrderByHashInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderByHashNotImplemented builds a RelayerAPI service orderByHash
// endpoint not_implemented error.
func NewOrderByHashNotImplemented(body *OrderByHashNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderByHashValidationError builds a RelayerAPI service orderByHash
// endpoint validation_error error.
func NewOrderByHashValidationError(body *OrderByHashValidationErrorResponseBody) *relayerapi.SRAValidationErrorResponse {
	v := &relayerapi.SRAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayerapi.SRAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(val)
		}
	}

	return v
}

// NewOrderbookResultOK builds a "RelayerAPI" service "orderbook" endpoint
// result from a HTTP "OK" response.
func NewOrderbookResultOK(body *OrderbookResponseBody) *relayerapi.OrderbookResult {
	v := &relayerapi.OrderbookResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}
	if body.Bids != nil {
		v.Bids = unmarshalSRAPaginatedOrderRecordsResponseBodyToRelayerapiSRAPaginatedOrderRecords(body.Bids)
	}
	if body.Asks != nil {
		v.Asks = unmarshalSRAPaginatedOrderRecordsResponseBodyToRelayerapiSRAPaginatedOrderRecords(body.Asks)
	}

	return v
}

// NewOrderbookNotFound builds a RelayerAPI service orderbook endpoint
// not_found error.
func NewOrderbookNotFound(body *OrderbookNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderbookRateLimit builds a RelayerAPI service orderbook endpoint
// rate_limit error.
func NewOrderbookRateLimit(body *OrderbookRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderbookInternal builds a RelayerAPI service orderbook endpoint internal
// error.
func NewOrderbookInternal(body *OrderbookInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderbookNotImplemented builds a RelayerAPI service orderbook endpoint
// not_implemented error.
func NewOrderbookNotImplemented(body *OrderbookNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderbookValidationError builds a RelayerAPI service orderbook endpoint
// validation_error error.
func NewOrderbookValidationError(body *OrderbookValidationErrorResponseBody) *relayerapi.SRAValidationErrorResponse {
	v := &relayerapi.SRAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayerapi.SRAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(val)
		}
	}

	return v
}

// NewOrderConfigResultCreated builds a "RelayerAPI" service "orderConfig"
// endpoint result from a HTTP "Created" response.
func NewOrderConfigResultCreated(body *OrderConfigResponseBody) *relayerapi.OrderConfigResult {
	v := &relayerapi.OrderConfigResult{
		RLimitLimit:         body.RLimitLimit,
		RLimitRemaining:     body.RLimitRemaining,
		RLimitReset:         body.RLimitReset,
		SenderAddress:       *body.SenderAddress,
		FeeRecipientAddress: *body.FeeRecipientAddress,
		MakerFee:            *body.MakerFee,
		TakerFee:            *body.TakerFee,
		MakerFeeAssetData:   *body.MakerFeeAssetData,
		TakerFeeAssetData:   *body.TakerFeeAssetData,
	}

	return v
}

// NewOrderConfigNotFound builds a RelayerAPI service orderConfig endpoint
// not_found error.
func NewOrderConfigNotFound(body *OrderConfigNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderConfigRateLimit builds a RelayerAPI service orderConfig endpoint
// rate_limit error.
func NewOrderConfigRateLimit(body *OrderConfigRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderConfigInternal builds a RelayerAPI service orderConfig endpoint
// internal error.
func NewOrderConfigInternal(body *OrderConfigInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderConfigNotImplemented builds a RelayerAPI service orderConfig
// endpoint not_implemented error.
func NewOrderConfigNotImplemented(body *OrderConfigNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewOrderConfigValidationError builds a RelayerAPI service orderConfig
// endpoint validation_error error.
func NewOrderConfigValidationError(body *OrderConfigValidationErrorResponseBody) *relayerapi.SRAValidationErrorResponse {
	v := &relayerapi.SRAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayerapi.SRAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(val)
		}
	}

	return v
}

// NewFeeRecipientsResultOK builds a "RelayerAPI" service "feeRecipients"
// endpoint result from a HTTP "OK" response.
func NewFeeRecipientsResultOK(body *FeeRecipientsResponseBody) *relayerapi.FeeRecipientsResult {
	v := &relayerapi.FeeRecipientsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}
	if body.List != nil {
		v.List = make([]string, len(body.List))
		for i, val := range body.List {
			v.List[i] = val
		}
	}

	return v
}

// NewFeeRecipientsNotFound builds a RelayerAPI service feeRecipients endpoint
// not_found error.
func NewFeeRecipientsNotFound(body *FeeRecipientsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFeeRecipientsRateLimit builds a RelayerAPI service feeRecipients endpoint
// rate_limit error.
func NewFeeRecipientsRateLimit(body *FeeRecipientsRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFeeRecipientsInternal builds a RelayerAPI service feeRecipients endpoint
// internal error.
func NewFeeRecipientsInternal(body *FeeRecipientsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFeeRecipientsNotImplemented builds a RelayerAPI service feeRecipients
// endpoint not_implemented error.
func NewFeeRecipientsNotImplemented(body *FeeRecipientsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFeeRecipientsValidationError builds a RelayerAPI service feeRecipients
// endpoint validation_error error.
func NewFeeRecipientsValidationError(body *FeeRecipientsValidationErrorResponseBody) *relayerapi.SRAValidationErrorResponse {
	v := &relayerapi.SRAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayerapi.SRAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(val)
		}
	}

	return v
}

// NewPostOrderResultCreated builds a "RelayerAPI" service "postOrder" endpoint
// result from a HTTP "Created" response.
func NewPostOrderResultCreated(body *PostOrderResponseBody) *relayerapi.PostOrderResult {
	v := &relayerapi.PostOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}

	return v
}

// NewPostOrderNotFound builds a RelayerAPI service postOrder endpoint
// not_found error.
func NewPostOrderNotFound(body *PostOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderRateLimit builds a RelayerAPI service postOrder endpoint
// rate_limit error.
func NewPostOrderRateLimit(body *PostOrderRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderInternal builds a RelayerAPI service postOrder endpoint internal
// error.
func NewPostOrderInternal(body *PostOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderNotImplemented builds a RelayerAPI service postOrder endpoint
// not_implemented error.
func NewPostOrderNotImplemented(body *PostOrderNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPostOrderValidationError builds a RelayerAPI service postOrder endpoint
// validation_error error.
func NewPostOrderValidationError(body *PostOrderValidationErrorResponseBody) *relayerapi.SRAValidationErrorResponse {
	v := &relayerapi.SRAValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayerapi.SRAValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalSRAValidationErrorResponseBodyToRelayerapiSRAValidationError(val)
		}
	}

	return v
}

// ValidateAssetPairsResponseBody runs the validations defined on
// AssetPairsResponseBody
func ValidateAssetPairsResponseBody(body *AssetPairsResponseBody) (err error) {
	if body.Records == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("records", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		if e != nil {
			if err2 := ValidateAssetPairRecordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrdersResponseBody runs the validations defined on OrdersResponseBody
func ValidateOrdersResponseBody(body *OrdersResponseBody) (err error) {
	if body.Records == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("records", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		if e != nil {
			if err2 := ValidateOrderRecordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderByHashResponseBody runs the validations defined on
// OrderByHashResponseBody
func ValidateOrderByHashResponseBody(body *OrderByHashResponseBody) (err error) {
	if body.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "body"))
	}
	if body.MetaData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("metaData", "body"))
	}
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderbookResponseBody runs the validations defined on
// OrderbookResponseBody
func ValidateOrderbookResponseBody(body *OrderbookResponseBody) (err error) {
	if body.Bids != nil {
		if err2 := ValidateSRAPaginatedOrderRecordsResponseBody(body.Bids); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Asks != nil {
		if err2 := ValidateSRAPaginatedOrderRecordsResponseBody(body.Asks); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderConfigResponseBody runs the validations defined on
// OrderConfigResponseBody
func ValidateOrderConfigResponseBody(body *OrderConfigResponseBody) (err error) {
	if body.SenderAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("senderAddress", "body"))
	}
	if body.FeeRecipientAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feeRecipientAddress", "body"))
	}
	if body.MakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFee", "body"))
	}
	if body.TakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFee", "body"))
	}
	if body.MakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFeeAssetData", "body"))
	}
	if body.TakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFeeAssetData", "body"))
	}
	if body.SenderAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", *body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, true))
		}
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, false))
		}
	}
	if body.FeeRecipientAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", *body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, true))
		}
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, false))
		}
	}
	if body.MakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", *body.MakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerFee != nil {
		if utf8.RuneCountInString(*body.MakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", *body.MakerFee, utf8.RuneCountInString(*body.MakerFee), 100, false))
		}
	}
	if body.TakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", *body.TakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerFee != nil {
		if utf8.RuneCountInString(*body.TakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", *body.TakerFee, utf8.RuneCountInString(*body.TakerFee), 100, false))
		}
	}
	if body.MakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", *body.MakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, true))
		}
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, false))
		}
	}
	if body.TakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", *body.TakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, true))
		}
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, false))
		}
	}
	return
}

// ValidateFeeRecipientsResponseBody runs the validations defined on
// FeeRecipientsResponseBody
func ValidateFeeRecipientsResponseBody(body *FeeRecipientsResponseBody) (err error) {
	for _, e := range body.List {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.list[*]", e, "^0x[0-9a-fA-F]{40}$"))
		if utf8.RuneCountInString(e) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.list[*]", e, utf8.RuneCountInString(e), 42, true))
		}
		if utf8.RuneCountInString(e) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.list[*]", e, utf8.RuneCountInString(e), 42, false))
		}
	}
	return
}

// ValidateAssetPairsNotFoundResponseBody runs the validations defined on
// assetPairs_not_found_response_body
func ValidateAssetPairsNotFoundResponseBody(body *AssetPairsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsRateLimitResponseBody runs the validations defined on
// assetPairs_rate_limit_response_body
func ValidateAssetPairsRateLimitResponseBody(body *AssetPairsRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsInternalResponseBody runs the validations defined on
// assetPairs_internal_response_body
func ValidateAssetPairsInternalResponseBody(body *AssetPairsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsNotImplementedResponseBody runs the validations defined on
// assetPairs_not_implemented_response_body
func ValidateAssetPairsNotImplementedResponseBody(body *AssetPairsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsValidationErrorResponseBody runs the validations defined
// on assetPairs_validation_error_response_body
func ValidateAssetPairsValidationErrorResponseBody(body *AssetPairsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSRAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrdersNotFoundResponseBody runs the validations defined on
// orders_not_found_response_body
func ValidateOrdersNotFoundResponseBody(body *OrdersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersRateLimitResponseBody runs the validations defined on
// orders_rate_limit_response_body
func ValidateOrdersRateLimitResponseBody(body *OrdersRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersInternalResponseBody runs the validations defined on
// orders_internal_response_body
func ValidateOrdersInternalResponseBody(body *OrdersInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersNotImplementedResponseBody runs the validations defined on
// orders_not_implemented_response_body
func ValidateOrdersNotImplementedResponseBody(body *OrdersNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersValidationErrorResponseBody runs the validations defined on
// orders_validation_error_response_body
func ValidateOrdersValidationErrorResponseBody(body *OrdersValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSRAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderByHashNotFoundResponseBody runs the validations defined on
// orderByHash_not_found_response_body
func ValidateOrderByHashNotFoundResponseBody(body *OrderByHashNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashRateLimitResponseBody runs the validations defined on
// orderByHash_rate_limit_response_body
func ValidateOrderByHashRateLimitResponseBody(body *OrderByHashRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashInternalResponseBody runs the validations defined on
// orderByHash_internal_response_body
func ValidateOrderByHashInternalResponseBody(body *OrderByHashInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashNotImplementedResponseBody runs the validations defined
// on orderByHash_not_implemented_response_body
func ValidateOrderByHashNotImplementedResponseBody(body *OrderByHashNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashValidationErrorResponseBody runs the validations defined
// on orderByHash_validation_error_response_body
func ValidateOrderByHashValidationErrorResponseBody(body *OrderByHashValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSRAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderbookNotFoundResponseBody runs the validations defined on
// orderbook_not_found_response_body
func ValidateOrderbookNotFoundResponseBody(body *OrderbookNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookRateLimitResponseBody runs the validations defined on
// orderbook_rate_limit_response_body
func ValidateOrderbookRateLimitResponseBody(body *OrderbookRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookInternalResponseBody runs the validations defined on
// orderbook_internal_response_body
func ValidateOrderbookInternalResponseBody(body *OrderbookInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookNotImplementedResponseBody runs the validations defined on
// orderbook_not_implemented_response_body
func ValidateOrderbookNotImplementedResponseBody(body *OrderbookNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookValidationErrorResponseBody runs the validations defined on
// orderbook_validation_error_response_body
func ValidateOrderbookValidationErrorResponseBody(body *OrderbookValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSRAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderConfigNotFoundResponseBody runs the validations defined on
// orderConfig_not_found_response_body
func ValidateOrderConfigNotFoundResponseBody(body *OrderConfigNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigRateLimitResponseBody runs the validations defined on
// orderConfig_rate_limit_response_body
func ValidateOrderConfigRateLimitResponseBody(body *OrderConfigRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigInternalResponseBody runs the validations defined on
// orderConfig_internal_response_body
func ValidateOrderConfigInternalResponseBody(body *OrderConfigInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigNotImplementedResponseBody runs the validations defined
// on orderConfig_not_implemented_response_body
func ValidateOrderConfigNotImplementedResponseBody(body *OrderConfigNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigValidationErrorResponseBody runs the validations defined
// on orderConfig_validation_error_response_body
func ValidateOrderConfigValidationErrorResponseBody(body *OrderConfigValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSRAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFeeRecipientsNotFoundResponseBody runs the validations defined on
// feeRecipients_not_found_response_body
func ValidateFeeRecipientsNotFoundResponseBody(body *FeeRecipientsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsRateLimitResponseBody runs the validations defined on
// feeRecipients_rate_limit_response_body
func ValidateFeeRecipientsRateLimitResponseBody(body *FeeRecipientsRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsInternalResponseBody runs the validations defined on
// feeRecipients_internal_response_body
func ValidateFeeRecipientsInternalResponseBody(body *FeeRecipientsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsNotImplementedResponseBody runs the validations defined
// on feeRecipients_not_implemented_response_body
func ValidateFeeRecipientsNotImplementedResponseBody(body *FeeRecipientsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsValidationErrorResponseBody runs the validations
// defined on feeRecipients_validation_error_response_body
func ValidateFeeRecipientsValidationErrorResponseBody(body *FeeRecipientsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSRAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePostOrderNotFoundResponseBody runs the validations defined on
// postOrder_not_found_response_body
func ValidatePostOrderNotFoundResponseBody(body *PostOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderRateLimitResponseBody runs the validations defined on
// postOrder_rate_limit_response_body
func ValidatePostOrderRateLimitResponseBody(body *PostOrderRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderInternalResponseBody runs the validations defined on
// postOrder_internal_response_body
func ValidatePostOrderInternalResponseBody(body *PostOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderNotImplementedResponseBody runs the validations defined on
// postOrder_not_implemented_response_body
func ValidatePostOrderNotImplementedResponseBody(body *PostOrderNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderValidationErrorResponseBody runs the validations defined on
// postOrder_validation_error_response_body
func ValidatePostOrderValidationErrorResponseBody(body *PostOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateSRAValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAssetPairRecordResponseBody runs the validations defined on
// AssetPairRecordResponseBody
func ValidateAssetPairRecordResponseBody(body *AssetPairRecordResponseBody) (err error) {
	if body.AssetDataA == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetDataA", "body"))
	}
	if body.AssetDataB == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetDataB", "body"))
	}
	if body.AssetDataA != nil {
		if err2 := ValidateAssetRecordResponseBody(body.AssetDataA); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.AssetDataB != nil {
		if err2 := ValidateAssetRecordResponseBody(body.AssetDataB); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAssetRecordResponseBody runs the validations defined on
// AssetRecordResponseBody
func ValidateAssetRecordResponseBody(body *AssetRecordResponseBody) (err error) {
	if body.AssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetData", "body"))
	}
	if body.MinAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("minAmount", "body"))
	}
	if body.MaxAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("maxAmount", "body"))
	}
	if body.Precision == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("precision", "body"))
	}
	if body.AssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.assetData", *body.AssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.AssetData != nil {
		if utf8.RuneCountInString(*body.AssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.assetData", *body.AssetData, utf8.RuneCountInString(*body.AssetData), 74, true))
		}
	}
	if body.AssetData != nil {
		if utf8.RuneCountInString(*body.AssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.assetData", *body.AssetData, utf8.RuneCountInString(*body.AssetData), 74, false))
		}
	}
	if body.MinAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.minAmount", *body.MinAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MinAmount != nil {
		if utf8.RuneCountInString(*body.MinAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.minAmount", *body.MinAmount, utf8.RuneCountInString(*body.MinAmount), 100, false))
		}
	}
	if body.MaxAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.maxAmount", *body.MaxAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MaxAmount != nil {
		if utf8.RuneCountInString(*body.MaxAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.maxAmount", *body.MaxAmount, utf8.RuneCountInString(*body.MaxAmount), 100, false))
		}
	}
	if body.Precision != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.precision", *body.Precision, "^\\d+(\\.\\d+)?$"))
	}
	if body.Precision != nil {
		if utf8.RuneCountInString(*body.Precision) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.precision", *body.Precision, utf8.RuneCountInString(*body.Precision), 100, false))
		}
	}
	return
}

// ValidateSRAValidationErrorResponseBody runs the validations defined on
// SRAValidationErrorResponseBody
func ValidateSRAValidationErrorResponseBody(body *SRAValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 1000 || *body.Code == 1001 || *body.Code == 1002 || *body.Code == 1003 || *body.Code == 1004 || *body.Code == 1005 || *body.Code == 1006) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{1000, 1001, 1002, 1003, 1004, 1005, 1006}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Required field" || *body.Reason == "Incorrect format" || *body.Reason == "Invalid address" || *body.Reason == "Address not supported" || *body.Reason == "Value out of range" || *body.Reason == "Invalid signature or hash" || *body.Reason == "Unsupported option") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Required field", "Incorrect format", "Invalid address", "Address not supported", "Value out of range", "Invalid signature or hash", "Unsupported option"}))
		}
	}
	return
}

// ValidateOrderRecordResponseBody runs the validations defined on
// OrderRecordResponseBody
func ValidateOrderRecordResponseBody(body *OrderRecordResponseBody) (err error) {
	if body.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "body"))
	}
	if body.MetaData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("metaData", "body"))
	}
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderResponseBody runs the validations defined on OrderResponseBody
func ValidateOrderResponseBody(body *OrderResponseBody) (err error) {
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	if body.ExchangeAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exchangeAddress", "body"))
	}
	if body.MakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAddress", "body"))
	}
	if body.TakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAddress", "body"))
	}
	if body.FeeRecipientAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feeRecipientAddress", "body"))
	}
	if body.SenderAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("senderAddress", "body"))
	}
	if body.MakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetAmount", "body"))
	}
	if body.TakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetAmount", "body"))
	}
	if body.MakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFee", "body"))
	}
	if body.TakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFee", "body"))
	}
	if body.ExpirationTimeSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expirationTimeSeconds", "body"))
	}
	if body.Salt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("salt", "body"))
	}
	if body.MakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetData", "body"))
	}
	if body.TakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetData", "body"))
	}
	if body.MakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFeeAssetData", "body"))
	}
	if body.TakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFeeAssetData", "body"))
	}
	if body.Signature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("signature", "body"))
	}
	if body.ChainID != nil {
		if !(*body.ChainID == 1 || *body.ChainID == 3 || *body.ChainID == 4 || *body.ChainID == 42 || *body.ChainID == 1337) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.chainId", *body.ChainID, []interface{}{1, 3, 4, 42, 1337}))
		}
	}
	if body.ExchangeAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.exchangeAddress", *body.ExchangeAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, true))
		}
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, false))
		}
	}
	if body.MakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAddress", *body.MakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, true))
		}
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, false))
		}
	}
	if body.TakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAddress", *body.TakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, true))
		}
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, false))
		}
	}
	if body.FeeRecipientAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", *body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, true))
		}
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, false))
		}
	}
	if body.SenderAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", *body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, true))
		}
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, false))
		}
	}
	if body.MakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetAmount", *body.MakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.MakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetAmount", *body.MakerAssetAmount, utf8.RuneCountInString(*body.MakerAssetAmount), 100, false))
		}
	}
	if body.TakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetAmount", *body.TakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.TakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetAmount", *body.TakerAssetAmount, utf8.RuneCountInString(*body.TakerAssetAmount), 100, false))
		}
	}
	if body.MakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", *body.MakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerFee != nil {
		if utf8.RuneCountInString(*body.MakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", *body.MakerFee, utf8.RuneCountInString(*body.MakerFee), 100, false))
		}
	}
	if body.TakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", *body.TakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerFee != nil {
		if utf8.RuneCountInString(*body.TakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", *body.TakerFee, utf8.RuneCountInString(*body.TakerFee), 100, false))
		}
	}
	if body.ExpirationTimeSeconds != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, "^\\d+(\\.\\d+)?$"))
	}
	if body.ExpirationTimeSeconds != nil {
		if utf8.RuneCountInString(*body.ExpirationTimeSeconds) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, utf8.RuneCountInString(*body.ExpirationTimeSeconds), 100, false))
		}
	}
	if body.Salt != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.salt", *body.Salt, "^\\d+(\\.\\d+)?$"))
	}
	if body.Salt != nil {
		if utf8.RuneCountInString(*body.Salt) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.salt", *body.Salt, utf8.RuneCountInString(*body.Salt), 100, false))
		}
	}
	if body.MakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", *body.MakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, true))
		}
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, false))
		}
	}
	if body.TakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", *body.TakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, true))
		}
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, false))
		}
	}
	if body.MakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", *body.MakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, true))
		}
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, false))
		}
	}
	if body.TakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", *body.TakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, true))
		}
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, false))
		}
	}
	if body.Signature != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.signature", *body.Signature, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	return
}

// ValidateSRAPaginatedOrderRecordsResponseBody runs the validations defined on
// SRAPaginatedOrderRecordsResponseBody
func ValidateSRAPaginatedOrderRecordsResponseBody(body *SRAPaginatedOrderRecordsResponseBody) (err error) {
	if body.Records == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("records", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		if e != nil {
			if err2 := ValidateOrderRecordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
