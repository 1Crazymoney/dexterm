// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RelayerAPI HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"unicode/utf8"

	relayerapi "github.com/InjectiveLabs/injective-core/api/gen/relayer_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAssetPairsResponse returns an encoder for responses returned by the
// RelayerAPI assetPairs endpoint.
func EncodeAssetPairsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*relayerapi.AssetPairsResult)
		enc := encoder(ctx, w)
		body := NewAssetPairsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAssetPairsRequest returns a decoder for requests sent to the
// RelayerAPI assetPairs endpoint.
func DecodeAssetPairsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			assetDataA *string
			assetDataB *string
			page       int
			perPage    int
			err        error
		)
		assetDataARaw := r.URL.Query().Get("assetDataA")
		if assetDataARaw != "" {
			assetDataA = &assetDataARaw
		}
		if assetDataA != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("assetDataA", *assetDataA, "^0x[0-9a-fA-F]{72}$"))
		}
		if assetDataA != nil {
			if utf8.RuneCountInString(*assetDataA) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("assetDataA", *assetDataA, utf8.RuneCountInString(*assetDataA), 74, true))
			}
		}
		if assetDataA != nil {
			if utf8.RuneCountInString(*assetDataA) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("assetDataA", *assetDataA, utf8.RuneCountInString(*assetDataA), 74, false))
			}
		}
		assetDataBRaw := r.URL.Query().Get("assetDataB")
		if assetDataBRaw != "" {
			assetDataB = &assetDataBRaw
		}
		if assetDataB != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("assetDataB", *assetDataB, "^0x[0-9a-fA-F]{72}$"))
		}
		if assetDataB != nil {
			if utf8.RuneCountInString(*assetDataB) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("assetDataB", *assetDataB, utf8.RuneCountInString(*assetDataB), 74, true))
			}
		}
		if assetDataB != nil {
			if utf8.RuneCountInString(*assetDataB) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("assetDataB", *assetDataB, utf8.RuneCountInString(*assetDataB), 74, false))
			}
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		{
			perPageRaw := r.URL.Query().Get("perPage")
			if perPageRaw == "" {
				perPage = 100
			} else {
				v, err2 := strconv.ParseInt(perPageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("perPage", perPageRaw, "integer"))
				}
				perPage = int(v)
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewAssetPairsPayload(assetDataA, assetDataB, page, perPage)

		return payload, nil
	}
}

// EncodeAssetPairsError returns an encoder for errors returned by the
// assetPairs RelayerAPI endpoint.
func EncodeAssetPairsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAssetPairsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAssetPairsRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAssetPairsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAssetPairsNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAssetPairsValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeOrdersResponse returns an encoder for responses returned by the
// RelayerAPI orders endpoint.
func EncodeOrdersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*relayerapi.OrdersResult)
		enc := encoder(ctx, w)
		body := NewOrdersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeOrdersRequest returns a decoder for requests sent to the RelayerAPI
// orders endpoint.
func DecodeOrdersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page                int
			perPage             int
			makerAssetProxyID   *string
			takerAssetProxyID   *string
			makerAssetAddress   *string
			takerAssetAddress   *string
			exchangeAddress     *string
			senderAddress       *string
			makerAssetData      *string
			takerAssetData      *string
			traderAssetData     *string
			makerAddress        *string
			takerAddress        *string
			makerFeeAssetData   *string
			takerFeeAssetData   *string
			traderAddress       *string
			feeRecipientAddress *string
			err                 error
		)
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		{
			perPageRaw := r.URL.Query().Get("perPage")
			if perPageRaw == "" {
				perPage = 100
			} else {
				v, err2 := strconv.ParseInt(perPageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("perPage", perPageRaw, "integer"))
				}
				perPage = int(v)
			}
		}
		makerAssetProxyIDRaw := r.URL.Query().Get("makerAssetProxyId")
		if makerAssetProxyIDRaw != "" {
			makerAssetProxyID = &makerAssetProxyIDRaw
		}
		if makerAssetProxyID != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("makerAssetProxyID", *makerAssetProxyID, "^0x[0-9a-fA-F]{8}$"))
		}
		if makerAssetProxyID != nil {
			if utf8.RuneCountInString(*makerAssetProxyID) < 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetProxyID", *makerAssetProxyID, utf8.RuneCountInString(*makerAssetProxyID), 10, true))
			}
		}
		if makerAssetProxyID != nil {
			if utf8.RuneCountInString(*makerAssetProxyID) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetProxyID", *makerAssetProxyID, utf8.RuneCountInString(*makerAssetProxyID), 10, false))
			}
		}
		takerAssetProxyIDRaw := r.URL.Query().Get("takerAssetProxyId")
		if takerAssetProxyIDRaw != "" {
			takerAssetProxyID = &takerAssetProxyIDRaw
		}
		if takerAssetProxyID != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("takerAssetProxyID", *takerAssetProxyID, "^0x[0-9a-fA-F]{8}$"))
		}
		if takerAssetProxyID != nil {
			if utf8.RuneCountInString(*takerAssetProxyID) < 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetProxyID", *takerAssetProxyID, utf8.RuneCountInString(*takerAssetProxyID), 10, true))
			}
		}
		if takerAssetProxyID != nil {
			if utf8.RuneCountInString(*takerAssetProxyID) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetProxyID", *takerAssetProxyID, utf8.RuneCountInString(*takerAssetProxyID), 10, false))
			}
		}
		makerAssetAddressRaw := r.URL.Query().Get("makerAssetAddress")
		if makerAssetAddressRaw != "" {
			makerAssetAddress = &makerAssetAddressRaw
		}
		if makerAssetAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("makerAssetAddress", *makerAssetAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if makerAssetAddress != nil {
			if utf8.RuneCountInString(*makerAssetAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetAddress", *makerAssetAddress, utf8.RuneCountInString(*makerAssetAddress), 42, true))
			}
		}
		if makerAssetAddress != nil {
			if utf8.RuneCountInString(*makerAssetAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetAddress", *makerAssetAddress, utf8.RuneCountInString(*makerAssetAddress), 42, false))
			}
		}
		takerAssetAddressRaw := r.URL.Query().Get("takerAssetAddress")
		if takerAssetAddressRaw != "" {
			takerAssetAddress = &takerAssetAddressRaw
		}
		if takerAssetAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("takerAssetAddress", *takerAssetAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if takerAssetAddress != nil {
			if utf8.RuneCountInString(*takerAssetAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetAddress", *takerAssetAddress, utf8.RuneCountInString(*takerAssetAddress), 42, true))
			}
		}
		if takerAssetAddress != nil {
			if utf8.RuneCountInString(*takerAssetAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetAddress", *takerAssetAddress, utf8.RuneCountInString(*takerAssetAddress), 42, false))
			}
		}
		exchangeAddressRaw := r.URL.Query().Get("exchangeAddress")
		if exchangeAddressRaw != "" {
			exchangeAddress = &exchangeAddressRaw
		}
		if exchangeAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("exchangeAddress", *exchangeAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if exchangeAddress != nil {
			if utf8.RuneCountInString(*exchangeAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("exchangeAddress", *exchangeAddress, utf8.RuneCountInString(*exchangeAddress), 42, true))
			}
		}
		if exchangeAddress != nil {
			if utf8.RuneCountInString(*exchangeAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("exchangeAddress", *exchangeAddress, utf8.RuneCountInString(*exchangeAddress), 42, false))
			}
		}
		senderAddressRaw := r.URL.Query().Get("senderAddress")
		if senderAddressRaw != "" {
			senderAddress = &senderAddressRaw
		}
		if senderAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("senderAddress", *senderAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if senderAddress != nil {
			if utf8.RuneCountInString(*senderAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("senderAddress", *senderAddress, utf8.RuneCountInString(*senderAddress), 42, true))
			}
		}
		if senderAddress != nil {
			if utf8.RuneCountInString(*senderAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("senderAddress", *senderAddress, utf8.RuneCountInString(*senderAddress), 42, false))
			}
		}
		makerAssetDataRaw := r.URL.Query().Get("makerAssetData")
		if makerAssetDataRaw != "" {
			makerAssetData = &makerAssetDataRaw
		}
		if makerAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("makerAssetData", *makerAssetData, "^0x[0-9a-fA-F]{72}$"))
		}
		if makerAssetData != nil {
			if utf8.RuneCountInString(*makerAssetData) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetData", *makerAssetData, utf8.RuneCountInString(*makerAssetData), 74, true))
			}
		}
		if makerAssetData != nil {
			if utf8.RuneCountInString(*makerAssetData) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetData", *makerAssetData, utf8.RuneCountInString(*makerAssetData), 74, false))
			}
		}
		takerAssetDataRaw := r.URL.Query().Get("takerAssetData")
		if takerAssetDataRaw != "" {
			takerAssetData = &takerAssetDataRaw
		}
		if takerAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("takerAssetData", *takerAssetData, "^0x[0-9a-fA-F]{72}$"))
		}
		if takerAssetData != nil {
			if utf8.RuneCountInString(*takerAssetData) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetData", *takerAssetData, utf8.RuneCountInString(*takerAssetData), 74, true))
			}
		}
		if takerAssetData != nil {
			if utf8.RuneCountInString(*takerAssetData) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetData", *takerAssetData, utf8.RuneCountInString(*takerAssetData), 74, false))
			}
		}
		traderAssetDataRaw := r.URL.Query().Get("traderAssetData")
		if traderAssetDataRaw != "" {
			traderAssetData = &traderAssetDataRaw
		}
		if traderAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("traderAssetData", *traderAssetData, "^0x[0-9a-fA-F]{72}$"))
		}
		if traderAssetData != nil {
			if utf8.RuneCountInString(*traderAssetData) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("traderAssetData", *traderAssetData, utf8.RuneCountInString(*traderAssetData), 74, true))
			}
		}
		if traderAssetData != nil {
			if utf8.RuneCountInString(*traderAssetData) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("traderAssetData", *traderAssetData, utf8.RuneCountInString(*traderAssetData), 74, false))
			}
		}
		makerAddressRaw := r.URL.Query().Get("makerAddress")
		if makerAddressRaw != "" {
			makerAddress = &makerAddressRaw
		}
		if makerAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("makerAddress", *makerAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if makerAddress != nil {
			if utf8.RuneCountInString(*makerAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAddress", *makerAddress, utf8.RuneCountInString(*makerAddress), 42, true))
			}
		}
		if makerAddress != nil {
			if utf8.RuneCountInString(*makerAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAddress", *makerAddress, utf8.RuneCountInString(*makerAddress), 42, false))
			}
		}
		takerAddressRaw := r.URL.Query().Get("takerAddress")
		if takerAddressRaw != "" {
			takerAddress = &takerAddressRaw
		}
		if takerAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("takerAddress", *takerAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if takerAddress != nil {
			if utf8.RuneCountInString(*takerAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAddress", *takerAddress, utf8.RuneCountInString(*takerAddress), 42, true))
			}
		}
		if takerAddress != nil {
			if utf8.RuneCountInString(*takerAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAddress", *takerAddress, utf8.RuneCountInString(*takerAddress), 42, false))
			}
		}
		makerFeeAssetDataRaw := r.URL.Query().Get("makerFeeAssetData")
		if makerFeeAssetDataRaw != "" {
			makerFeeAssetData = &makerFeeAssetDataRaw
		}
		if makerFeeAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("makerFeeAssetData", *makerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
		}
		if makerFeeAssetData != nil {
			if utf8.RuneCountInString(*makerFeeAssetData) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerFeeAssetData", *makerFeeAssetData, utf8.RuneCountInString(*makerFeeAssetData), 74, true))
			}
		}
		if makerFeeAssetData != nil {
			if utf8.RuneCountInString(*makerFeeAssetData) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerFeeAssetData", *makerFeeAssetData, utf8.RuneCountInString(*makerFeeAssetData), 74, false))
			}
		}
		takerFeeAssetDataRaw := r.URL.Query().Get("takerFeeAssetData")
		if takerFeeAssetDataRaw != "" {
			takerFeeAssetData = &takerFeeAssetDataRaw
		}
		if takerFeeAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("takerFeeAssetData", *takerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
		}
		if takerFeeAssetData != nil {
			if utf8.RuneCountInString(*takerFeeAssetData) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerFeeAssetData", *takerFeeAssetData, utf8.RuneCountInString(*takerFeeAssetData), 74, true))
			}
		}
		if takerFeeAssetData != nil {
			if utf8.RuneCountInString(*takerFeeAssetData) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerFeeAssetData", *takerFeeAssetData, utf8.RuneCountInString(*takerFeeAssetData), 74, false))
			}
		}
		traderAddressRaw := r.URL.Query().Get("traderAddress")
		if traderAddressRaw != "" {
			traderAddress = &traderAddressRaw
		}
		if traderAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("traderAddress", *traderAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if traderAddress != nil {
			if utf8.RuneCountInString(*traderAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("traderAddress", *traderAddress, utf8.RuneCountInString(*traderAddress), 42, true))
			}
		}
		if traderAddress != nil {
			if utf8.RuneCountInString(*traderAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("traderAddress", *traderAddress, utf8.RuneCountInString(*traderAddress), 42, false))
			}
		}
		feeRecipientAddressRaw := r.URL.Query().Get("feeRecipientAddress")
		if feeRecipientAddressRaw != "" {
			feeRecipientAddress = &feeRecipientAddressRaw
		}
		if feeRecipientAddress != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("feeRecipientAddress", *feeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
		}
		if feeRecipientAddress != nil {
			if utf8.RuneCountInString(*feeRecipientAddress) < 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("feeRecipientAddress", *feeRecipientAddress, utf8.RuneCountInString(*feeRecipientAddress), 42, true))
			}
		}
		if feeRecipientAddress != nil {
			if utf8.RuneCountInString(*feeRecipientAddress) > 42 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("feeRecipientAddress", *feeRecipientAddress, utf8.RuneCountInString(*feeRecipientAddress), 42, false))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewOrdersPayload(page, perPage, makerAssetProxyID, takerAssetProxyID, makerAssetAddress, takerAssetAddress, exchangeAddress, senderAddress, makerAssetData, takerAssetData, traderAssetData, makerAddress, takerAddress, makerFeeAssetData, takerFeeAssetData, traderAddress, feeRecipientAddress)

		return payload, nil
	}
}

// EncodeOrdersError returns an encoder for errors returned by the orders
// RelayerAPI endpoint.
func EncodeOrdersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeOrderByHashResponse returns an encoder for responses returned by the
// RelayerAPI orderByHash endpoint.
func EncodeOrderByHashResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*relayerapi.OrderByHashResult)
		enc := encoder(ctx, w)
		body := NewOrderByHashResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeOrderByHashRequest returns a decoder for requests sent to the
// RelayerAPI orderByHash endpoint.
func DecodeOrderByHashRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orderHash string
			err       error

			params = mux.Vars(r)
		)
		orderHash = params["orderHash"]
		err = goa.MergeErrors(err, goa.ValidatePattern("orderHash", orderHash, "^0x[0-9a-fA-F]{64}$"))
		if utf8.RuneCountInString(orderHash) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orderHash", orderHash, utf8.RuneCountInString(orderHash), 66, true))
		}
		if utf8.RuneCountInString(orderHash) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orderHash", orderHash, utf8.RuneCountInString(orderHash), 66, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewOrderByHashPayload(orderHash)

		return payload, nil
	}
}

// EncodeOrderByHashError returns an encoder for errors returned by the
// orderByHash RelayerAPI endpoint.
func EncodeOrderByHashError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderByHashNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderByHashRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderByHashInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderByHashNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderByHashValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeOrderbookResponse returns an encoder for responses returned by the
// RelayerAPI orderbook endpoint.
func EncodeOrderbookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*relayerapi.OrderbookResult)
		enc := encoder(ctx, w)
		body := NewOrderbookResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeOrderbookRequest returns a decoder for requests sent to the RelayerAPI
// orderbook endpoint.
func DecodeOrderbookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page           int
			perPage        int
			baseAssetData  string
			quoteAssetData string
			err            error
		)
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		{
			perPageRaw := r.URL.Query().Get("perPage")
			if perPageRaw == "" {
				perPage = 100
			} else {
				v, err2 := strconv.ParseInt(perPageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("perPage", perPageRaw, "integer"))
				}
				perPage = int(v)
			}
		}
		baseAssetData = r.URL.Query().Get("baseAssetData")
		if baseAssetData == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("baseAssetData", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("baseAssetData", baseAssetData, "^0x[0-9a-fA-F]{72}$"))
		if utf8.RuneCountInString(baseAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("baseAssetData", baseAssetData, utf8.RuneCountInString(baseAssetData), 74, true))
		}
		if utf8.RuneCountInString(baseAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("baseAssetData", baseAssetData, utf8.RuneCountInString(baseAssetData), 74, false))
		}
		quoteAssetData = r.URL.Query().Get("quoteAssetData")
		if quoteAssetData == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("quoteAssetData", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("quoteAssetData", quoteAssetData, "^0x[0-9a-fA-F]{72}$"))
		if utf8.RuneCountInString(quoteAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("quoteAssetData", quoteAssetData, utf8.RuneCountInString(quoteAssetData), 74, true))
		}
		if utf8.RuneCountInString(quoteAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("quoteAssetData", quoteAssetData, utf8.RuneCountInString(quoteAssetData), 74, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewOrderbookPayload(page, perPage, baseAssetData, quoteAssetData)

		return payload, nil
	}
}

// EncodeOrderbookError returns an encoder for errors returned by the orderbook
// RelayerAPI endpoint.
func EncodeOrderbookError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderbookNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderbookRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderbookInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderbookNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderbookValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeOrderConfigResponse returns an encoder for responses returned by the
// RelayerAPI orderConfig endpoint.
func EncodeOrderConfigResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*relayerapi.OrderConfigResult)
		enc := encoder(ctx, w)
		body := NewOrderConfigResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeOrderConfigRequest returns a decoder for requests sent to the
// RelayerAPI orderConfig endpoint.
func DecodeOrderConfigRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body OrderConfigRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateOrderConfigRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewOrderConfigPayload(&body)

		return payload, nil
	}
}

// EncodeOrderConfigError returns an encoder for errors returned by the
// orderConfig RelayerAPI endpoint.
func EncodeOrderConfigError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderConfigNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderConfigRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderConfigInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderConfigNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrderConfigValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeFeeRecipientsResponse returns an encoder for responses returned by the
// RelayerAPI feeRecipients endpoint.
func EncodeFeeRecipientsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*relayerapi.FeeRecipientsResult)
		enc := encoder(ctx, w)
		body := NewFeeRecipientsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFeeRecipientsRequest returns a decoder for requests sent to the
// RelayerAPI feeRecipients endpoint.
func DecodeFeeRecipientsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		payload := NewFeeRecipientsSRARequest()

		return payload, nil
	}
}

// EncodeFeeRecipientsError returns an encoder for errors returned by the
// feeRecipients RelayerAPI endpoint.
func EncodeFeeRecipientsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFeeRecipientsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFeeRecipientsRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFeeRecipientsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFeeRecipientsNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFeeRecipientsValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePostOrderResponse returns an encoder for responses returned by the
// RelayerAPI postOrder endpoint.
func EncodePostOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*relayerapi.PostOrderResult)
		enc := encoder(ctx, w)
		body := NewPostOrderResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodePostOrderRequest returns a decoder for requests sent to the RelayerAPI
// postOrder endpoint.
func DecodePostOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PostOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePostOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPostOrderPayload(&body)

		return payload, nil
	}
}

// EncodePostOrderError returns an encoder for errors returned by the postOrder
// RelayerAPI endpoint.
func EncodePostOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostOrderValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalRelayerapiAssetPairRecordToAssetPairRecordResponseBody builds a value
// of type *AssetPairRecordResponseBody from a value of type
// *relayerapi.AssetPairRecord.
func marshalRelayerapiAssetPairRecordToAssetPairRecordResponseBody(v *relayerapi.AssetPairRecord) *AssetPairRecordResponseBody {
	res := &AssetPairRecordResponseBody{}
	if v.AssetDataA != nil {
		res.AssetDataA = marshalRelayerapiAssetRecordToAssetRecordResponseBody(v.AssetDataA)
	}
	if v.AssetDataB != nil {
		res.AssetDataB = marshalRelayerapiAssetRecordToAssetRecordResponseBody(v.AssetDataB)
	}

	return res
}

// marshalRelayerapiAssetRecordToAssetRecordResponseBody builds a value of type
// *AssetRecordResponseBody from a value of type *relayerapi.AssetRecord.
func marshalRelayerapiAssetRecordToAssetRecordResponseBody(v *relayerapi.AssetRecord) *AssetRecordResponseBody {
	res := &AssetRecordResponseBody{
		AssetData: v.AssetData,
		MinAmount: v.MinAmount,
		MaxAmount: v.MaxAmount,
		Precision: v.Precision,
	}

	return res
}

// marshalRelayerapiSRAValidationErrorToSRAValidationErrorResponseBody builds a
// value of type *SRAValidationErrorResponseBody from a value of type
// *relayerapi.SRAValidationError.
func marshalRelayerapiSRAValidationErrorToSRAValidationErrorResponseBody(v *relayerapi.SRAValidationError) *SRAValidationErrorResponseBody {
	if v == nil {
		return nil
	}
	res := &SRAValidationErrorResponseBody{
		Code:   v.Code,
		Reason: v.Reason,
		Field:  v.Field,
	}

	return res
}

// marshalRelayerapiOrderRecordToOrderRecordResponseBody builds a value of type
// *OrderRecordResponseBody from a value of type *relayerapi.OrderRecord.
func marshalRelayerapiOrderRecordToOrderRecordResponseBody(v *relayerapi.OrderRecord) *OrderRecordResponseBody {
	res := &OrderRecordResponseBody{}
	if v.Order != nil {
		res.Order = marshalRelayerapiOrderToOrderResponseBody(v.Order)
	}
	if v.MetaData != nil {
		res.MetaData = make(map[string]string, len(v.MetaData))
		for key, val := range v.MetaData {
			tk := key
			tv := val
			res.MetaData[tk] = tv
		}
	}

	return res
}

// marshalRelayerapiOrderToOrderResponseBody builds a value of type
// *OrderResponseBody from a value of type *relayerapi.Order.
func marshalRelayerapiOrderToOrderResponseBody(v *relayerapi.Order) *OrderResponseBody {
	res := &OrderResponseBody{
		ChainID:               v.ChainID,
		ExchangeAddress:       v.ExchangeAddress,
		MakerAddress:          v.MakerAddress,
		TakerAddress:          v.TakerAddress,
		FeeRecipientAddress:   v.FeeRecipientAddress,
		SenderAddress:         v.SenderAddress,
		MakerAssetAmount:      v.MakerAssetAmount,
		TakerAssetAmount:      v.TakerAssetAmount,
		MakerFee:              v.MakerFee,
		TakerFee:              v.TakerFee,
		ExpirationTimeSeconds: v.ExpirationTimeSeconds,
		Salt:                  v.Salt,
		MakerAssetData:        v.MakerAssetData,
		TakerAssetData:        v.TakerAssetData,
		MakerFeeAssetData:     v.MakerFeeAssetData,
		TakerFeeAssetData:     v.TakerFeeAssetData,
		Signature:             v.Signature,
	}

	return res
}

// marshalRelayerapiSRAPaginatedOrderRecordsToSRAPaginatedOrderRecordsResponseBody
// builds a value of type *SRAPaginatedOrderRecordsResponseBody from a value of
// type *relayerapi.SRAPaginatedOrderRecords.
func marshalRelayerapiSRAPaginatedOrderRecordsToSRAPaginatedOrderRecordsResponseBody(v *relayerapi.SRAPaginatedOrderRecords) *SRAPaginatedOrderRecordsResponseBody {
	if v == nil {
		return nil
	}
	res := &SRAPaginatedOrderRecordsResponseBody{
		Total:   v.Total,
		Page:    v.Page,
		PerPage: v.PerPage,
	}
	if v.Records != nil {
		res.Records = make([]*OrderRecordResponseBody, len(v.Records))
		for i, val := range v.Records {
			res.Records[i] = marshalRelayerapiOrderRecordToOrderRecordResponseBody(val)
		}
	}

	return res
}
