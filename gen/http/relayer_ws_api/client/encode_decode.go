// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RelayerWsAPI HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	relayerwsapi "github.com/InjectiveLabs/injective-core/api/gen/relayer_ws_api"
	goahttp "goa.design/goa/v3/http"
)

// BuildOrdersStreamingRequest instantiates a HTTP request object with method
// and path set to call the "RelayerWsAPI" service "ordersStreaming" endpoint
func (c *Client) BuildOrdersStreamingRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: OrdersStreamingRelayerWsAPIPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("RelayerWsAPI", "ordersStreaming", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeOrdersStreamingRequest returns an encoder for requests sent to the
// RelayerWsAPI ordersStreaming server.
func EncodeOrdersStreamingRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayerwsapi.OrdersStreamingPayload)
		if !ok {
			return goahttp.ErrInvalidType("RelayerWsAPI", "ordersStreaming", "*relayerwsapi.OrdersStreamingPayload", v)
		}
		body := NewOrdersStreamingRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("RelayerWsAPI", "ordersStreaming", err)
		}
		return nil
	}
}

// DecodeOrdersStreamingResponse returns a decoder for responses returned by
// the RelayerWsAPI ordersStreaming endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeOrdersStreamingResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "rate_limit" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "validation_error" (type *relayerwsapi.SRAValidationErrorResponse): http.StatusExpectationFailed
//	- error: internal error
func DecodeOrdersStreamingResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body OrdersStreamingResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerWsAPI", "ordersStreaming", err)
			}
			err = ValidateOrdersStreamingResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerWsAPI", "ordersStreaming", err)
			}
			res := NewOrdersStreamingResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body OrdersStreamingNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerWsAPI", "ordersStreaming", err)
			}
			err = ValidateOrdersStreamingNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerWsAPI", "ordersStreaming", err)
			}
			return nil, NewOrdersStreamingNotFound(&body)
		case http.StatusTooManyRequests:
			var (
				body OrdersStreamingRateLimitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerWsAPI", "ordersStreaming", err)
			}
			err = ValidateOrdersStreamingRateLimitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerWsAPI", "ordersStreaming", err)
			}
			return nil, NewOrdersStreamingRateLimit(&body)
		case http.StatusInternalServerError:
			var (
				body OrdersStreamingInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerWsAPI", "ordersStreaming", err)
			}
			err = ValidateOrdersStreamingInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerWsAPI", "ordersStreaming", err)
			}
			return nil, NewOrdersStreamingInternal(&body)
		case http.StatusNotImplemented:
			var (
				body OrdersStreamingNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerWsAPI", "ordersStreaming", err)
			}
			err = ValidateOrdersStreamingNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerWsAPI", "ordersStreaming", err)
			}
			return nil, NewOrdersStreamingNotImplemented(&body)
		case http.StatusExpectationFailed:
			var (
				body OrdersStreamingValidationErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("RelayerWsAPI", "ordersStreaming", err)
			}
			err = ValidateOrdersStreamingValidationErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("RelayerWsAPI", "ordersStreaming", err)
			}
			return nil, NewOrdersStreamingValidationError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("RelayerWsAPI", "ordersStreaming", resp.StatusCode, string(body))
		}
	}
}

// marshalRelayerwsapiOrdersStreamingSubscribePayloadSchemaToOrdersStreamingSubscribePayloadSchemaRequestBody
// builds a value of type *OrdersStreamingSubscribePayloadSchemaRequestBody
// from a value of type *relayerwsapi.OrdersStreamingSubscribePayloadSchema.
func marshalRelayerwsapiOrdersStreamingSubscribePayloadSchemaToOrdersStreamingSubscribePayloadSchemaRequestBody(v *relayerwsapi.OrdersStreamingSubscribePayloadSchema) *OrdersStreamingSubscribePayloadSchemaRequestBody {
	if v == nil {
		return nil
	}
	res := &OrdersStreamingSubscribePayloadSchemaRequestBody{
		MakerAssetData: v.MakerAssetData,
		TakerAssetData: v.TakerAssetData,
		ChainID:        v.ChainID,
	}

	return res
}

// marshalOrdersStreamingSubscribePayloadSchemaRequestBodyToRelayerwsapiOrdersStreamingSubscribePayloadSchema
// builds a value of type *relayerwsapi.OrdersStreamingSubscribePayloadSchema
// from a value of type *OrdersStreamingSubscribePayloadSchemaRequestBody.
func marshalOrdersStreamingSubscribePayloadSchemaRequestBodyToRelayerwsapiOrdersStreamingSubscribePayloadSchema(v *OrdersStreamingSubscribePayloadSchemaRequestBody) *relayerwsapi.OrdersStreamingSubscribePayloadSchema {
	if v == nil {
		return nil
	}
	res := &relayerwsapi.OrdersStreamingSubscribePayloadSchema{
		MakerAssetData: v.MakerAssetData,
		TakerAssetData: v.TakerAssetData,
		ChainID:        v.ChainID,
	}

	return res
}

// unmarshalOrderRecordResponseBodyToRelayerwsapiOrderRecord builds a value of
// type *relayerwsapi.OrderRecord from a value of type *OrderRecordResponseBody.
func unmarshalOrderRecordResponseBodyToRelayerwsapiOrderRecord(v *OrderRecordResponseBody) *relayerwsapi.OrderRecord {
	if v == nil {
		return nil
	}
	res := &relayerwsapi.OrderRecord{}
	res.Order = unmarshalOrderResponseBodyToRelayerwsapiOrder(v.Order)
	res.MetaData = make(map[string]string, len(v.MetaData))
	for key, val := range v.MetaData {
		tk := key
		tv := val
		res.MetaData[tk] = tv
	}

	return res
}

// unmarshalOrderResponseBodyToRelayerwsapiOrder builds a value of type
// *relayerwsapi.Order from a value of type *OrderResponseBody.
func unmarshalOrderResponseBodyToRelayerwsapiOrder(v *OrderResponseBody) *relayerwsapi.Order {
	res := &relayerwsapi.Order{
		ChainID:               *v.ChainID,
		ExchangeAddress:       *v.ExchangeAddress,
		MakerAddress:          *v.MakerAddress,
		TakerAddress:          *v.TakerAddress,
		FeeRecipientAddress:   *v.FeeRecipientAddress,
		SenderAddress:         *v.SenderAddress,
		MakerAssetAmount:      *v.MakerAssetAmount,
		TakerAssetAmount:      *v.TakerAssetAmount,
		MakerFee:              *v.MakerFee,
		TakerFee:              *v.TakerFee,
		ExpirationTimeSeconds: *v.ExpirationTimeSeconds,
		Salt:                  *v.Salt,
		MakerAssetData:        *v.MakerAssetData,
		TakerAssetData:        *v.TakerAssetData,
		MakerFeeAssetData:     *v.MakerFeeAssetData,
		TakerFeeAssetData:     *v.TakerFeeAssetData,
		Signature:             *v.Signature,
	}

	return res
}

// unmarshalSRAValidationErrorResponseBodyToRelayerwsapiSRAValidationError
// builds a value of type *relayerwsapi.SRAValidationError from a value of type
// *SRAValidationErrorResponseBody.
func unmarshalSRAValidationErrorResponseBodyToRelayerwsapiSRAValidationError(v *SRAValidationErrorResponseBody) *relayerwsapi.SRAValidationError {
	if v == nil {
		return nil
	}
	res := &relayerwsapi.SRAValidationError{
		Code:   *v.Code,
		Reason: *v.Reason,
		Field:  v.Field,
	}

	return res
}
