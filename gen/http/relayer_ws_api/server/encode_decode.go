// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RelayerWsAPI HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"context"
	"io"
	"net/http"

	relayerwsapi "github.com/InjectiveLabs/injective-core/api/gen/relayer_ws_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// DecodeOrdersStreamingRequest returns a decoder for requests sent to the
// RelayerWsAPI ordersStreaming endpoint.
func DecodeOrdersStreamingRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body OrdersStreamingRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateOrdersStreamingRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewOrdersStreamingPayload(&body)

		return payload, nil
	}
}

// EncodeOrdersStreamingError returns an encoder for errors returned by the
// ordersStreaming RelayerWsAPI endpoint.
func EncodeOrdersStreamingError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersStreamingNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "rate_limit":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersStreamingRateLimitResponseBody(res)
			}
			w.Header().Set("goa-error", "rate_limit")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersStreamingInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersStreamingNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*relayerwsapi.SRAValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOrdersStreamingValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalOrdersStreamingSubscribePayloadSchemaRequestBodyToRelayerwsapiOrdersStreamingSubscribePayloadSchema
// builds a value of type *relayerwsapi.OrdersStreamingSubscribePayloadSchema
// from a value of type *OrdersStreamingSubscribePayloadSchemaRequestBody.
func unmarshalOrdersStreamingSubscribePayloadSchemaRequestBodyToRelayerwsapiOrdersStreamingSubscribePayloadSchema(v *OrdersStreamingSubscribePayloadSchemaRequestBody) *relayerwsapi.OrdersStreamingSubscribePayloadSchema {
	if v == nil {
		return nil
	}
	res := &relayerwsapi.OrdersStreamingSubscribePayloadSchema{
		MakerAssetData: *v.MakerAssetData,
		TakerAssetData: *v.TakerAssetData,
		ChainID:        *v.ChainID,
	}

	return res
}

// marshalRelayerwsapiOrderRecordToOrderRecordResponseBody builds a value of
// type *OrderRecordResponseBody from a value of type *relayerwsapi.OrderRecord.
func marshalRelayerwsapiOrderRecordToOrderRecordResponseBody(v *relayerwsapi.OrderRecord) *OrderRecordResponseBody {
	if v == nil {
		return nil
	}
	res := &OrderRecordResponseBody{}
	if v.Order != nil {
		res.Order = marshalRelayerwsapiOrderToOrderResponseBody(v.Order)
	}
	if v.MetaData != nil {
		res.MetaData = make(map[string]string, len(v.MetaData))
		for key, val := range v.MetaData {
			tk := key
			tv := val
			res.MetaData[tk] = tv
		}
	}

	return res
}

// marshalRelayerwsapiOrderToOrderResponseBody builds a value of type
// *OrderResponseBody from a value of type *relayerwsapi.Order.
func marshalRelayerwsapiOrderToOrderResponseBody(v *relayerwsapi.Order) *OrderResponseBody {
	res := &OrderResponseBody{
		ChainID:               v.ChainID,
		ExchangeAddress:       v.ExchangeAddress,
		MakerAddress:          v.MakerAddress,
		TakerAddress:          v.TakerAddress,
		FeeRecipientAddress:   v.FeeRecipientAddress,
		SenderAddress:         v.SenderAddress,
		MakerAssetAmount:      v.MakerAssetAmount,
		TakerAssetAmount:      v.TakerAssetAmount,
		MakerFee:              v.MakerFee,
		TakerFee:              v.TakerFee,
		ExpirationTimeSeconds: v.ExpirationTimeSeconds,
		Salt:                  v.Salt,
		MakerAssetData:        v.MakerAssetData,
		TakerAssetData:        v.TakerAssetData,
		MakerFeeAssetData:     v.MakerFeeAssetData,
		TakerFeeAssetData:     v.TakerFeeAssetData,
		Signature:             v.Signature,
	}

	return res
}

// marshalRelayerwsapiSRAValidationErrorToSRAValidationErrorResponseBody builds
// a value of type *SRAValidationErrorResponseBody from a value of type
// *relayerwsapi.SRAValidationError.
func marshalRelayerwsapiSRAValidationErrorToSRAValidationErrorResponseBody(v *relayerwsapi.SRAValidationError) *SRAValidationErrorResponseBody {
	if v == nil {
		return nil
	}
	res := &SRAValidationErrorResponseBody{
		Code:   v.Code,
		Reason: v.Reason,
		Field:  v.Field,
	}

	return res
}
