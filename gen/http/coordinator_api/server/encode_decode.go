// Code generated by goa v3.1.1, DO NOT EDIT.
//
// CoordinatorAPI HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	coordinatorapi "github.com/InjectiveLabs/injective-core/api/gen/coordinator_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeConfigurationResponse returns an encoder for responses returned by the
// CoordinatorAPI configuration endpoint.
func EncodeConfigurationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coordinatorapi.ConfigurationResult)
		enc := encoder(ctx, w)
		body := NewConfigurationResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeConfigurationRequest returns a decoder for requests sent to the
// CoordinatorAPI configuration endpoint.
func DecodeConfigurationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			chainID int64
			err     error
		)
		{
			chainIDRaw := r.URL.Query().Get("chainId")
			if chainIDRaw == "" {
				chainID = 1
			} else {
				v, err2 := strconv.ParseInt(chainIDRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("chainID", chainIDRaw, "integer"))
				}
				chainID = v
			}
		}
		if !(chainID == 1 || chainID == 3 || chainID == 4 || chainID == 42 || chainID == 15001 || chainID == 1337 || chainID == 50) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("chainID", chainID, []interface{}{1, 3, 4, 42, 15001, 1337, 50}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewConfigurationPayload(chainID)

		return payload, nil
	}
}

// EncodeConfigurationError returns an encoder for errors returned by the
// configuration CoordinatorAPI endpoint.
func EncodeConfigurationError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "validation_error":
			res := v.(*coordinatorapi.CoordinatorValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewConfigurationValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewConfigurationNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewConfigurationInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRequestTransactionResponse returns an encoder for responses returned
// by the CoordinatorAPI request_transaction endpoint.
func EncodeRequestTransactionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coordinatorapi.RequestTransactionResult)
		enc := encoder(ctx, w)
		body := NewRequestTransactionResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRequestTransactionRequest returns a decoder for requests sent to the
// CoordinatorAPI request_transaction endpoint.
func DecodeRequestTransactionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RequestTransactionRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRequestTransactionRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewRequestTransactionPayload(&body)

		return payload, nil
	}
}

// EncodeRequestTransactionError returns an encoder for errors returned by the
// request_transaction CoordinatorAPI endpoint.
func EncodeRequestTransactionError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "validation_error":
			res := v.(*coordinatorapi.CoordinatorValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRequestTransactionValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRequestTransactionNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRequestTransactionInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSoftCancelsResponse returns an encoder for responses returned by the
// CoordinatorAPI soft_cancels endpoint.
func EncodeSoftCancelsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coordinatorapi.SoftCancelsResult)
		enc := encoder(ctx, w)
		body := NewSoftCancelsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSoftCancelsRequest returns a decoder for requests sent to the
// CoordinatorAPI soft_cancels endpoint.
func DecodeSoftCancelsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SoftCancelsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSoftCancelsRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			chainID int64
		)
		{
			chainIDRaw := r.URL.Query().Get("chainId")
			if chainIDRaw == "" {
				chainID = 1
			} else {
				v, err2 := strconv.ParseInt(chainIDRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("chainID", chainIDRaw, "integer"))
				}
				chainID = v
			}
		}
		if !(chainID == 1 || chainID == 3 || chainID == 4 || chainID == 42 || chainID == 15001 || chainID == 1337 || chainID == 50) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("chainID", chainID, []interface{}{1, 3, 4, 42, 15001, 1337, 50}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSoftCancelsPayload(&body, chainID)

		return payload, nil
	}
}

// EncodeSoftCancelsError returns an encoder for errors returned by the
// soft_cancels CoordinatorAPI endpoint.
func EncodeSoftCancelsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "validation_error":
			res := v.(*coordinatorapi.CoordinatorValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSoftCancelsValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSoftCancelsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSoftCancelsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalCoordinatorapiCoordinatorValidationErrorToCoordinatorValidationErrorResponseBody
// builds a value of type *CoordinatorValidationErrorResponseBody from a value
// of type *coordinatorapi.CoordinatorValidationError.
func marshalCoordinatorapiCoordinatorValidationErrorToCoordinatorValidationErrorResponseBody(v *coordinatorapi.CoordinatorValidationError) *CoordinatorValidationErrorResponseBody {
	if v == nil {
		return nil
	}
	res := &CoordinatorValidationErrorResponseBody{
		Code:   v.Code,
		Reason: v.Reason,
		Field:  v.Field,
	}

	return res
}

// unmarshalSignedTransactionRequestBodyToCoordinatorapiSignedTransaction
// builds a value of type *coordinatorapi.SignedTransaction from a value of
// type *SignedTransactionRequestBody.
func unmarshalSignedTransactionRequestBodyToCoordinatorapiSignedTransaction(v *SignedTransactionRequestBody) *coordinatorapi.SignedTransaction {
	res := &coordinatorapi.SignedTransaction{
		Salt:                  *v.Salt,
		SignerAddress:         *v.SignerAddress,
		Data:                  *v.Data,
		ExpirationTimeSeconds: *v.ExpirationTimeSeconds,
		GasPrice:              *v.GasPrice,
		Signature:             *v.Signature,
	}
	res.Domain = unmarshalExchangeDomainRequestBodyToCoordinatorapiExchangeDomain(v.Domain)

	return res
}

// unmarshalExchangeDomainRequestBodyToCoordinatorapiExchangeDomain builds a
// value of type *coordinatorapi.ExchangeDomain from a value of type
// *ExchangeDomainRequestBody.
func unmarshalExchangeDomainRequestBodyToCoordinatorapiExchangeDomain(v *ExchangeDomainRequestBody) *coordinatorapi.ExchangeDomain {
	res := &coordinatorapi.ExchangeDomain{
		VerifyingContract: *v.VerifyingContract,
		ChainID:           *v.ChainID,
	}

	return res
}

// marshalCoordinatorapiFillSignaturesToFillSignaturesResponseBody builds a
// value of type *FillSignaturesResponseBody from a value of type
// *coordinatorapi.FillSignatures.
func marshalCoordinatorapiFillSignaturesToFillSignaturesResponseBody(v *coordinatorapi.FillSignatures) *FillSignaturesResponseBody {
	if v == nil {
		return nil
	}
	res := &FillSignaturesResponseBody{
		OrderHash:             v.OrderHash,
		ExpirationTimeSeconds: v.ExpirationTimeSeconds,
		TakerAssetFillAmount:  v.TakerAssetFillAmount,
	}
	if v.ApprovalSignatures != nil {
		res.ApprovalSignatures = make([]string, len(v.ApprovalSignatures))
		for i, val := range v.ApprovalSignatures {
			res.ApprovalSignatures[i] = val
		}
	}

	return res
}
