// Code generated by goa v3.1.1, DO NOT EDIT.
//
// ChronosAPI HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package client

import (
	"unicode/utf8"

	chronosapi "github.com/InjectiveLabs/dexterm/gen/chronos_api"
	goa "goa.design/goa/v3/pkg"
)

// SymbolInfoResponseBody is the type of the "ChronosAPI" service "symbolInfo"
// endpoint HTTP response body.
type SymbolInfoResponseBody struct {
	// Status of the response.
	S *string `form:"s,omitempty" json:"s,omitempty" xml:"s,omitempty"`
	// Error message.
	Errmsg *string `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// This is the name of the symbol - a string that the users will see. It should
	// contain uppercase letters, numbers, a dot or an underscore. Also, it will be
	// used for data requests if you are not using tickers.
	Symbol []string `form:"symbol,omitempty" json:"symbol,omitempty" xml:"symbol,omitempty"`
	// Description of a symbol. Will be displayed in the chart legend for this
	// symbol.
	Description []string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Symbol currency, also named as counter currency. If a symbol is a currency
	// pair, then the currency field has to contain the second currency of this
	// pair. For example, USD is a currency for EURUSD ticker. Fiat currency must
	// meet the ISO 4217 standard. The default value is null.
	Currency []string `form:"currency,omitempty" json:"currency,omitempty" xml:"currency,omitempty"`
	// Short name of exchange where this symbol is listed.
	ExchangeListed []string `form:"exchange-listed,omitempty" json:"exchange-listed,omitempty" xml:"exchange-listed,omitempty"`
	// Short name of exchange where this symbol is traded.
	ExchangeTraded []string `form:"exchange-traded,omitempty" json:"exchange-traded,omitempty" xml:"exchange-traded,omitempty"`
	// Minimal integer price change.
	Minmovement []int `form:"minmovement,omitempty" json:"minmovement,omitempty" xml:"minmovement,omitempty"`
	// Indicates how many decimal points the price has. For example, if the price
	// has 2 decimal points (ex., 300.01), then pricescale is 100. If it has 3
	// decimals, then pricescale is 1000 etc. If the price doesn't have decimals,
	// set pricescale to 1
	Pricescale []int `form:"pricescale,omitempty" json:"pricescale,omitempty" xml:"pricescale,omitempty"`
	// Timezone of the exchange for this symbol. We expect to get the name of the
	// time zone in olsondb format.
	Timezone []string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// Symbol type (forex/stock, crypto etc.).
	Type []string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Bitcoin and other cryptocurrencies: the session string should be 24x7
	SessionRegular []string `form:"session-regular,omitempty" json:"session-regular,omitempty" xml:"session-regular,omitempty"`
	// For currency pairs only. This field contains the first currency of the pair.
	// For example, base currency for EURUSD ticker is EUR. Fiat currency must meet
	// the ISO 4217 standard.
	BaseCurrency []string `form:"base-currency,omitempty" json:"base-currency,omitempty" xml:"base-currency,omitempty"`
	// This is a number for complex price formatting cases.
	Minmov2 []int `form:"minmov2,omitempty" json:"minmov2,omitempty" xml:"minmov2,omitempty"`
	// Boolean showing whether this symbol wants to have complex price formatting
	// (see minmov2) or not. The default value is false.
	Fractional []bool `form:"fractional,omitempty" json:"fractional,omitempty" xml:"fractional,omitempty"`
	// Root of the features. It's required for futures symbol types only. Provide a
	// null value for other symbol types. The default value is null.
	Root []string `form:"root,omitempty" json:"root,omitempty" xml:"root,omitempty"`
	// Short description of the futures root that will be displayed in the symbol
	// search. It's required for futures only. Provide a null value for other
	// symbol types. The default value is null.
	RootDescription []string `form:"root-description,omitempty" json:"root-description,omitempty" xml:"root-description,omitempty"`
	// Boolean value showing whether the symbol includes intraday (minutes)
	// historical data.
	HasIntraday []bool `form:"has-intraday,omitempty" json:"has-intraday,omitempty" xml:"has-intraday,omitempty"`
	// Boolean showing whether the symbol includes volume data or not. The default
	// value is false.
	HasNoVolume []bool `form:"has-no-volume,omitempty" json:"has-no-volume,omitempty" xml:"has-no-volume,omitempty"`
	// Boolean value showing whether the symbol is CFD. The base instrument type is
	// set using the type field.
	IsCfd []bool `form:"is-cfd,omitempty" json:"is-cfd,omitempty" xml:"is-cfd,omitempty"`
	// This is a unique identifier for this particular symbol in your symbology. If
	// you specify this property then its value will be used for all data requests
	// for this symbol.
	Ticker []string `form:"ticker,omitempty" json:"ticker,omitempty" xml:"ticker,omitempty"`
	// The boolean value showing whether data feed has its own daily resolution
	// bars or not.
	HasDaily []bool `form:"has-daily,omitempty" json:"has-daily,omitempty" xml:"has-daily,omitempty"`
	// This is an array containing intraday resolutions (in minutes) that the data
	// feed may provide
	IntradayMultipliers []string `form:"intraday-multipliers,omitempty" json:"intraday-multipliers,omitempty" xml:"intraday-multipliers,omitempty"`
	// The boolean value showing whether data feed has its own weekly and monthly
	// resolution bars or not.
	HasWeeklyAndMonthly []bool `form:"has-weekly-and-monthly,omitempty" json:"has-weekly-and-monthly,omitempty" xml:"has-weekly-and-monthly,omitempty"`
	// The currency value of a single whole unit price change in the instrument's
	// currency. If the value is not provided it is assumed to be 1.
	Pointvalue []int `form:"pointvalue,omitempty" json:"pointvalue,omitempty" xml:"pointvalue,omitempty"`
	// Expiration of the futures in the following format: YYYYMMDD. Required for
	// futures type symbols only.
	Expiration []int `form:"expiration,omitempty" json:"expiration,omitempty" xml:"expiration,omitempty"`
	// The principle of building bars. The default value is trade.
	BarSource []string `form:"bar-source,omitempty" json:"bar-source,omitempty" xml:"bar-source,omitempty"`
	// The principle of bar alignment. The default value is none.
	BarTransform []string `form:"bar-transform,omitempty" json:"bar-transform,omitempty" xml:"bar-transform,omitempty"`
	// Is used to create the zero-volume bars in the absence of any trades
	BarFillgaps []bool `form:"bar-fillgaps,omitempty" json:"bar-fillgaps,omitempty" xml:"bar-fillgaps,omitempty"`
}

// HistoryResponseBody is the type of the "ChronosAPI" service "history"
// endpoint HTTP response body.
type HistoryResponseBody struct {
	// Status of the response.
	S *string `form:"s,omitempty" json:"s,omitempty" xml:"s,omitempty"`
	// Error message.
	Errmsg *string `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// Unix time of the next bar if there is no data in the requested period
	// (optional).
	Nb *int `form:"nb,omitempty" json:"nb,omitempty" xml:"nb,omitempty"`
	// Bar time, Unix timestamp (UTC). Daily bars should only have the date part,
	// time should be 0.
	T []int `form:"t,omitempty" json:"t,omitempty" xml:"t,omitempty"`
	// Open price.
	O []float64 `form:"o,omitempty" json:"o,omitempty" xml:"o,omitempty"`
	// High price.
	H []float64 `form:"h,omitempty" json:"h,omitempty" xml:"h,omitempty"`
	// Low price.
	L []float64 `form:"l,omitempty" json:"l,omitempty" xml:"l,omitempty"`
	// Close price.
	C []float64 `form:"c,omitempty" json:"c,omitempty" xml:"c,omitempty"`
	// Volume.
	V []float64 `form:"v,omitempty" json:"v,omitempty" xml:"v,omitempty"`
}

// FillsHistoryResponseBody is the type of the "ChronosAPI" service
// "fillsHistory" endpoint HTTP response body.
type FillsHistoryResponseBody []*FillEventResponse

// MarketSummaryResponseBody is the type of the "ChronosAPI" service
// "marketSummary" endpoint HTTP response body.
type MarketSummaryResponseBody struct {
	// Open price.
	Open *float64 `form:"open,omitempty" json:"open,omitempty" xml:"open,omitempty"`
	// High price.
	High *float64 `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Low price.
	Low *float64 `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Volume.
	Volume *float64 `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
	// Current price based on latest fill event.
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Change percent from the previous period on the same resolution.
	Change *float64 `form:"change,omitempty" json:"change,omitempty" xml:"change,omitempty"`
}

// FuturesHistoryResponseBody is the type of the "ChronosAPI" service
// "futuresHistory" endpoint HTTP response body.
type FuturesHistoryResponseBody struct {
	// Status of the response.
	S *string `form:"s,omitempty" json:"s,omitempty" xml:"s,omitempty"`
	// Error message.
	Errmsg *string `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// Unix time of the next bar if there is no data in the requested period
	// (optional).
	Nb *int `form:"nb,omitempty" json:"nb,omitempty" xml:"nb,omitempty"`
	// Bar time, Unix timestamp (UTC). Daily bars should only have the date part,
	// time should be 0.
	T []int `form:"t,omitempty" json:"t,omitempty" xml:"t,omitempty"`
	// Open price.
	O []float64 `form:"o,omitempty" json:"o,omitempty" xml:"o,omitempty"`
	// High price.
	H []float64 `form:"h,omitempty" json:"h,omitempty" xml:"h,omitempty"`
	// Low price.
	L []float64 `form:"l,omitempty" json:"l,omitempty" xml:"l,omitempty"`
	// Close price.
	C []float64 `form:"c,omitempty" json:"c,omitempty" xml:"c,omitempty"`
	// Volume.
	V []float64 `form:"v,omitempty" json:"v,omitempty" xml:"v,omitempty"`
}

// FuturesFillsHistoryResponseBody is the type of the "ChronosAPI" service
// "futuresFillsHistory" endpoint HTTP response body.
type FuturesFillsHistoryResponseBody []*FuturesFillEventResponse

// FuturesMarketSummaryResponseBody is the type of the "ChronosAPI" service
// "futuresMarketSummary" endpoint HTTP response body.
type FuturesMarketSummaryResponseBody struct {
	// Open price.
	Open *float64 `form:"open,omitempty" json:"open,omitempty" xml:"open,omitempty"`
	// High price.
	High *float64 `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Low price.
	Low *float64 `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Volume.
	Volume *float64 `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
	// Current price based on latest fill event.
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Change percent from the previous period on the same resolution.
	Change *float64 `form:"change,omitempty" json:"change,omitempty" xml:"change,omitempty"`
}

// SymbolInfoBadRequestResponseBody is the type of the "ChronosAPI" service
// "symbolInfo" endpoint HTTP response body for the "bad_request" error.
type SymbolInfoBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SymbolInfoNotFoundResponseBody is the type of the "ChronosAPI" service
// "symbolInfo" endpoint HTTP response body for the "not_found" error.
type SymbolInfoNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SymbolInfoInternalResponseBody is the type of the "ChronosAPI" service
// "symbolInfo" endpoint HTTP response body for the "internal" error.
type SymbolInfoInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HistoryBadRequestResponseBody is the type of the "ChronosAPI" service
// "history" endpoint HTTP response body for the "bad_request" error.
type HistoryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HistoryNotFoundResponseBody is the type of the "ChronosAPI" service
// "history" endpoint HTTP response body for the "not_found" error.
type HistoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HistoryInternalResponseBody is the type of the "ChronosAPI" service
// "history" endpoint HTTP response body for the "internal" error.
type HistoryInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FillsHistoryBadRequestResponseBody is the type of the "ChronosAPI" service
// "fillsHistory" endpoint HTTP response body for the "bad_request" error.
type FillsHistoryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FillsHistoryNotFoundResponseBody is the type of the "ChronosAPI" service
// "fillsHistory" endpoint HTTP response body for the "not_found" error.
type FillsHistoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FillsHistoryInternalResponseBody is the type of the "ChronosAPI" service
// "fillsHistory" endpoint HTTP response body for the "internal" error.
type FillsHistoryInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MarketSummaryBadRequestResponseBody is the type of the "ChronosAPI" service
// "marketSummary" endpoint HTTP response body for the "bad_request" error.
type MarketSummaryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MarketSummaryNotFoundResponseBody is the type of the "ChronosAPI" service
// "marketSummary" endpoint HTTP response body for the "not_found" error.
type MarketSummaryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MarketSummaryInternalResponseBody is the type of the "ChronosAPI" service
// "marketSummary" endpoint HTTP response body for the "internal" error.
type MarketSummaryInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesHistoryBadRequestResponseBody is the type of the "ChronosAPI" service
// "futuresHistory" endpoint HTTP response body for the "bad_request" error.
type FuturesHistoryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesHistoryNotFoundResponseBody is the type of the "ChronosAPI" service
// "futuresHistory" endpoint HTTP response body for the "not_found" error.
type FuturesHistoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesHistoryInternalResponseBody is the type of the "ChronosAPI" service
// "futuresHistory" endpoint HTTP response body for the "internal" error.
type FuturesHistoryInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesFillsHistoryBadRequestResponseBody is the type of the "ChronosAPI"
// service "futuresFillsHistory" endpoint HTTP response body for the
// "bad_request" error.
type FuturesFillsHistoryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesFillsHistoryNotFoundResponseBody is the type of the "ChronosAPI"
// service "futuresFillsHistory" endpoint HTTP response body for the
// "not_found" error.
type FuturesFillsHistoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesFillsHistoryInternalResponseBody is the type of the "ChronosAPI"
// service "futuresFillsHistory" endpoint HTTP response body for the "internal"
// error.
type FuturesFillsHistoryInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesMarketSummaryBadRequestResponseBody is the type of the "ChronosAPI"
// service "futuresMarketSummary" endpoint HTTP response body for the
// "bad_request" error.
type FuturesMarketSummaryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesMarketSummaryNotFoundResponseBody is the type of the "ChronosAPI"
// service "futuresMarketSummary" endpoint HTTP response body for the
// "not_found" error.
type FuturesMarketSummaryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FuturesMarketSummaryInternalResponseBody is the type of the "ChronosAPI"
// service "futuresMarketSummary" endpoint HTTP response body for the
// "internal" error.
type FuturesMarketSummaryInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FillEventResponse is used to define fields on response body types.
type FillEventResponse struct {
	// Account's side in the trade
	Side *string `form:"side,omitempty" json:"side,omitempty" xml:"side,omitempty"`
	// UNIX timestamp of the fill event
	Ts *int64 `form:"ts,omitempty" json:"ts,omitempty" xml:"ts,omitempty"`
	// Filled amount in quote currency
	Size *float64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Filled amount in base currency
	Filled *float64 `form:"filled,omitempty" json:"filled,omitempty" xml:"filled,omitempty"`
	// Price in quote currency
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Transaction hash related to this fill
	TxHash *string `form:"txHash,omitempty" json:"txHash,omitempty" xml:"txHash,omitempty"`
}

// FuturesFillEventResponse is used to define fields on response body types.
type FuturesFillEventResponse struct {
	// Account's side in the trade
	Side *string `form:"side,omitempty" json:"side,omitempty" xml:"side,omitempty"`
	// UNIX timestamp of the fill event
	Ts *int64 `form:"ts,omitempty" json:"ts,omitempty" xml:"ts,omitempty"`
	// Filled amount in quote currency
	Size *float64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Filled amount in base currency
	Filled *float64 `form:"filled,omitempty" json:"filled,omitempty" xml:"filled,omitempty"`
	// Price in quote currency
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Transaction hash related to this fill
	TxHash *string `form:"txHash,omitempty" json:"txHash,omitempty" xml:"txHash,omitempty"`
}

// NewSymbolInfoTradingViewSymbolInfoResponseOK builds a "ChronosAPI" service
// "symbolInfo" endpoint result from a HTTP "OK" response.
func NewSymbolInfoTradingViewSymbolInfoResponseOK(body *SymbolInfoResponseBody) *chronosapi.TradingViewSymbolInfoResponse {
	v := &chronosapi.TradingViewSymbolInfoResponse{
		S:      *body.S,
		Errmsg: body.Errmsg,
	}
	v.Symbol = make([]string, len(body.Symbol))
	for i, val := range body.Symbol {
		v.Symbol[i] = val
	}
	v.Description = make([]string, len(body.Description))
	for i, val := range body.Description {
		v.Description[i] = val
	}
	v.Currency = make([]string, len(body.Currency))
	for i, val := range body.Currency {
		v.Currency[i] = val
	}
	v.ExchangeListed = make([]string, len(body.ExchangeListed))
	for i, val := range body.ExchangeListed {
		v.ExchangeListed[i] = val
	}
	v.ExchangeTraded = make([]string, len(body.ExchangeTraded))
	for i, val := range body.ExchangeTraded {
		v.ExchangeTraded[i] = val
	}
	v.Minmovement = make([]int, len(body.Minmovement))
	for i, val := range body.Minmovement {
		v.Minmovement[i] = val
	}
	v.Pricescale = make([]int, len(body.Pricescale))
	for i, val := range body.Pricescale {
		v.Pricescale[i] = val
	}
	v.Timezone = make([]string, len(body.Timezone))
	for i, val := range body.Timezone {
		v.Timezone[i] = val
	}
	v.Type = make([]string, len(body.Type))
	for i, val := range body.Type {
		v.Type[i] = val
	}
	v.SessionRegular = make([]string, len(body.SessionRegular))
	for i, val := range body.SessionRegular {
		v.SessionRegular[i] = val
	}
	if body.BaseCurrency != nil {
		v.BaseCurrency = make([]string, len(body.BaseCurrency))
		for i, val := range body.BaseCurrency {
			v.BaseCurrency[i] = val
		}
	}
	if body.Minmov2 != nil {
		v.Minmov2 = make([]int, len(body.Minmov2))
		for i, val := range body.Minmov2 {
			v.Minmov2[i] = val
		}
	}
	if body.Fractional != nil {
		v.Fractional = make([]bool, len(body.Fractional))
		for i, val := range body.Fractional {
			v.Fractional[i] = val
		}
	}
	if body.Root != nil {
		v.Root = make([]string, len(body.Root))
		for i, val := range body.Root {
			v.Root[i] = val
		}
	}
	if body.RootDescription != nil {
		v.RootDescription = make([]string, len(body.RootDescription))
		for i, val := range body.RootDescription {
			v.RootDescription[i] = val
		}
	}
	if body.HasIntraday != nil {
		v.HasIntraday = make([]bool, len(body.HasIntraday))
		for i, val := range body.HasIntraday {
			v.HasIntraday[i] = val
		}
	}
	if body.HasNoVolume != nil {
		v.HasNoVolume = make([]bool, len(body.HasNoVolume))
		for i, val := range body.HasNoVolume {
			v.HasNoVolume[i] = val
		}
	}
	if body.IsCfd != nil {
		v.IsCfd = make([]bool, len(body.IsCfd))
		for i, val := range body.IsCfd {
			v.IsCfd[i] = val
		}
	}
	if body.Ticker != nil {
		v.Ticker = make([]string, len(body.Ticker))
		for i, val := range body.Ticker {
			v.Ticker[i] = val
		}
	}
	if body.HasDaily != nil {
		v.HasDaily = make([]bool, len(body.HasDaily))
		for i, val := range body.HasDaily {
			v.HasDaily[i] = val
		}
	}
	if body.IntradayMultipliers != nil {
		v.IntradayMultipliers = make([]string, len(body.IntradayMultipliers))
		for i, val := range body.IntradayMultipliers {
			v.IntradayMultipliers[i] = val
		}
	}
	if body.HasWeeklyAndMonthly != nil {
		v.HasWeeklyAndMonthly = make([]bool, len(body.HasWeeklyAndMonthly))
		for i, val := range body.HasWeeklyAndMonthly {
			v.HasWeeklyAndMonthly[i] = val
		}
	}
	if body.Pointvalue != nil {
		v.Pointvalue = make([]int, len(body.Pointvalue))
		for i, val := range body.Pointvalue {
			v.Pointvalue[i] = val
		}
	}
	if body.Expiration != nil {
		v.Expiration = make([]int, len(body.Expiration))
		for i, val := range body.Expiration {
			v.Expiration[i] = val
		}
	}
	if body.BarSource != nil {
		v.BarSource = make([]string, len(body.BarSource))
		for i, val := range body.BarSource {
			v.BarSource[i] = val
		}
	}
	if body.BarTransform != nil {
		v.BarTransform = make([]string, len(body.BarTransform))
		for i, val := range body.BarTransform {
			v.BarTransform[i] = val
		}
	}
	if body.BarFillgaps != nil {
		v.BarFillgaps = make([]bool, len(body.BarFillgaps))
		for i, val := range body.BarFillgaps {
			v.BarFillgaps[i] = val
		}
	}

	return v
}

// NewSymbolInfoBadRequest builds a ChronosAPI service symbolInfo endpoint
// bad_request error.
func NewSymbolInfoBadRequest(body *SymbolInfoBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSymbolInfoNotFound builds a ChronosAPI service symbolInfo endpoint
// not_found error.
func NewSymbolInfoNotFound(body *SymbolInfoNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSymbolInfoInternal builds a ChronosAPI service symbolInfo endpoint
// internal error.
func NewSymbolInfoInternal(body *SymbolInfoInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewHistoryResponseOK builds a "ChronosAPI" service "history" endpoint result
// from a HTTP "OK" response.
func NewHistoryResponseOK(body *HistoryResponseBody) *chronosapi.HistoryResponse {
	v := &chronosapi.HistoryResponse{
		S:      *body.S,
		Errmsg: body.Errmsg,
		Nb:     body.Nb,
	}
	v.T = make([]int, len(body.T))
	for i, val := range body.T {
		v.T[i] = val
	}
	v.O = make([]float64, len(body.O))
	for i, val := range body.O {
		v.O[i] = val
	}
	v.H = make([]float64, len(body.H))
	for i, val := range body.H {
		v.H[i] = val
	}
	v.L = make([]float64, len(body.L))
	for i, val := range body.L {
		v.L[i] = val
	}
	v.C = make([]float64, len(body.C))
	for i, val := range body.C {
		v.C[i] = val
	}
	v.V = make([]float64, len(body.V))
	for i, val := range body.V {
		v.V[i] = val
	}

	return v
}

// NewHistoryBadRequest builds a ChronosAPI service history endpoint
// bad_request error.
func NewHistoryBadRequest(body *HistoryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewHistoryNotFound builds a ChronosAPI service history endpoint not_found
// error.
func NewHistoryNotFound(body *HistoryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewHistoryInternal builds a ChronosAPI service history endpoint internal
// error.
func NewHistoryInternal(body *HistoryInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFillsHistoryFillEventOK builds a "ChronosAPI" service "fillsHistory"
// endpoint result from a HTTP "OK" response.
func NewFillsHistoryFillEventOK(body []*FillEventResponse) []*chronosapi.FillEvent {
	v := make([]*chronosapi.FillEvent, len(body))
	for i, val := range body {
		v[i] = unmarshalFillEventResponseToChronosapiFillEvent(val)
	}
	return v
}

// NewFillsHistoryBadRequest builds a ChronosAPI service fillsHistory endpoint
// bad_request error.
func NewFillsHistoryBadRequest(body *FillsHistoryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFillsHistoryNotFound builds a ChronosAPI service fillsHistory endpoint
// not_found error.
func NewFillsHistoryNotFound(body *FillsHistoryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFillsHistoryInternal builds a ChronosAPI service fillsHistory endpoint
// internal error.
func NewFillsHistoryInternal(body *FillsHistoryInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMarketSummaryResponseOK builds a "ChronosAPI" service "marketSummary"
// endpoint result from a HTTP "OK" response.
func NewMarketSummaryResponseOK(body *MarketSummaryResponseBody) *chronosapi.MarketSummaryResponse {
	v := &chronosapi.MarketSummaryResponse{
		Open:   *body.Open,
		High:   *body.High,
		Low:    *body.Low,
		Volume: *body.Volume,
		Price:  *body.Price,
		Change: *body.Change,
	}

	return v
}

// NewMarketSummaryBadRequest builds a ChronosAPI service marketSummary
// endpoint bad_request error.
func NewMarketSummaryBadRequest(body *MarketSummaryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMarketSummaryNotFound builds a ChronosAPI service marketSummary endpoint
// not_found error.
func NewMarketSummaryNotFound(body *MarketSummaryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMarketSummaryInternal builds a ChronosAPI service marketSummary endpoint
// internal error.
func NewMarketSummaryInternal(body *MarketSummaryInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesHistoryResponseOK builds a "ChronosAPI" service "futuresHistory"
// endpoint result from a HTTP "OK" response.
func NewFuturesHistoryResponseOK(body *FuturesHistoryResponseBody) *chronosapi.FuturesHistoryResponse {
	v := &chronosapi.FuturesHistoryResponse{
		S:      *body.S,
		Errmsg: body.Errmsg,
		Nb:     body.Nb,
	}
	v.T = make([]int, len(body.T))
	for i, val := range body.T {
		v.T[i] = val
	}
	v.O = make([]float64, len(body.O))
	for i, val := range body.O {
		v.O[i] = val
	}
	v.H = make([]float64, len(body.H))
	for i, val := range body.H {
		v.H[i] = val
	}
	v.L = make([]float64, len(body.L))
	for i, val := range body.L {
		v.L[i] = val
	}
	v.C = make([]float64, len(body.C))
	for i, val := range body.C {
		v.C[i] = val
	}
	v.V = make([]float64, len(body.V))
	for i, val := range body.V {
		v.V[i] = val
	}

	return v
}

// NewFuturesHistoryBadRequest builds a ChronosAPI service futuresHistory
// endpoint bad_request error.
func NewFuturesHistoryBadRequest(body *FuturesHistoryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesHistoryNotFound builds a ChronosAPI service futuresHistory
// endpoint not_found error.
func NewFuturesHistoryNotFound(body *FuturesHistoryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesHistoryInternal builds a ChronosAPI service futuresHistory
// endpoint internal error.
func NewFuturesHistoryInternal(body *FuturesHistoryInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesFillsHistoryFuturesFillEventOK builds a "ChronosAPI" service
// "futuresFillsHistory" endpoint result from a HTTP "OK" response.
func NewFuturesFillsHistoryFuturesFillEventOK(body []*FuturesFillEventResponse) []*chronosapi.FuturesFillEvent {
	v := make([]*chronosapi.FuturesFillEvent, len(body))
	for i, val := range body {
		v[i] = unmarshalFuturesFillEventResponseToChronosapiFuturesFillEvent(val)
	}
	return v
}

// NewFuturesFillsHistoryBadRequest builds a ChronosAPI service
// futuresFillsHistory endpoint bad_request error.
func NewFuturesFillsHistoryBadRequest(body *FuturesFillsHistoryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesFillsHistoryNotFound builds a ChronosAPI service
// futuresFillsHistory endpoint not_found error.
func NewFuturesFillsHistoryNotFound(body *FuturesFillsHistoryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesFillsHistoryInternal builds a ChronosAPI service
// futuresFillsHistory endpoint internal error.
func NewFuturesFillsHistoryInternal(body *FuturesFillsHistoryInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesMarketSummaryResponseOK builds a "ChronosAPI" service
// "futuresMarketSummary" endpoint result from a HTTP "OK" response.
func NewFuturesMarketSummaryResponseOK(body *FuturesMarketSummaryResponseBody) *chronosapi.FuturesMarketSummaryResponse {
	v := &chronosapi.FuturesMarketSummaryResponse{
		Open:   *body.Open,
		High:   *body.High,
		Low:    *body.Low,
		Volume: *body.Volume,
		Price:  *body.Price,
		Change: *body.Change,
	}

	return v
}

// NewFuturesMarketSummaryBadRequest builds a ChronosAPI service
// futuresMarketSummary endpoint bad_request error.
func NewFuturesMarketSummaryBadRequest(body *FuturesMarketSummaryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesMarketSummaryNotFound builds a ChronosAPI service
// futuresMarketSummary endpoint not_found error.
func NewFuturesMarketSummaryNotFound(body *FuturesMarketSummaryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewFuturesMarketSummaryInternal builds a ChronosAPI service
// futuresMarketSummary endpoint internal error.
func NewFuturesMarketSummaryInternal(body *FuturesMarketSummaryInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateSymbolInfoResponseBody runs the validations defined on
// SymbolInfoResponseBody
func ValidateSymbolInfoResponseBody(body *SymbolInfoResponseBody) (err error) {
	if body.S == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("s", "body"))
	}
	if body.Symbol == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("symbol", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency", "body"))
	}
	if body.ExchangeListed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exchange-listed", "body"))
	}
	if body.ExchangeTraded == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exchange-traded", "body"))
	}
	if body.Minmovement == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("minmovement", "body"))
	}
	if body.Pricescale == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pricescale", "body"))
	}
	if body.Timezone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timezone", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.SessionRegular == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("session-regular", "body"))
	}
	if body.S != nil {
		if !(*body.S == "ok" || *body.S == "error" || *body.S == "no_data") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.s", *body.S, []interface{}{"ok", "error", "no_data"}))
		}
	}
	for _, e := range body.Type {
		if !(e == "crypto") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type[*]", e, []interface{}{"crypto"}))
		}
	}
	for _, e := range body.SessionRegular {
		if !(e == "24x7") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.session-regular[*]", e, []interface{}{"24x7"}))
		}
	}
	for _, e := range body.BarSource {
		if !(e == "bid" || e == "ask" || e == "mid" || e == "trade") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.bar-source[*]", e, []interface{}{"bid", "ask", "mid", "trade"}))
		}
	}
	for _, e := range body.BarTransform {
		if !(e == "none" || e == "openprev" || e == "prevopen" || e == "open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.bar-transform[*]", e, []interface{}{"none", "openprev", "prevopen", "open"}))
		}
	}
	return
}

// ValidateHistoryResponseBody runs the validations defined on
// HistoryResponseBody
func ValidateHistoryResponseBody(body *HistoryResponseBody) (err error) {
	if body.S == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("s", "body"))
	}
	if body.T == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("t", "body"))
	}
	if body.O == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("o", "body"))
	}
	if body.H == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("h", "body"))
	}
	if body.L == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("l", "body"))
	}
	if body.C == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("c", "body"))
	}
	if body.V == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("v", "body"))
	}
	if body.S != nil {
		if !(*body.S == "ok" || *body.S == "error" || *body.S == "no_data") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.s", *body.S, []interface{}{"ok", "error", "no_data"}))
		}
	}
	return
}

// ValidateMarketSummaryResponseBody runs the validations defined on
// MarketSummaryResponseBody
func ValidateMarketSummaryResponseBody(body *MarketSummaryResponseBody) (err error) {
	if body.Open == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("open", "body"))
	}
	if body.High == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("high", "body"))
	}
	if body.Low == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("low", "body"))
	}
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Change == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("change", "body"))
	}
	return
}

// ValidateFuturesHistoryResponseBody runs the validations defined on
// FuturesHistoryResponseBody
func ValidateFuturesHistoryResponseBody(body *FuturesHistoryResponseBody) (err error) {
	if body.S == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("s", "body"))
	}
	if body.T == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("t", "body"))
	}
	if body.O == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("o", "body"))
	}
	if body.H == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("h", "body"))
	}
	if body.L == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("l", "body"))
	}
	if body.C == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("c", "body"))
	}
	if body.V == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("v", "body"))
	}
	if body.S != nil {
		if !(*body.S == "ok" || *body.S == "error" || *body.S == "no_data") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.s", *body.S, []interface{}{"ok", "error", "no_data"}))
		}
	}
	return
}

// ValidateFuturesMarketSummaryResponseBody runs the validations defined on
// FuturesMarketSummaryResponseBody
func ValidateFuturesMarketSummaryResponseBody(body *FuturesMarketSummaryResponseBody) (err error) {
	if body.Open == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("open", "body"))
	}
	if body.High == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("high", "body"))
	}
	if body.Low == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("low", "body"))
	}
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Change == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("change", "body"))
	}
	return
}

// ValidateSymbolInfoBadRequestResponseBody runs the validations defined on
// symbolInfo_bad_request_response_body
func ValidateSymbolInfoBadRequestResponseBody(body *SymbolInfoBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSymbolInfoNotFoundResponseBody runs the validations defined on
// symbolInfo_not_found_response_body
func ValidateSymbolInfoNotFoundResponseBody(body *SymbolInfoNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSymbolInfoInternalResponseBody runs the validations defined on
// symbolInfo_internal_response_body
func ValidateSymbolInfoInternalResponseBody(body *SymbolInfoInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateHistoryBadRequestResponseBody runs the validations defined on
// history_bad_request_response_body
func ValidateHistoryBadRequestResponseBody(body *HistoryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateHistoryNotFoundResponseBody runs the validations defined on
// history_not_found_response_body
func ValidateHistoryNotFoundResponseBody(body *HistoryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateHistoryInternalResponseBody runs the validations defined on
// history_internal_response_body
func ValidateHistoryInternalResponseBody(body *HistoryInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFillsHistoryBadRequestResponseBody runs the validations defined on
// fillsHistory_bad_request_response_body
func ValidateFillsHistoryBadRequestResponseBody(body *FillsHistoryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFillsHistoryNotFoundResponseBody runs the validations defined on
// fillsHistory_not_found_response_body
func ValidateFillsHistoryNotFoundResponseBody(body *FillsHistoryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFillsHistoryInternalResponseBody runs the validations defined on
// fillsHistory_internal_response_body
func ValidateFillsHistoryInternalResponseBody(body *FillsHistoryInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMarketSummaryBadRequestResponseBody runs the validations defined on
// marketSummary_bad_request_response_body
func ValidateMarketSummaryBadRequestResponseBody(body *MarketSummaryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMarketSummaryNotFoundResponseBody runs the validations defined on
// marketSummary_not_found_response_body
func ValidateMarketSummaryNotFoundResponseBody(body *MarketSummaryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMarketSummaryInternalResponseBody runs the validations defined on
// marketSummary_internal_response_body
func ValidateMarketSummaryInternalResponseBody(body *MarketSummaryInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesHistoryBadRequestResponseBody runs the validations defined on
// futuresHistory_bad_request_response_body
func ValidateFuturesHistoryBadRequestResponseBody(body *FuturesHistoryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesHistoryNotFoundResponseBody runs the validations defined on
// futuresHistory_not_found_response_body
func ValidateFuturesHistoryNotFoundResponseBody(body *FuturesHistoryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesHistoryInternalResponseBody runs the validations defined on
// futuresHistory_internal_response_body
func ValidateFuturesHistoryInternalResponseBody(body *FuturesHistoryInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesFillsHistoryBadRequestResponseBody runs the validations
// defined on futuresFillsHistory_bad_request_response_body
func ValidateFuturesFillsHistoryBadRequestResponseBody(body *FuturesFillsHistoryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesFillsHistoryNotFoundResponseBody runs the validations defined
// on futuresFillsHistory_not_found_response_body
func ValidateFuturesFillsHistoryNotFoundResponseBody(body *FuturesFillsHistoryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesFillsHistoryInternalResponseBody runs the validations defined
// on futuresFillsHistory_internal_response_body
func ValidateFuturesFillsHistoryInternalResponseBody(body *FuturesFillsHistoryInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesMarketSummaryBadRequestResponseBody runs the validations
// defined on futuresMarketSummary_bad_request_response_body
func ValidateFuturesMarketSummaryBadRequestResponseBody(body *FuturesMarketSummaryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesMarketSummaryNotFoundResponseBody runs the validations
// defined on futuresMarketSummary_not_found_response_body
func ValidateFuturesMarketSummaryNotFoundResponseBody(body *FuturesMarketSummaryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFuturesMarketSummaryInternalResponseBody runs the validations
// defined on futuresMarketSummary_internal_response_body
func ValidateFuturesMarketSummaryInternalResponseBody(body *FuturesMarketSummaryInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFillEventResponse runs the validations defined on FillEventResponse
func ValidateFillEventResponse(body *FillEventResponse) (err error) {
	if body.Side == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("side", "body"))
	}
	if body.Ts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ts", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	if body.Filled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filled", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Side != nil {
		if !(*body.Side == "buy" || *body.Side == "sell") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.side", *body.Side, []interface{}{"buy", "sell"}))
		}
	}
	if body.TxHash != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.txHash", *body.TxHash, "^0x[0-9a-fA-F]{64}$"))
	}
	if body.TxHash != nil {
		if utf8.RuneCountInString(*body.TxHash) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.txHash", *body.TxHash, utf8.RuneCountInString(*body.TxHash), 66, true))
		}
	}
	if body.TxHash != nil {
		if utf8.RuneCountInString(*body.TxHash) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.txHash", *body.TxHash, utf8.RuneCountInString(*body.TxHash), 66, false))
		}
	}
	return
}

// ValidateFuturesFillEventResponse runs the validations defined on
// FuturesFillEventResponse
func ValidateFuturesFillEventResponse(body *FuturesFillEventResponse) (err error) {
	if body.Side == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("side", "body"))
	}
	if body.Ts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ts", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	if body.Filled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filled", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Side != nil {
		if !(*body.Side == "buy" || *body.Side == "sell") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.side", *body.Side, []interface{}{"buy", "sell"}))
		}
	}
	if body.TxHash != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.txHash", *body.TxHash, "^0x[0-9a-fA-F]{64}$"))
	}
	if body.TxHash != nil {
		if utf8.RuneCountInString(*body.TxHash) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.txHash", *body.TxHash, utf8.RuneCountInString(*body.TxHash), 66, true))
		}
	}
	if body.TxHash != nil {
		if utf8.RuneCountInString(*body.TxHash) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.txHash", *body.TxHash, utf8.RuneCountInString(*body.TxHash), 66, false))
		}
	}
	return
}
