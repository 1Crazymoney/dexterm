// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RestAPI HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package client

import (
	"unicode/utf8"

	restapi "github.com/InjectiveLabs/dexterm/gen/rest_api"
	goa "goa.design/goa/v3/pkg"
)

// ListOrdersRequestBody is the type of the "RestAPI" service "listOrders"
// endpoint HTTP request body.
type ListOrdersRequestBody struct {
	// Filter by status of the order
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Filter by collection of the order
	Collection *string `form:"collection,omitempty" json:"collection,omitempty" xml:"collection,omitempty"`
	// Filter by trade pair hash
	TradePairHash *string `form:"tradePairHash,omitempty" json:"tradePairHash,omitempty" xml:"tradePairHash,omitempty"`
	// Enabled sort by VDF (1 = asc, -1 = desc)
	SortByVdf *int32 `form:"sortByVdf,omitempty" json:"sortByVdf,omitempty" xml:"sortByVdf,omitempty"`
	// Limits the amout of results by top N
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// ListTradePairsRequestBody is the type of the "RestAPI" service
// "listTradePairs" endpoint HTTP request body.
type ListTradePairsRequestBody struct {
	// Specify to include all trade pairs, suspended and active.
	All *bool `form:"all,omitempty" json:"all,omitempty" xml:"all,omitempty"`
}

// GetActiveOrderResponseBody is the type of the "RestAPI" service
// "getActiveOrder" endpoint HTTP response body.
type GetActiveOrderResponseBody struct {
	RLimitLimit     *string `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	RLimitRemaining *string `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	RLimitReset     *string `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Found active 0x order.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetArchiveOrderResponseBody is the type of the "RestAPI" service
// "getArchiveOrder" endpoint HTTP response body.
type GetArchiveOrderResponseBody struct {
	RLimitLimit     *string `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	RLimitRemaining *string `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	RLimitReset     *string `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Order item.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// ListOrdersResponseBody is the type of the "RestAPI" service "listOrders"
// endpoint HTTP response body.
type ListOrdersResponseBody struct {
	RLimitLimit     *string `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	RLimitRemaining *string `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	RLimitReset     *string `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Filtered orders.
	Orders []*OrderResponseBody `form:"orders,omitempty" json:"orders,omitempty" xml:"orders,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetTradePairResponseBody is the type of the "RestAPI" service "getTradePair"
// endpoint HTTP response body.
type GetTradePairResponseBody struct {
	RLimitLimit     *string `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	RLimitRemaining *string `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	RLimitReset     *string `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Found trade pair.
	TradePair *TradePairResponseBody `form:"tradePair,omitempty" json:"tradePair,omitempty" xml:"tradePair,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// ListTradePairsResponseBody is the type of the "RestAPI" service
// "listTradePairs" endpoint HTTP response body.
type ListTradePairsResponseBody struct {
	RLimitLimit     *string `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	RLimitRemaining *string `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	RLimitReset     *string `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Filtered trade pairs.
	TradePairs []*TradePairResponseBody `form:"tradePairs,omitempty" json:"tradePairs,omitempty" xml:"tradePairs,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetAccountResponseBody is the type of the "RestAPI" service "getAccount"
// endpoint HTTP response body.
type GetAccountResponseBody struct {
	RLimitLimit     *string `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	RLimitRemaining *string `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	RLimitReset     *string `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Found relayer account.
	Account *RelayerAccountResponseBody `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetOnlineAccountsResponseBody is the type of the "RestAPI" service
// "getOnlineAccounts" endpoint HTTP response body.
type GetOnlineAccountsResponseBody struct {
	RLimitLimit     *string `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	RLimitRemaining *string `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	RLimitReset     *string `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Filtered online relayer accounts.
	Accounts []*RelayerAccountResponseBody `form:"accounts,omitempty" json:"accounts,omitempty" xml:"accounts,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetActiveOrderNotFoundResponseBody is the type of the "RestAPI" service
// "getActiveOrder" endpoint HTTP response body for the "not_found" error.
type GetActiveOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActiveOrderInternalResponseBody is the type of the "RestAPI" service
// "getActiveOrder" endpoint HTTP response body for the "internal" error.
type GetActiveOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActiveOrderValidationErrorResponseBody is the type of the "RestAPI"
// service "getActiveOrder" endpoint HTTP response body for the
// "validation_error" error.
type GetActiveOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetArchiveOrderNotFoundResponseBody is the type of the "RestAPI" service
// "getArchiveOrder" endpoint HTTP response body for the "not_found" error.
type GetArchiveOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetArchiveOrderInternalResponseBody is the type of the "RestAPI" service
// "getArchiveOrder" endpoint HTTP response body for the "internal" error.
type GetArchiveOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetArchiveOrderValidationErrorResponseBody is the type of the "RestAPI"
// service "getArchiveOrder" endpoint HTTP response body for the
// "validation_error" error.
type GetArchiveOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// ListOrdersInternalResponseBody is the type of the "RestAPI" service
// "listOrders" endpoint HTTP response body for the "internal" error.
type ListOrdersInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersValidationErrorResponseBody is the type of the "RestAPI" service
// "listOrders" endpoint HTTP response body for the "validation_error" error.
type ListOrdersValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetTradePairNotFoundResponseBody is the type of the "RestAPI" service
// "getTradePair" endpoint HTTP response body for the "not_found" error.
type GetTradePairNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetTradePairInternalResponseBody is the type of the "RestAPI" service
// "getTradePair" endpoint HTTP response body for the "internal" error.
type GetTradePairInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetTradePairValidationErrorResponseBody is the type of the "RestAPI" service
// "getTradePair" endpoint HTTP response body for the "validation_error" error.
type GetTradePairValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// ListTradePairsInternalResponseBody is the type of the "RestAPI" service
// "listTradePairs" endpoint HTTP response body for the "internal" error.
type ListTradePairsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListTradePairsValidationErrorResponseBody is the type of the "RestAPI"
// service "listTradePairs" endpoint HTTP response body for the
// "validation_error" error.
type ListTradePairsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetAccountNotFoundResponseBody is the type of the "RestAPI" service
// "getAccount" endpoint HTTP response body for the "not_found" error.
type GetAccountNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountInternalResponseBody is the type of the "RestAPI" service
// "getAccount" endpoint HTTP response body for the "internal" error.
type GetAccountInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountValidationErrorResponseBody is the type of the "RestAPI" service
// "getAccount" endpoint HTTP response body for the "validation_error" error.
type GetAccountValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetOnlineAccountsInternalResponseBody is the type of the "RestAPI" service
// "getOnlineAccounts" endpoint HTTP response body for the "internal" error.
type GetOnlineAccountsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOnlineAccountsValidationErrorResponseBody is the type of the "RestAPI"
// service "getOnlineAccounts" endpoint HTTP response body for the
// "validation_error" error.
type GetOnlineAccountsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrderResponseBody is used to define fields on response body types.
type OrderResponseBody struct {
	// Specify chain ID.
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// Exchange v3 contract address.
	ExchangeAddress *string `form:"exchangeAddress,omitempty" json:"exchangeAddress,omitempty" xml:"exchangeAddress,omitempty"`
	// Address that created the order.
	MakerAddress *string `form:"makerAddress,omitempty" json:"makerAddress,omitempty" xml:"makerAddress,omitempty"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress *string `form:"takerAddress,omitempty" json:"takerAddress,omitempty" xml:"takerAddress,omitempty"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress *string `form:"feeRecipientAddress,omitempty" json:"feeRecipientAddress,omitempty" xml:"feeRecipientAddress,omitempty"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress *string `form:"senderAddress,omitempty" json:"senderAddress,omitempty" xml:"senderAddress,omitempty"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount *string `form:"makerAssetAmount,omitempty" json:"makerAssetAmount,omitempty" xml:"makerAssetAmount,omitempty"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount *string `form:"takerAssetAmount,omitempty" json:"takerAssetAmount,omitempty" xml:"takerAssetAmount,omitempty"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee *string `form:"makerFee,omitempty" json:"makerFee,omitempty" xml:"makerFee,omitempty"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee *string `form:"takerFee,omitempty" json:"takerFee,omitempty" xml:"takerFee,omitempty"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds *string `form:"expirationTimeSeconds,omitempty" json:"expirationTimeSeconds,omitempty" xml:"expirationTimeSeconds,omitempty"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt *string `form:"salt,omitempty" json:"salt,omitempty" xml:"salt,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData *string `form:"makerAssetData,omitempty" json:"makerAssetData,omitempty" xml:"makerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData *string `form:"takerAssetData,omitempty" json:"takerAssetData,omitempty" xml:"takerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
	// Order signature.
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// RESTValidationErrorResponseBody is used to define fields on response body
// types.
type RESTValidationErrorResponseBody struct {
	// Validation error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Validation error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Field name
	Field *string `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
}

// TradePairResponseBody is used to define fields on response body types.
type TradePairResponseBody struct {
	// A name of the pair in format AAA/BBB, where AAA - maker's asset, BBB -
	// taker's asset.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData *string `form:"makerAssetData,omitempty" json:"makerAssetData,omitempty" xml:"makerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData *string `form:"takerAssetData,omitempty" json:"takerAssetData,omitempty" xml:"takerAssetData,omitempty"`
	// Hash of both asset data, to identify the trading pair in store.
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
	// If false, then the pair is suspended and trades cannot be made.
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
}

// RelayerAccountResponseBody is used to define fields on response body types.
type RelayerAccountResponseBody struct {
	// Cosmos address of the relayer account.
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Public key of the relayer account, as hex string.
	PublicKey *string `form:"publicKey,omitempty" json:"publicKey,omitempty" xml:"publicKey,omitempty"`
	// Timestamp in UNIX seconds of the last time seen.
	LastSeen *int64 `form:"lastSeen,omitempty" json:"lastSeen,omitempty" xml:"lastSeen,omitempty"`
	// Last logic version seen.
	LastVersion *string `form:"lastVersion,omitempty" json:"lastVersion,omitempty" xml:"lastVersion,omitempty"`
	// A flag of liveness status of the account. Must be considered with lastSeen
	// timestamp.
	IsOnline *bool `form:"isOnline,omitempty" json:"isOnline,omitempty" xml:"isOnline,omitempty"`
}

// NewListOrdersRequestBody builds the HTTP request body from the payload of
// the "listOrders" endpoint of the "RestAPI" service.
func NewListOrdersRequestBody(p *restapi.ListOrdersPayload) *ListOrdersRequestBody {
	body := &ListOrdersRequestBody{
		Status:        p.Status,
		Collection:    p.Collection,
		TradePairHash: p.TradePairHash,
		SortByVdf:     p.SortByVdf,
		Limit:         p.Limit,
	}
	return body
}

// NewListTradePairsRequestBody builds the HTTP request body from the payload
// of the "listTradePairs" endpoint of the "RestAPI" service.
func NewListTradePairsRequestBody(p *restapi.ListTradePairsPayload) *ListTradePairsRequestBody {
	body := &ListTradePairsRequestBody{
		All: p.All,
	}
	return body
}

// NewGetActiveOrderResultOK builds a "RestAPI" service "getActiveOrder"
// endpoint result from a HTTP "OK" response.
func NewGetActiveOrderResultOK(body *GetActiveOrderResponseBody) *restapi.GetActiveOrderResult {
	v := &restapi.GetActiveOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Order != nil {
		v.Order = unmarshalOrderResponseBodyToRestapiOrder(body.Order)
	}

	return v
}

// NewGetActiveOrderNotFound builds a RestAPI service getActiveOrder endpoint
// not_found error.
func NewGetActiveOrderNotFound(body *GetActiveOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetActiveOrderInternal builds a RestAPI service getActiveOrder endpoint
// internal error.
func NewGetActiveOrderInternal(body *GetActiveOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetActiveOrderValidationError builds a RestAPI service getActiveOrder
// endpoint validation_error error.
func NewGetActiveOrderValidationError(body *GetActiveOrderValidationErrorResponseBody) *restapi.RESTValidationErrorResponse {
	v := &restapi.RESTValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*restapi.RESTValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalRESTValidationErrorResponseBodyToRestapiRESTValidationError(val)
		}
	}

	return v
}

// NewGetArchiveOrderResultOK builds a "RestAPI" service "getArchiveOrder"
// endpoint result from a HTTP "OK" response.
func NewGetArchiveOrderResultOK(body *GetArchiveOrderResponseBody) *restapi.GetArchiveOrderResult {
	v := &restapi.GetArchiveOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Order != nil {
		v.Order = unmarshalOrderResponseBodyToRestapiOrder(body.Order)
	}

	return v
}

// NewGetArchiveOrderNotFound builds a RestAPI service getArchiveOrder endpoint
// not_found error.
func NewGetArchiveOrderNotFound(body *GetArchiveOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetArchiveOrderInternal builds a RestAPI service getArchiveOrder endpoint
// internal error.
func NewGetArchiveOrderInternal(body *GetArchiveOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetArchiveOrderValidationError builds a RestAPI service getArchiveOrder
// endpoint validation_error error.
func NewGetArchiveOrderValidationError(body *GetArchiveOrderValidationErrorResponseBody) *restapi.RESTValidationErrorResponse {
	v := &restapi.RESTValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*restapi.RESTValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalRESTValidationErrorResponseBodyToRestapiRESTValidationError(val)
		}
	}

	return v
}

// NewListOrdersResultOK builds a "RestAPI" service "listOrders" endpoint
// result from a HTTP "OK" response.
func NewListOrdersResultOK(body *ListOrdersResponseBody) *restapi.ListOrdersResult {
	v := &restapi.ListOrdersResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Orders != nil {
		v.Orders = make([]*restapi.Order, len(body.Orders))
		for i, val := range body.Orders {
			v.Orders[i] = unmarshalOrderResponseBodyToRestapiOrder(val)
		}
	}

	return v
}

// NewListOrdersInternal builds a RestAPI service listOrders endpoint internal
// error.
func NewListOrdersInternal(body *ListOrdersInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersValidationError builds a RestAPI service listOrders endpoint
// validation_error error.
func NewListOrdersValidationError(body *ListOrdersValidationErrorResponseBody) *restapi.RESTValidationErrorResponse {
	v := &restapi.RESTValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*restapi.RESTValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalRESTValidationErrorResponseBodyToRestapiRESTValidationError(val)
		}
	}

	return v
}

// NewGetTradePairResultOK builds a "RestAPI" service "getTradePair" endpoint
// result from a HTTP "OK" response.
func NewGetTradePairResultOK(body *GetTradePairResponseBody) *restapi.GetTradePairResult {
	v := &restapi.GetTradePairResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.TradePair != nil {
		v.TradePair = unmarshalTradePairResponseBodyToRestapiTradePair(body.TradePair)
	}

	return v
}

// NewGetTradePairNotFound builds a RestAPI service getTradePair endpoint
// not_found error.
func NewGetTradePairNotFound(body *GetTradePairNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetTradePairInternal builds a RestAPI service getTradePair endpoint
// internal error.
func NewGetTradePairInternal(body *GetTradePairInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetTradePairValidationError builds a RestAPI service getTradePair
// endpoint validation_error error.
func NewGetTradePairValidationError(body *GetTradePairValidationErrorResponseBody) *restapi.RESTValidationErrorResponse {
	v := &restapi.RESTValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*restapi.RESTValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalRESTValidationErrorResponseBodyToRestapiRESTValidationError(val)
		}
	}

	return v
}

// NewListTradePairsResultOK builds a "RestAPI" service "listTradePairs"
// endpoint result from a HTTP "OK" response.
func NewListTradePairsResultOK(body *ListTradePairsResponseBody) *restapi.ListTradePairsResult {
	v := &restapi.ListTradePairsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.TradePairs != nil {
		v.TradePairs = make([]*restapi.TradePair, len(body.TradePairs))
		for i, val := range body.TradePairs {
			v.TradePairs[i] = unmarshalTradePairResponseBodyToRestapiTradePair(val)
		}
	}

	return v
}

// NewListTradePairsInternal builds a RestAPI service listTradePairs endpoint
// internal error.
func NewListTradePairsInternal(body *ListTradePairsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListTradePairsValidationError builds a RestAPI service listTradePairs
// endpoint validation_error error.
func NewListTradePairsValidationError(body *ListTradePairsValidationErrorResponseBody) *restapi.RESTValidationErrorResponse {
	v := &restapi.RESTValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*restapi.RESTValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalRESTValidationErrorResponseBodyToRestapiRESTValidationError(val)
		}
	}

	return v
}

// NewGetAccountResultOK builds a "RestAPI" service "getAccount" endpoint
// result from a HTTP "OK" response.
func NewGetAccountResultOK(body *GetAccountResponseBody) *restapi.GetAccountResult {
	v := &restapi.GetAccountResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Account != nil {
		v.Account = unmarshalRelayerAccountResponseBodyToRestapiRelayerAccount(body.Account)
	}

	return v
}

// NewGetAccountNotFound builds a RestAPI service getAccount endpoint not_found
// error.
func NewGetAccountNotFound(body *GetAccountNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAccountInternal builds a RestAPI service getAccount endpoint internal
// error.
func NewGetAccountInternal(body *GetAccountInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAccountValidationError builds a RestAPI service getAccount endpoint
// validation_error error.
func NewGetAccountValidationError(body *GetAccountValidationErrorResponseBody) *restapi.RESTValidationErrorResponse {
	v := &restapi.RESTValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*restapi.RESTValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalRESTValidationErrorResponseBodyToRestapiRESTValidationError(val)
		}
	}

	return v
}

// NewGetOnlineAccountsResultOK builds a "RestAPI" service "getOnlineAccounts"
// endpoint result from a HTTP "OK" response.
func NewGetOnlineAccountsResultOK(body *GetOnlineAccountsResponseBody) *restapi.GetOnlineAccountsResult {
	v := &restapi.GetOnlineAccountsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Accounts != nil {
		v.Accounts = make([]*restapi.RelayerAccount, len(body.Accounts))
		for i, val := range body.Accounts {
			v.Accounts[i] = unmarshalRelayerAccountResponseBodyToRestapiRelayerAccount(val)
		}
	}

	return v
}

// NewGetOnlineAccountsInternal builds a RestAPI service getOnlineAccounts
// endpoint internal error.
func NewGetOnlineAccountsInternal(body *GetOnlineAccountsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetOnlineAccountsValidationError builds a RestAPI service
// getOnlineAccounts endpoint validation_error error.
func NewGetOnlineAccountsValidationError(body *GetOnlineAccountsValidationErrorResponseBody) *restapi.RESTValidationErrorResponse {
	v := &restapi.RESTValidationErrorResponse{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*restapi.RESTValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalRESTValidationErrorResponseBodyToRestapiRESTValidationError(val)
		}
	}

	return v
}

// ValidateGetActiveOrderResponseBody runs the validations defined on
// GetActiveOrderResponseBody
func ValidateGetActiveOrderResponseBody(body *GetActiveOrderResponseBody) (err error) {
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetArchiveOrderResponseBody runs the validations defined on
// GetArchiveOrderResponseBody
func ValidateGetArchiveOrderResponseBody(body *GetArchiveOrderResponseBody) (err error) {
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListOrdersResponseBody runs the validations defined on
// ListOrdersResponseBody
func ValidateListOrdersResponseBody(body *ListOrdersResponseBody) (err error) {
	for _, e := range body.Orders {
		if e != nil {
			if err2 := ValidateOrderResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetTradePairResponseBody runs the validations defined on
// GetTradePairResponseBody
func ValidateGetTradePairResponseBody(body *GetTradePairResponseBody) (err error) {
	if body.TradePair != nil {
		if err2 := ValidateTradePairResponseBody(body.TradePair); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListTradePairsResponseBody runs the validations defined on
// ListTradePairsResponseBody
func ValidateListTradePairsResponseBody(body *ListTradePairsResponseBody) (err error) {
	for _, e := range body.TradePairs {
		if e != nil {
			if err2 := ValidateTradePairResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAccountResponseBody runs the validations defined on
// GetAccountResponseBody
func ValidateGetAccountResponseBody(body *GetAccountResponseBody) (err error) {
	if body.Account != nil {
		if err2 := ValidateRelayerAccountResponseBody(body.Account); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetOnlineAccountsResponseBody runs the validations defined on
// GetOnlineAccountsResponseBody
func ValidateGetOnlineAccountsResponseBody(body *GetOnlineAccountsResponseBody) (err error) {
	for _, e := range body.Accounts {
		if e != nil {
			if err2 := ValidateRelayerAccountResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetActiveOrderNotFoundResponseBody runs the validations defined on
// getActiveOrder_not_found_response_body
func ValidateGetActiveOrderNotFoundResponseBody(body *GetActiveOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActiveOrderInternalResponseBody runs the validations defined on
// getActiveOrder_internal_response_body
func ValidateGetActiveOrderInternalResponseBody(body *GetActiveOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActiveOrderValidationErrorResponseBody runs the validations
// defined on getActiveOrder_validation_error_response_body
func ValidateGetActiveOrderValidationErrorResponseBody(body *GetActiveOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateRESTValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetArchiveOrderNotFoundResponseBody runs the validations defined on
// getArchiveOrder_not_found_response_body
func ValidateGetArchiveOrderNotFoundResponseBody(body *GetArchiveOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetArchiveOrderInternalResponseBody runs the validations defined on
// getArchiveOrder_internal_response_body
func ValidateGetArchiveOrderInternalResponseBody(body *GetArchiveOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetArchiveOrderValidationErrorResponseBody runs the validations
// defined on getArchiveOrder_validation_error_response_body
func ValidateGetArchiveOrderValidationErrorResponseBody(body *GetArchiveOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateRESTValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListOrdersInternalResponseBody runs the validations defined on
// listOrders_internal_response_body
func ValidateListOrdersInternalResponseBody(body *ListOrdersInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersValidationErrorResponseBody runs the validations defined
// on listOrders_validation_error_response_body
func ValidateListOrdersValidationErrorResponseBody(body *ListOrdersValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateRESTValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetTradePairNotFoundResponseBody runs the validations defined on
// getTradePair_not_found_response_body
func ValidateGetTradePairNotFoundResponseBody(body *GetTradePairNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetTradePairInternalResponseBody runs the validations defined on
// getTradePair_internal_response_body
func ValidateGetTradePairInternalResponseBody(body *GetTradePairInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetTradePairValidationErrorResponseBody runs the validations defined
// on getTradePair_validation_error_response_body
func ValidateGetTradePairValidationErrorResponseBody(body *GetTradePairValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateRESTValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListTradePairsInternalResponseBody runs the validations defined on
// listTradePairs_internal_response_body
func ValidateListTradePairsInternalResponseBody(body *ListTradePairsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListTradePairsValidationErrorResponseBody runs the validations
// defined on listTradePairs_validation_error_response_body
func ValidateListTradePairsValidationErrorResponseBody(body *ListTradePairsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateRESTValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAccountNotFoundResponseBody runs the validations defined on
// getAccount_not_found_response_body
func ValidateGetAccountNotFoundResponseBody(body *GetAccountNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountInternalResponseBody runs the validations defined on
// getAccount_internal_response_body
func ValidateGetAccountInternalResponseBody(body *GetAccountInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountValidationErrorResponseBody runs the validations defined
// on getAccount_validation_error_response_body
func ValidateGetAccountValidationErrorResponseBody(body *GetAccountValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateRESTValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetOnlineAccountsInternalResponseBody runs the validations defined
// on getOnlineAccounts_internal_response_body
func ValidateGetOnlineAccountsInternalResponseBody(body *GetOnlineAccountsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOnlineAccountsValidationErrorResponseBody runs the validations
// defined on getOnlineAccounts_validation_error_response_body
func ValidateGetOnlineAccountsValidationErrorResponseBody(body *GetOnlineAccountsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateRESTValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderResponseBody runs the validations defined on OrderResponseBody
func ValidateOrderResponseBody(body *OrderResponseBody) (err error) {
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	if body.ExchangeAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exchangeAddress", "body"))
	}
	if body.MakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAddress", "body"))
	}
	if body.TakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAddress", "body"))
	}
	if body.FeeRecipientAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feeRecipientAddress", "body"))
	}
	if body.SenderAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("senderAddress", "body"))
	}
	if body.MakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetAmount", "body"))
	}
	if body.TakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetAmount", "body"))
	}
	if body.MakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFee", "body"))
	}
	if body.TakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFee", "body"))
	}
	if body.ExpirationTimeSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expirationTimeSeconds", "body"))
	}
	if body.Salt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("salt", "body"))
	}
	if body.MakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetData", "body"))
	}
	if body.TakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetData", "body"))
	}
	if body.MakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFeeAssetData", "body"))
	}
	if body.TakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFeeAssetData", "body"))
	}
	if body.Signature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("signature", "body"))
	}
	if body.ChainID != nil {
		if !(*body.ChainID == 1 || *body.ChainID == 42 || *body.ChainID == 3 || *body.ChainID == 4 || *body.ChainID == 1337) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.chainId", *body.ChainID, []interface{}{1, 42, 3, 4, 1337}))
		}
	}
	if body.ExchangeAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.exchangeAddress", *body.ExchangeAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, true))
		}
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, false))
		}
	}
	if body.MakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAddress", *body.MakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, true))
		}
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, false))
		}
	}
	if body.TakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAddress", *body.TakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, true))
		}
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, false))
		}
	}
	if body.FeeRecipientAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", *body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, true))
		}
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, false))
		}
	}
	if body.SenderAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", *body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, true))
		}
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, false))
		}
	}
	if body.MakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetAmount", *body.MakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.MakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetAmount", *body.MakerAssetAmount, utf8.RuneCountInString(*body.MakerAssetAmount), 100, false))
		}
	}
	if body.TakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetAmount", *body.TakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.TakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetAmount", *body.TakerAssetAmount, utf8.RuneCountInString(*body.TakerAssetAmount), 100, false))
		}
	}
	if body.MakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", *body.MakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerFee != nil {
		if utf8.RuneCountInString(*body.MakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", *body.MakerFee, utf8.RuneCountInString(*body.MakerFee), 100, false))
		}
	}
	if body.TakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", *body.TakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerFee != nil {
		if utf8.RuneCountInString(*body.TakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", *body.TakerFee, utf8.RuneCountInString(*body.TakerFee), 100, false))
		}
	}
	if body.ExpirationTimeSeconds != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, "^\\d+(\\.\\d+)?$"))
	}
	if body.ExpirationTimeSeconds != nil {
		if utf8.RuneCountInString(*body.ExpirationTimeSeconds) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, utf8.RuneCountInString(*body.ExpirationTimeSeconds), 100, false))
		}
	}
	if body.Salt != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.salt", *body.Salt, "^\\d+(\\.\\d+)?$"))
	}
	if body.Salt != nil {
		if utf8.RuneCountInString(*body.Salt) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.salt", *body.Salt, utf8.RuneCountInString(*body.Salt), 100, false))
		}
	}
	if body.MakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", *body.MakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, true))
		}
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, false))
		}
	}
	if body.TakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", *body.TakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, true))
		}
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, false))
		}
	}
	if body.MakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", *body.MakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, true))
		}
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, false))
		}
	}
	if body.TakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", *body.TakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, true))
		}
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, false))
		}
	}
	if body.Signature != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.signature", *body.Signature, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	return
}

// ValidateRESTValidationErrorResponseBody runs the validations defined on
// RESTValidationErrorResponseBody
func ValidateRESTValidationErrorResponseBody(body *RESTValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 1000 || *body.Code == 1001 || *body.Code == 1002 || *body.Code == 1003 || *body.Code == 1004 || *body.Code == 1005 || *body.Code == 1006) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{1000, 1001, 1002, 1003, 1004, 1005, 1006}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Required field" || *body.Reason == "Incorrect format" || *body.Reason == "Invalid address" || *body.Reason == "Address not supported" || *body.Reason == "Value out of range" || *body.Reason == "Invalid signature or hash" || *body.Reason == "Unsupported option") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Required field", "Incorrect format", "Invalid address", "Address not supported", "Value out of range", "Invalid signature or hash", "Unsupported option"}))
		}
	}
	return
}

// ValidateTradePairResponseBody runs the validations defined on
// TradePairResponseBody
func ValidateTradePairResponseBody(body *TradePairResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetData", "body"))
	}
	if body.TakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetData", "body"))
	}
	if body.Hash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hash", "body"))
	}
	if body.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "body"))
	}
	if body.MakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", *body.MakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, true))
		}
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, false))
		}
	}
	if body.TakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", *body.TakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, true))
		}
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, false))
		}
	}
	if body.Hash != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.hash", *body.Hash, "^0x[0-9a-fA-F]{64}$"))
	}
	if body.Hash != nil {
		if utf8.RuneCountInString(*body.Hash) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.hash", *body.Hash, utf8.RuneCountInString(*body.Hash), 66, true))
		}
	}
	if body.Hash != nil {
		if utf8.RuneCountInString(*body.Hash) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.hash", *body.Hash, utf8.RuneCountInString(*body.Hash), 66, false))
		}
	}
	return
}

// ValidateRelayerAccountResponseBody runs the validations defined on
// RelayerAccountResponseBody
func ValidateRelayerAccountResponseBody(body *RelayerAccountResponseBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.PublicKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publicKey", "body"))
	}
	if body.LastSeen == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastSeen", "body"))
	}
	if body.LastVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastVersion", "body"))
	}
	if body.IsOnline == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isOnline", "body"))
	}
	if body.Address != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.address", *body.Address, "^cosmos1[0-9a-zA-Z]{38}$"))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 45, true))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 45, false))
		}
	}
	if body.PublicKey != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.publicKey", *body.PublicKey, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	return
}
