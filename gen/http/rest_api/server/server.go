// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RestAPI HTTP server
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"context"
	"net/http"

	restapi "github.com/InjectiveLabs/injective-core/api/gen/rest_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the RestAPI service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	GetActiveOrder        http.Handler
	GetArchiveOrder       http.Handler
	ListOrders            http.Handler
	GetTradePair          http.Handler
	ListTradePairs        http.Handler
	ListDerivativeMarkets http.Handler
	GetAccount            http.Handler
	GetOnlineAccounts     http.Handler
	CORS                  http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the RestAPI service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *restapi.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetActiveOrder", "GET", "/api/rest/getActiveOrder"},
			{"GetArchiveOrder", "GET", "/api/rest/getArchiveOrder"},
			{"ListOrders", "POST", "/api/rest/listOrders"},
			{"GetTradePair", "GET", "/api/rest/getTradePair"},
			{"ListTradePairs", "POST", "/api/rest/listTradePairs"},
			{"ListDerivativeMarkets", "GET", "/api/rest/listDerivativeMarkets"},
			{"GetAccount", "GET", "/api/rest/getAccount"},
			{"GetOnlineAccounts", "GET", "/api/rest/getOnlineAccounts"},
			{"CORS", "OPTIONS", "/api/rest/getActiveOrder"},
			{"CORS", "OPTIONS", "/api/rest/getArchiveOrder"},
			{"CORS", "OPTIONS", "/api/rest/listOrders"},
			{"CORS", "OPTIONS", "/api/rest/getTradePair"},
			{"CORS", "OPTIONS", "/api/rest/listTradePairs"},
			{"CORS", "OPTIONS", "/api/rest/listDerivativeMarkets"},
			{"CORS", "OPTIONS", "/api/rest/getAccount"},
			{"CORS", "OPTIONS", "/api/rest/getOnlineAccounts"},
		},
		GetActiveOrder:        NewGetActiveOrderHandler(e.GetActiveOrder, mux, decoder, encoder, errhandler, formatter),
		GetArchiveOrder:       NewGetArchiveOrderHandler(e.GetArchiveOrder, mux, decoder, encoder, errhandler, formatter),
		ListOrders:            NewListOrdersHandler(e.ListOrders, mux, decoder, encoder, errhandler, formatter),
		GetTradePair:          NewGetTradePairHandler(e.GetTradePair, mux, decoder, encoder, errhandler, formatter),
		ListTradePairs:        NewListTradePairsHandler(e.ListTradePairs, mux, decoder, encoder, errhandler, formatter),
		ListDerivativeMarkets: NewListDerivativeMarketsHandler(e.ListDerivativeMarkets, mux, decoder, encoder, errhandler, formatter),
		GetAccount:            NewGetAccountHandler(e.GetAccount, mux, decoder, encoder, errhandler, formatter),
		GetOnlineAccounts:     NewGetOnlineAccountsHandler(e.GetOnlineAccounts, mux, decoder, encoder, errhandler, formatter),
		CORS:                  NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "RestAPI" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetActiveOrder = m(s.GetActiveOrder)
	s.GetArchiveOrder = m(s.GetArchiveOrder)
	s.ListOrders = m(s.ListOrders)
	s.GetTradePair = m(s.GetTradePair)
	s.ListTradePairs = m(s.ListTradePairs)
	s.ListDerivativeMarkets = m(s.ListDerivativeMarkets)
	s.GetAccount = m(s.GetAccount)
	s.GetOnlineAccounts = m(s.GetOnlineAccounts)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the RestAPI endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetActiveOrderHandler(mux, h.GetActiveOrder)
	MountGetArchiveOrderHandler(mux, h.GetArchiveOrder)
	MountListOrdersHandler(mux, h.ListOrders)
	MountGetTradePairHandler(mux, h.GetTradePair)
	MountListTradePairsHandler(mux, h.ListTradePairs)
	MountListDerivativeMarketsHandler(mux, h.ListDerivativeMarkets)
	MountGetAccountHandler(mux, h.GetAccount)
	MountGetOnlineAccountsHandler(mux, h.GetOnlineAccounts)
	MountCORSHandler(mux, h.CORS)
}

// MountGetActiveOrderHandler configures the mux to serve the "RestAPI" service
// "getActiveOrder" endpoint.
func MountGetActiveOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/rest/getActiveOrder", f)
}

// NewGetActiveOrderHandler creates a HTTP handler which loads the HTTP request
// and calls the "RestAPI" service "getActiveOrder" endpoint.
func NewGetActiveOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetActiveOrderRequest(mux, decoder)
		encodeResponse = EncodeGetActiveOrderResponse(encoder)
		encodeError    = EncodeGetActiveOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getActiveOrder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetArchiveOrderHandler configures the mux to serve the "RestAPI"
// service "getArchiveOrder" endpoint.
func MountGetArchiveOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/rest/getArchiveOrder", f)
}

// NewGetArchiveOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "RestAPI" service "getArchiveOrder" endpoint.
func NewGetArchiveOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetArchiveOrderRequest(mux, decoder)
		encodeResponse = EncodeGetArchiveOrderResponse(encoder)
		encodeError    = EncodeGetArchiveOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getArchiveOrder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListOrdersHandler configures the mux to serve the "RestAPI" service
// "listOrders" endpoint.
func MountListOrdersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/rest/listOrders", f)
}

// NewListOrdersHandler creates a HTTP handler which loads the HTTP request and
// calls the "RestAPI" service "listOrders" endpoint.
func NewListOrdersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListOrdersRequest(mux, decoder)
		encodeResponse = EncodeListOrdersResponse(encoder)
		encodeError    = EncodeListOrdersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listOrders")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTradePairHandler configures the mux to serve the "RestAPI" service
// "getTradePair" endpoint.
func MountGetTradePairHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/rest/getTradePair", f)
}

// NewGetTradePairHandler creates a HTTP handler which loads the HTTP request
// and calls the "RestAPI" service "getTradePair" endpoint.
func NewGetTradePairHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTradePairRequest(mux, decoder)
		encodeResponse = EncodeGetTradePairResponse(encoder)
		encodeError    = EncodeGetTradePairError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getTradePair")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListTradePairsHandler configures the mux to serve the "RestAPI" service
// "listTradePairs" endpoint.
func MountListTradePairsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/rest/listTradePairs", f)
}

// NewListTradePairsHandler creates a HTTP handler which loads the HTTP request
// and calls the "RestAPI" service "listTradePairs" endpoint.
func NewListTradePairsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListTradePairsRequest(mux, decoder)
		encodeResponse = EncodeListTradePairsResponse(encoder)
		encodeError    = EncodeListTradePairsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listTradePairs")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListDerivativeMarketsHandler configures the mux to serve the "RestAPI"
// service "listDerivativeMarkets" endpoint.
func MountListDerivativeMarketsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/rest/listDerivativeMarkets", f)
}

// NewListDerivativeMarketsHandler creates a HTTP handler which loads the HTTP
// request and calls the "RestAPI" service "listDerivativeMarkets" endpoint.
func NewListDerivativeMarketsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListDerivativeMarketsRequest(mux, decoder)
		encodeResponse = EncodeListDerivativeMarketsResponse(encoder)
		encodeError    = EncodeListDerivativeMarketsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listDerivativeMarkets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAccountHandler configures the mux to serve the "RestAPI" service
// "getAccount" endpoint.
func MountGetAccountHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/rest/getAccount", f)
}

// NewGetAccountHandler creates a HTTP handler which loads the HTTP request and
// calls the "RestAPI" service "getAccount" endpoint.
func NewGetAccountHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAccountRequest(mux, decoder)
		encodeResponse = EncodeGetAccountResponse(encoder)
		encodeError    = EncodeGetAccountError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAccount")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOnlineAccountsHandler configures the mux to serve the "RestAPI"
// service "getOnlineAccounts" endpoint.
func MountGetOnlineAccountsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleRestAPIOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/rest/getOnlineAccounts", f)
}

// NewGetOnlineAccountsHandler creates a HTTP handler which loads the HTTP
// request and calls the "RestAPI" service "getOnlineAccounts" endpoint.
func NewGetOnlineAccountsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOnlineAccountsRequest(mux, decoder)
		encodeResponse = EncodeGetOnlineAccountsResponse(encoder)
		encodeError    = EncodeGetOnlineAccountsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getOnlineAccounts")
		ctx = context.WithValue(ctx, goa.ServiceKey, "RestAPI")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service RestAPI.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleRestAPIOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/api/rest/getActiveOrder", f)
	mux.Handle("OPTIONS", "/api/rest/getArchiveOrder", f)
	mux.Handle("OPTIONS", "/api/rest/listOrders", f)
	mux.Handle("OPTIONS", "/api/rest/getTradePair", f)
	mux.Handle("OPTIONS", "/api/rest/listTradePairs", f)
	mux.Handle("OPTIONS", "/api/rest/listDerivativeMarkets", f)
	mux.Handle("OPTIONS", "/api/rest/getAccount", f)
	mux.Handle("OPTIONS", "/api/rest/getOnlineAccounts", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleRestAPIOrigin applies the CORS response headers corresponding to the
// origin for the service RestAPI.
func handleRestAPIOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST")
				w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
