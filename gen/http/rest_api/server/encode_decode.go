// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RestAPI HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"unicode/utf8"

	restapi "github.com/InjectiveLabs/injective-core/api/gen/rest_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetActiveOrderResponse returns an encoder for responses returned by
// the RestAPI getActiveOrder endpoint.
func EncodeGetActiveOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.GetActiveOrderResult)
		enc := encoder(ctx, w)
		body := NewGetActiveOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetActiveOrderRequest returns a decoder for requests sent to the
// RestAPI getActiveOrder endpoint.
func DecodeGetActiveOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orderHash string
			err       error
		)
		orderHash = r.URL.Query().Get("orderHash")
		if orderHash == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("orderHash", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("orderHash", orderHash, "^0x[0-9a-fA-F]{64}$"))
		if utf8.RuneCountInString(orderHash) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orderHash", orderHash, utf8.RuneCountInString(orderHash), 66, true))
		}
		if utf8.RuneCountInString(orderHash) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orderHash", orderHash, utf8.RuneCountInString(orderHash), 66, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetActiveOrderPayload(orderHash)

		return payload, nil
	}
}

// EncodeGetActiveOrderError returns an encoder for errors returned by the
// getActiveOrder RestAPI endpoint.
func EncodeGetActiveOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetActiveOrderNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetActiveOrderInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetActiveOrderValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetArchiveOrderResponse returns an encoder for responses returned by
// the RestAPI getArchiveOrder endpoint.
func EncodeGetArchiveOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.GetArchiveOrderResult)
		enc := encoder(ctx, w)
		body := NewGetArchiveOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetArchiveOrderRequest returns a decoder for requests sent to the
// RestAPI getArchiveOrder endpoint.
func DecodeGetArchiveOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orderHash string
			err       error
		)
		orderHash = r.URL.Query().Get("orderHash")
		if orderHash == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("orderHash", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("orderHash", orderHash, "^0x[0-9a-fA-F]{64}$"))
		if utf8.RuneCountInString(orderHash) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orderHash", orderHash, utf8.RuneCountInString(orderHash), 66, true))
		}
		if utf8.RuneCountInString(orderHash) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orderHash", orderHash, utf8.RuneCountInString(orderHash), 66, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetArchiveOrderPayload(orderHash)

		return payload, nil
	}
}

// EncodeGetArchiveOrderError returns an encoder for errors returned by the
// getArchiveOrder RestAPI endpoint.
func EncodeGetArchiveOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetArchiveOrderNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetArchiveOrderInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetArchiveOrderValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListOrdersResponse returns an encoder for responses returned by the
// RestAPI listOrders endpoint.
func EncodeListOrdersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.ListOrdersResult)
		enc := encoder(ctx, w)
		body := NewListOrdersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListOrdersRequest returns a decoder for requests sent to the RestAPI
// listOrders endpoint.
func DecodeListOrdersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListOrdersRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateListOrdersRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewListOrdersPayload(&body)

		return payload, nil
	}
}

// EncodeListOrdersError returns an encoder for errors returned by the
// listOrders RestAPI endpoint.
func EncodeListOrdersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetTradePairResponse returns an encoder for responses returned by the
// RestAPI getTradePair endpoint.
func EncodeGetTradePairResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.GetTradePairResult)
		enc := encoder(ctx, w)
		body := NewGetTradePairResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTradePairRequest returns a decoder for requests sent to the RestAPI
// getTradePair endpoint.
func DecodeGetTradePairRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			name           *string
			hash           *string
			makerAssetData *string
			takerAssetData *string
			err            error
		)
		nameRaw := r.URL.Query().Get("name")
		if nameRaw != "" {
			name = &nameRaw
		}
		hashRaw := r.URL.Query().Get("hash")
		if hashRaw != "" {
			hash = &hashRaw
		}
		if hash != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("hash", *hash, "^0x[0-9a-fA-F]{64}$"))
		}
		if hash != nil {
			if utf8.RuneCountInString(*hash) < 66 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("hash", *hash, utf8.RuneCountInString(*hash), 66, true))
			}
		}
		if hash != nil {
			if utf8.RuneCountInString(*hash) > 66 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("hash", *hash, utf8.RuneCountInString(*hash), 66, false))
			}
		}
		makerAssetDataRaw := r.URL.Query().Get("makerAssetData")
		if makerAssetDataRaw != "" {
			makerAssetData = &makerAssetDataRaw
		}
		if makerAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("makerAssetData", *makerAssetData, "^0x[0-9a-fA-F]{72}$"))
		}
		if makerAssetData != nil {
			if utf8.RuneCountInString(*makerAssetData) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetData", *makerAssetData, utf8.RuneCountInString(*makerAssetData), 74, true))
			}
		}
		if makerAssetData != nil {
			if utf8.RuneCountInString(*makerAssetData) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("makerAssetData", *makerAssetData, utf8.RuneCountInString(*makerAssetData), 74, false))
			}
		}
		takerAssetDataRaw := r.URL.Query().Get("takerAssetData")
		if takerAssetDataRaw != "" {
			takerAssetData = &takerAssetDataRaw
		}
		if takerAssetData != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("takerAssetData", *takerAssetData, "^0x[0-9a-fA-F]{72}$"))
		}
		if takerAssetData != nil {
			if utf8.RuneCountInString(*takerAssetData) < 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetData", *takerAssetData, utf8.RuneCountInString(*takerAssetData), 74, true))
			}
		}
		if takerAssetData != nil {
			if utf8.RuneCountInString(*takerAssetData) > 74 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("takerAssetData", *takerAssetData, utf8.RuneCountInString(*takerAssetData), 74, false))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetTradePairPayload(name, hash, makerAssetData, takerAssetData)

		return payload, nil
	}
}

// EncodeGetTradePairError returns an encoder for errors returned by the
// getTradePair RestAPI endpoint.
func EncodeGetTradePairError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetTradePairNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetTradePairInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetTradePairValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListTradePairsResponse returns an encoder for responses returned by
// the RestAPI listTradePairs endpoint.
func EncodeListTradePairsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.ListTradePairsResult)
		enc := encoder(ctx, w)
		body := NewListTradePairsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListTradePairsRequest returns a decoder for requests sent to the
// RestAPI listTradePairs endpoint.
func DecodeListTradePairsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListTradePairsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewListTradePairsPayload(&body)

		return payload, nil
	}
}

// EncodeListTradePairsError returns an encoder for errors returned by the
// listTradePairs RestAPI endpoint.
func EncodeListTradePairsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListTradePairsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListTradePairsValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListDerivativeMarketsResponse returns an encoder for responses
// returned by the RestAPI listDerivativeMarkets endpoint.
func EncodeListDerivativeMarketsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.ListDerivativeMarketsResult)
		enc := encoder(ctx, w)
		body := NewListDerivativeMarketsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListDerivativeMarketsRequest returns a decoder for requests sent to
// the RestAPI listDerivativeMarkets endpoint.
func DecodeListDerivativeMarketsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListDerivativeMarketsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewListDerivativeMarketsPayload(&body)

		return payload, nil
	}
}

// EncodeListDerivativeMarketsError returns an encoder for errors returned by
// the listDerivativeMarkets RestAPI endpoint.
func EncodeListDerivativeMarketsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListDerivativeMarketsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListDerivativeMarketsValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetAccountResponse returns an encoder for responses returned by the
// RestAPI getAccount endpoint.
func EncodeGetAccountResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.GetAccountResult)
		enc := encoder(ctx, w)
		body := NewGetAccountResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAccountRequest returns a decoder for requests sent to the RestAPI
// getAccount endpoint.
func DecodeGetAccountRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			address string
			err     error
		)
		address = r.URL.Query().Get("address")
		if address == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("address", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("address", address, "^cosmos1[0-9a-zA-Z]{38}$"))
		if utf8.RuneCountInString(address) < 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("address", address, utf8.RuneCountInString(address), 45, true))
		}
		if utf8.RuneCountInString(address) > 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("address", address, utf8.RuneCountInString(address), 45, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAccountPayload(address)

		return payload, nil
	}
}

// EncodeGetAccountError returns an encoder for errors returned by the
// getAccount RestAPI endpoint.
func EncodeGetAccountError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccountNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccountInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccountValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetOnlineAccountsResponse returns an encoder for responses returned by
// the RestAPI getOnlineAccounts endpoint.
func EncodeGetOnlineAccountsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*restapi.GetOnlineAccountsResult)
		enc := encoder(ctx, w)
		body := NewGetOnlineAccountsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetOnlineAccountsRequest returns a decoder for requests sent to the
// RestAPI getOnlineAccounts endpoint.
func DecodeGetOnlineAccountsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			version   *string
			threshold *int64
			err       error
		)
		versionRaw := r.URL.Query().Get("version")
		if versionRaw != "" {
			version = &versionRaw
		}
		{
			thresholdRaw := r.URL.Query().Get("threshold")
			if thresholdRaw != "" {
				v, err2 := strconv.ParseInt(thresholdRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("threshold", thresholdRaw, "integer"))
				}
				threshold = &v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetOnlineAccountsPayload(version, threshold)

		return payload, nil
	}
}

// EncodeGetOnlineAccountsError returns an encoder for errors returned by the
// getOnlineAccounts RestAPI endpoint.
func EncodeGetOnlineAccountsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetOnlineAccountsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "validation_error":
			res := v.(*restapi.RESTValidationErrorResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetOnlineAccountsValidationErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "validation_error")
			w.WriteHeader(http.StatusExpectationFailed)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalRestapiOrderToOrderResponseBody builds a value of type
// *OrderResponseBody from a value of type *restapi.Order.
func marshalRestapiOrderToOrderResponseBody(v *restapi.Order) *OrderResponseBody {
	if v == nil {
		return nil
	}
	res := &OrderResponseBody{
		ChainID:               v.ChainID,
		ExchangeAddress:       v.ExchangeAddress,
		MakerAddress:          v.MakerAddress,
		TakerAddress:          v.TakerAddress,
		FeeRecipientAddress:   v.FeeRecipientAddress,
		SenderAddress:         v.SenderAddress,
		MakerAssetAmount:      v.MakerAssetAmount,
		TakerAssetAmount:      v.TakerAssetAmount,
		MakerFee:              v.MakerFee,
		TakerFee:              v.TakerFee,
		ExpirationTimeSeconds: v.ExpirationTimeSeconds,
		Salt:                  v.Salt,
		MakerAssetData:        v.MakerAssetData,
		TakerAssetData:        v.TakerAssetData,
		MakerFeeAssetData:     v.MakerFeeAssetData,
		TakerFeeAssetData:     v.TakerFeeAssetData,
		Signature:             v.Signature,
	}

	return res
}

// marshalRestapiRESTValidationErrorToRESTValidationErrorResponseBody builds a
// value of type *RESTValidationErrorResponseBody from a value of type
// *restapi.RESTValidationError.
func marshalRestapiRESTValidationErrorToRESTValidationErrorResponseBody(v *restapi.RESTValidationError) *RESTValidationErrorResponseBody {
	if v == nil {
		return nil
	}
	res := &RESTValidationErrorResponseBody{
		Code:   v.Code,
		Reason: v.Reason,
		Field:  v.Field,
	}

	return res
}

// marshalRestapiTradePairToTradePairResponseBody builds a value of type
// *TradePairResponseBody from a value of type *restapi.TradePair.
func marshalRestapiTradePairToTradePairResponseBody(v *restapi.TradePair) *TradePairResponseBody {
	if v == nil {
		return nil
	}
	res := &TradePairResponseBody{
		Name:           v.Name,
		MakerAssetData: v.MakerAssetData,
		TakerAssetData: v.TakerAssetData,
		Hash:           v.Hash,
		Enabled:        v.Enabled,
	}

	return res
}

// marshalRestapiDerivativeMarketToDerivativeMarketResponseBody builds a value
// of type *DerivativeMarketResponseBody from a value of type
// *restapi.DerivativeMarket.
func marshalRestapiDerivativeMarketToDerivativeMarketResponseBody(v *restapi.DerivativeMarket) *DerivativeMarketResponseBody {
	if v == nil {
		return nil
	}
	res := &DerivativeMarketResponseBody{
		Ticker:       v.Ticker,
		Oracle:       v.Oracle,
		BaseCurrency: v.BaseCurrency,
		Nonce:        v.Nonce,
		MarketID:     v.MarketID,
		Enabled:      v.Enabled,
	}

	return res
}

// marshalRestapiRelayerAccountToRelayerAccountResponseBody builds a value of
// type *RelayerAccountResponseBody from a value of type
// *restapi.RelayerAccount.
func marshalRestapiRelayerAccountToRelayerAccountResponseBody(v *restapi.RelayerAccount) *RelayerAccountResponseBody {
	if v == nil {
		return nil
	}
	res := &RelayerAccountResponseBody{
		Address:       v.Address,
		StakerAddress: v.StakerAddress,
		PublicKey:     v.PublicKey,
		LastSeen:      v.LastSeen,
		LastVersion:   v.LastVersion,
		IsOnline:      v.IsOnline,
	}

	return res
}
