// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Relayer HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../../api

package client

import (
	"unicode/utf8"

	relayer "github.com/InjectiveLabs/injective-core/api/gen/relayer"
	goa "goa.design/goa/v3/pkg"
)

// OrdersRequestBody is the type of the "Relayer" service "orders" endpoint
// HTTP request body.
type OrdersRequestBody struct {
	// Filters orders with the specified makerFeeAssetData
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// Filters orders with the specified takerFeeAssetData
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
}

// OrderConfigRequestBody is the type of the "Relayer" service "orderConfig"
// endpoint HTTP request body.
type OrderConfigRequestBody struct {
	// Specify chain ID.
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// Exchange v2 contract address.
	ExchangeAddress string `form:"exchangeAddress" json:"exchangeAddress" xml:"exchangeAddress"`
	// Address that created the order.
	MakerAddress string `form:"makerAddress" json:"makerAddress" xml:"makerAddress"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress string `form:"takerAddress" json:"takerAddress" xml:"takerAddress"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount string `form:"makerAssetAmount" json:"makerAssetAmount" xml:"makerAssetAmount"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount string `form:"takerAssetAmount" json:"takerAssetAmount" xml:"takerAssetAmount"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string `form:"makerAssetData" json:"makerAssetData" xml:"makerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string `form:"takerAssetData" json:"takerAssetData" xml:"takerAssetData"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string `form:"expirationTimeSeconds" json:"expirationTimeSeconds" xml:"expirationTimeSeconds"`
}

// PostOrderRequestBody is the type of the "Relayer" service "postOrder"
// endpoint HTTP request body.
type PostOrderRequestBody struct {
	// Specify chain ID.
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// Exchange v2 contract address.
	ExchangeAddress string `form:"exchangeAddress" json:"exchangeAddress" xml:"exchangeAddress"`
	// Address that created the order.
	MakerAddress string `form:"makerAddress" json:"makerAddress" xml:"makerAddress"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress string `form:"takerAddress" json:"takerAddress" xml:"takerAddress"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress string `form:"feeRecipientAddress" json:"feeRecipientAddress" xml:"feeRecipientAddress"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress string `form:"senderAddress" json:"senderAddress" xml:"senderAddress"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount string `form:"makerAssetAmount" json:"makerAssetAmount" xml:"makerAssetAmount"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount string `form:"takerAssetAmount" json:"takerAssetAmount" xml:"takerAssetAmount"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee string `form:"makerFee" json:"makerFee" xml:"makerFee"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee string `form:"takerFee" json:"takerFee" xml:"takerFee"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string `form:"expirationTimeSeconds" json:"expirationTimeSeconds" xml:"expirationTimeSeconds"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt string `form:"salt" json:"salt" xml:"salt"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string `form:"makerAssetData" json:"makerAssetData" xml:"makerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string `form:"takerAssetData" json:"takerAssetData" xml:"takerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData string `form:"makerFeeAssetData" json:"makerFeeAssetData" xml:"makerFeeAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData string `form:"takerFeeAssetData" json:"takerFeeAssetData" xml:"takerFeeAssetData"`
	// Order signature.
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// TakeOrderRequestBody is the type of the "Relayer" service "takeOrder"
// endpoint HTTP request body.
type TakeOrderRequestBody struct {
	// Signed 0x take order.
	TakeOrder *OrderRequestBody `form:"takeOrder" json:"takeOrder" xml:"takeOrder"`
	// List of 0x signed make orders.
	MakeOrders []*OrderRequestBody `form:"makeOrders" json:"makeOrders" xml:"makeOrders"`
	// List of make order fill amounts
	MakeOrderFillAmounts []string `form:"makeOrderFillAmounts" json:"makeOrderFillAmounts" xml:"makeOrderFillAmounts"`
}

// ListOrdersRequestBody is the type of the "Relayer" service "listOrders"
// endpoint HTTP request body.
type ListOrdersRequestBody struct {
	// Filter by status of the order
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Filter by collection of the order
	Collection *string `form:"collection,omitempty" json:"collection,omitempty" xml:"collection,omitempty"`
	// Filter by trade pair hash
	TradePairHash *string `form:"tradePairHash,omitempty" json:"tradePairHash,omitempty" xml:"tradePairHash,omitempty"`
	// Enabled sort by VDF (1 = asc, -1 = desc)
	SortByVdf *int32 `form:"sortByVdf,omitempty" json:"sortByVdf,omitempty" xml:"sortByVdf,omitempty"`
	// Limits the amout of results by top N
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// ListTradePairsRequestBody is the type of the "Relayer" service
// "listTradePairs" endpoint HTTP request body.
type ListTradePairsRequestBody struct {
	// Specify to include all trade pairs, suspended and active.
	All *bool `form:"all,omitempty" json:"all,omitempty" xml:"all,omitempty"`
}

// GetEthTransactionsRequestBody is the type of the "Relayer" service
// "getEthTransactions" endpoint HTTP request body.
type GetEthTransactionsRequestBody struct {
	// Specify Cosmos address of the proposer for that transaction.
	Proposer *string `form:"proposer,omitempty" json:"proposer,omitempty" xml:"proposer,omitempty"`
	// Ethereum wallet address of the transaction sender (proposer).
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Filter only transactions that contain specified trade hash.
	TradeHash *string `form:"tradeHash,omitempty" json:"tradeHash,omitempty" xml:"tradeHash,omitempty"`
	// Specify lower boundary for the transaction's block.
	BlockFrom *int64 `form:"blockFrom,omitempty" json:"blockFrom,omitempty" xml:"blockFrom,omitempty"`
	// Specify upper boundary for the transaction's block.
	BlockBefore *int64 `form:"blockBefore,omitempty" json:"blockBefore,omitempty" xml:"blockBefore,omitempty"`
	// Filter only transactions that contain a review from specified cosmos address.
	ReviewedBy *string `form:"reviewedBy,omitempty" json:"reviewedBy,omitempty" xml:"reviewedBy,omitempty"`
}

// AssetPairsResponseBody is the type of the "Relayer" service "assetPairs"
// endpoint HTTP response body.
type AssetPairsResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// Asset pairs that contain assetDataA and assetDataB (listed in any order).
	Records []*AssetPairRecordResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// OrdersResponseBody is the type of the "Relayer" service "orders" endpoint
// HTTP response body.
type OrdersResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// If both makerAssetData and takerAssetData are specified, returned orders
	// will be sorted by price determined by (takerAssetAmount/makerAssetAmount).
	Records []*OrderRecordResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// OrderByHashResponseBody is the type of the "Relayer" service "orderByHash"
// endpoint HTTP response body.
type OrderByHashResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Order item.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// OrderbookResponseBody is the type of the "Relayer" service "orderbook"
// endpoint HTTP response body.
type OrderbookResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Array of signed orders where takerAssetData is equal to baseAssetData. Bids
	// will be sorted in descending order by price.
	Bids *OrderbookRecordsResponseBody `form:"bids,omitempty" json:"bids,omitempty" xml:"bids,omitempty"`
	// Array of signed orders where makerAssetData is equal to baseAssetData. Asks
	// will be sorted in ascending order by price.
	Asks *OrderbookRecordsResponseBody `form:"asks,omitempty" json:"asks,omitempty" xml:"asks,omitempty"`
}

// OrderConfigResponseBody is the type of the "Relayer" service "orderConfig"
// endpoint HTTP response body.
type OrderConfigResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress *string `form:"senderAddress,omitempty" json:"senderAddress,omitempty" xml:"senderAddress,omitempty"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress *string `form:"feeRecipientAddress,omitempty" json:"feeRecipientAddress,omitempty" xml:"feeRecipientAddress,omitempty"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee *string `form:"makerFee,omitempty" json:"makerFee,omitempty" xml:"makerFee,omitempty"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee *string `form:"takerFee,omitempty" json:"takerFee,omitempty" xml:"takerFee,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
}

// FeeRecipientsResponseBody is the type of the "Relayer" service
// "feeRecipients" endpoint HTTP response body.
type FeeRecipientsResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// List of all fee recipient addresses for a relayer
	Records []string `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// PostOrderResponseBody is the type of the "Relayer" service "postOrder"
// endpoint HTTP response body.
type PostOrderResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
}

// TakeOrderResponseBody is the type of the "Relayer" service "takeOrder"
// endpoint HTTP response body.
type TakeOrderResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
}

// GetActiveOrderResponseBody is the type of the "Relayer" service
// "getActiveOrder" endpoint HTTP response body.
type GetActiveOrderResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Found active 0x order.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetArchiveOrderResponseBody is the type of the "Relayer" service
// "getArchiveOrder" endpoint HTTP response body.
type GetArchiveOrderResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Order item.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// ListOrdersResponseBody is the type of the "Relayer" service "listOrders"
// endpoint HTTP response body.
type ListOrdersResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Filtered take orders.
	TakeOrders []*OrderResponseBody `form:"takeOrders,omitempty" json:"takeOrders,omitempty" xml:"takeOrders,omitempty"`
	// Filtered make orders.
	MakeOrders []*OrderResponseBody `form:"makeOrders,omitempty" json:"makeOrders,omitempty" xml:"makeOrders,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetTradePairResponseBody is the type of the "Relayer" service "getTradePair"
// endpoint HTTP response body.
type GetTradePairResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Found trade pair.
	TradePair *TradePairResponseBody `form:"tradePair,omitempty" json:"tradePair,omitempty" xml:"tradePair,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// ListTradePairsResponseBody is the type of the "Relayer" service
// "listTradePairs" endpoint HTTP response body.
type ListTradePairsResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Filtered trade pairs.
	TradePairs []*TradePairResponseBody `form:"tradePairs,omitempty" json:"tradePairs,omitempty" xml:"tradePairs,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetAccountResponseBody is the type of the "Relayer" service "getAccount"
// endpoint HTTP response body.
type GetAccountResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Found relayer account.
	Account *RelayerAccountResponseBody `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetOnlineAccountsResponseBody is the type of the "Relayer" service
// "getOnlineAccounts" endpoint HTTP response body.
type GetOnlineAccountsResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Filtered online relayer accounts.
	Accounts []*RelayerAccountResponseBody `form:"accounts,omitempty" json:"accounts,omitempty" xml:"accounts,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// GetEthTransactionsResponseBody is the type of the "Relayer" service
// "getEthTransactions" endpoint HTTP response body.
type GetEthTransactionsResponseBody struct {
	// The maximum number of requests you're permitted to make per hour.
	RLimitLimit *int `form:"rLimitLimit,omitempty" json:"rLimitLimit,omitempty" xml:"rLimitLimit,omitempty"`
	// The number of requests remaining in the current rate limit window.
	RLimitRemaining *int `form:"rLimitRemaining,omitempty" json:"rLimitRemaining,omitempty" xml:"rLimitRemaining,omitempty"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	RLimitReset *int `form:"rLimitReset,omitempty" json:"rLimitReset,omitempty" xml:"rLimitReset,omitempty"`
	// Filtered Ethereum transactions.
	Transactions []*EthTransactionResponseBody `form:"transactions,omitempty" json:"transactions,omitempty" xml:"transactions,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// VersionResponseBody is the type of the "Relayer" service "version" endpoint
// HTTP response body.
type VersionResponseBody struct {
	// Relayerd code version.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Additional meta data.
	MetaData map[string]string `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// AssetPairsNotFoundResponseBody is the type of the "Relayer" service
// "assetPairs" endpoint HTTP response body for the "not_found" error.
type AssetPairsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsRateLimitResponseBody is the type of the "Relayer" service
// "assetPairs" endpoint HTTP response body for the "rate_limit" error.
type AssetPairsRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsInternalResponseBody is the type of the "Relayer" service
// "assetPairs" endpoint HTTP response body for the "internal" error.
type AssetPairsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsNotImplementedResponseBody is the type of the "Relayer" service
// "assetPairs" endpoint HTTP response body for the "not_implemented" error.
type AssetPairsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AssetPairsValidationErrorResponseBody is the type of the "Relayer" service
// "assetPairs" endpoint HTTP response body for the "validation_error" error.
type AssetPairsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrdersNotFoundResponseBody is the type of the "Relayer" service "orders"
// endpoint HTTP response body for the "not_found" error.
type OrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersRateLimitResponseBody is the type of the "Relayer" service "orders"
// endpoint HTTP response body for the "rate_limit" error.
type OrdersRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersInternalResponseBody is the type of the "Relayer" service "orders"
// endpoint HTTP response body for the "internal" error.
type OrdersInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersNotImplementedResponseBody is the type of the "Relayer" service
// "orders" endpoint HTTP response body for the "not_implemented" error.
type OrdersNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrdersValidationErrorResponseBody is the type of the "Relayer" service
// "orders" endpoint HTTP response body for the "validation_error" error.
type OrdersValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrderByHashNotFoundResponseBody is the type of the "Relayer" service
// "orderByHash" endpoint HTTP response body for the "not_found" error.
type OrderByHashNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashRateLimitResponseBody is the type of the "Relayer" service
// "orderByHash" endpoint HTTP response body for the "rate_limit" error.
type OrderByHashRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashInternalResponseBody is the type of the "Relayer" service
// "orderByHash" endpoint HTTP response body for the "internal" error.
type OrderByHashInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashNotImplementedResponseBody is the type of the "Relayer" service
// "orderByHash" endpoint HTTP response body for the "not_implemented" error.
type OrderByHashNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderByHashValidationErrorResponseBody is the type of the "Relayer" service
// "orderByHash" endpoint HTTP response body for the "validation_error" error.
type OrderByHashValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrderbookNotFoundResponseBody is the type of the "Relayer" service
// "orderbook" endpoint HTTP response body for the "not_found" error.
type OrderbookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookRateLimitResponseBody is the type of the "Relayer" service
// "orderbook" endpoint HTTP response body for the "rate_limit" error.
type OrderbookRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookInternalResponseBody is the type of the "Relayer" service
// "orderbook" endpoint HTTP response body for the "internal" error.
type OrderbookInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookNotImplementedResponseBody is the type of the "Relayer" service
// "orderbook" endpoint HTTP response body for the "not_implemented" error.
type OrderbookNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderbookValidationErrorResponseBody is the type of the "Relayer" service
// "orderbook" endpoint HTTP response body for the "validation_error" error.
type OrderbookValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// OrderConfigNotFoundResponseBody is the type of the "Relayer" service
// "orderConfig" endpoint HTTP response body for the "not_found" error.
type OrderConfigNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigRateLimitResponseBody is the type of the "Relayer" service
// "orderConfig" endpoint HTTP response body for the "rate_limit" error.
type OrderConfigRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigInternalResponseBody is the type of the "Relayer" service
// "orderConfig" endpoint HTTP response body for the "internal" error.
type OrderConfigInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigNotImplementedResponseBody is the type of the "Relayer" service
// "orderConfig" endpoint HTTP response body for the "not_implemented" error.
type OrderConfigNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderConfigValidationErrorResponseBody is the type of the "Relayer" service
// "orderConfig" endpoint HTTP response body for the "validation_error" error.
type OrderConfigValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// FeeRecipientsNotFoundResponseBody is the type of the "Relayer" service
// "feeRecipients" endpoint HTTP response body for the "not_found" error.
type FeeRecipientsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsRateLimitResponseBody is the type of the "Relayer" service
// "feeRecipients" endpoint HTTP response body for the "rate_limit" error.
type FeeRecipientsRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsInternalResponseBody is the type of the "Relayer" service
// "feeRecipients" endpoint HTTP response body for the "internal" error.
type FeeRecipientsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsNotImplementedResponseBody is the type of the "Relayer" service
// "feeRecipients" endpoint HTTP response body for the "not_implemented" error.
type FeeRecipientsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FeeRecipientsValidationErrorResponseBody is the type of the "Relayer"
// service "feeRecipients" endpoint HTTP response body for the
// "validation_error" error.
type FeeRecipientsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// PostOrderNotFoundResponseBody is the type of the "Relayer" service
// "postOrder" endpoint HTTP response body for the "not_found" error.
type PostOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderRateLimitResponseBody is the type of the "Relayer" service
// "postOrder" endpoint HTTP response body for the "rate_limit" error.
type PostOrderRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderInternalResponseBody is the type of the "Relayer" service
// "postOrder" endpoint HTTP response body for the "internal" error.
type PostOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderNotImplementedResponseBody is the type of the "Relayer" service
// "postOrder" endpoint HTTP response body for the "not_implemented" error.
type PostOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostOrderValidationErrorResponseBody is the type of the "Relayer" service
// "postOrder" endpoint HTTP response body for the "validation_error" error.
type PostOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// TakeOrderNotFoundResponseBody is the type of the "Relayer" service
// "takeOrder" endpoint HTTP response body for the "not_found" error.
type TakeOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TakeOrderRateLimitResponseBody is the type of the "Relayer" service
// "takeOrder" endpoint HTTP response body for the "rate_limit" error.
type TakeOrderRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TakeOrderInternalResponseBody is the type of the "Relayer" service
// "takeOrder" endpoint HTTP response body for the "internal" error.
type TakeOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TakeOrderNotImplementedResponseBody is the type of the "Relayer" service
// "takeOrder" endpoint HTTP response body for the "not_implemented" error.
type TakeOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TakeOrderValidationErrorResponseBody is the type of the "Relayer" service
// "takeOrder" endpoint HTTP response body for the "validation_error" error.
type TakeOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetActiveOrderNotFoundResponseBody is the type of the "Relayer" service
// "getActiveOrder" endpoint HTTP response body for the "not_found" error.
type GetActiveOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActiveOrderRateLimitResponseBody is the type of the "Relayer" service
// "getActiveOrder" endpoint HTTP response body for the "rate_limit" error.
type GetActiveOrderRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActiveOrderInternalResponseBody is the type of the "Relayer" service
// "getActiveOrder" endpoint HTTP response body for the "internal" error.
type GetActiveOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActiveOrderNotImplementedResponseBody is the type of the "Relayer"
// service "getActiveOrder" endpoint HTTP response body for the
// "not_implemented" error.
type GetActiveOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActiveOrderValidationErrorResponseBody is the type of the "Relayer"
// service "getActiveOrder" endpoint HTTP response body for the
// "validation_error" error.
type GetActiveOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetArchiveOrderNotFoundResponseBody is the type of the "Relayer" service
// "getArchiveOrder" endpoint HTTP response body for the "not_found" error.
type GetArchiveOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetArchiveOrderRateLimitResponseBody is the type of the "Relayer" service
// "getArchiveOrder" endpoint HTTP response body for the "rate_limit" error.
type GetArchiveOrderRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetArchiveOrderInternalResponseBody is the type of the "Relayer" service
// "getArchiveOrder" endpoint HTTP response body for the "internal" error.
type GetArchiveOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetArchiveOrderNotImplementedResponseBody is the type of the "Relayer"
// service "getArchiveOrder" endpoint HTTP response body for the
// "not_implemented" error.
type GetArchiveOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetArchiveOrderValidationErrorResponseBody is the type of the "Relayer"
// service "getArchiveOrder" endpoint HTTP response body for the
// "validation_error" error.
type GetArchiveOrderValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// ListOrdersNotFoundResponseBody is the type of the "Relayer" service
// "listOrders" endpoint HTTP response body for the "not_found" error.
type ListOrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersRateLimitResponseBody is the type of the "Relayer" service
// "listOrders" endpoint HTTP response body for the "rate_limit" error.
type ListOrdersRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersInternalResponseBody is the type of the "Relayer" service
// "listOrders" endpoint HTTP response body for the "internal" error.
type ListOrdersInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersNotImplementedResponseBody is the type of the "Relayer" service
// "listOrders" endpoint HTTP response body for the "not_implemented" error.
type ListOrdersNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersValidationErrorResponseBody is the type of the "Relayer" service
// "listOrders" endpoint HTTP response body for the "validation_error" error.
type ListOrdersValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetTradePairNotFoundResponseBody is the type of the "Relayer" service
// "getTradePair" endpoint HTTP response body for the "not_found" error.
type GetTradePairNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetTradePairRateLimitResponseBody is the type of the "Relayer" service
// "getTradePair" endpoint HTTP response body for the "rate_limit" error.
type GetTradePairRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetTradePairInternalResponseBody is the type of the "Relayer" service
// "getTradePair" endpoint HTTP response body for the "internal" error.
type GetTradePairInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetTradePairNotImplementedResponseBody is the type of the "Relayer" service
// "getTradePair" endpoint HTTP response body for the "not_implemented" error.
type GetTradePairNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetTradePairValidationErrorResponseBody is the type of the "Relayer" service
// "getTradePair" endpoint HTTP response body for the "validation_error" error.
type GetTradePairValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// ListTradePairsNotFoundResponseBody is the type of the "Relayer" service
// "listTradePairs" endpoint HTTP response body for the "not_found" error.
type ListTradePairsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListTradePairsRateLimitResponseBody is the type of the "Relayer" service
// "listTradePairs" endpoint HTTP response body for the "rate_limit" error.
type ListTradePairsRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListTradePairsInternalResponseBody is the type of the "Relayer" service
// "listTradePairs" endpoint HTTP response body for the "internal" error.
type ListTradePairsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListTradePairsNotImplementedResponseBody is the type of the "Relayer"
// service "listTradePairs" endpoint HTTP response body for the
// "not_implemented" error.
type ListTradePairsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListTradePairsValidationErrorResponseBody is the type of the "Relayer"
// service "listTradePairs" endpoint HTTP response body for the
// "validation_error" error.
type ListTradePairsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetAccountNotFoundResponseBody is the type of the "Relayer" service
// "getAccount" endpoint HTTP response body for the "not_found" error.
type GetAccountNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountRateLimitResponseBody is the type of the "Relayer" service
// "getAccount" endpoint HTTP response body for the "rate_limit" error.
type GetAccountRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountInternalResponseBody is the type of the "Relayer" service
// "getAccount" endpoint HTTP response body for the "internal" error.
type GetAccountInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountNotImplementedResponseBody is the type of the "Relayer" service
// "getAccount" endpoint HTTP response body for the "not_implemented" error.
type GetAccountNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountValidationErrorResponseBody is the type of the "Relayer" service
// "getAccount" endpoint HTTP response body for the "validation_error" error.
type GetAccountValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetOnlineAccountsNotFoundResponseBody is the type of the "Relayer" service
// "getOnlineAccounts" endpoint HTTP response body for the "not_found" error.
type GetOnlineAccountsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOnlineAccountsRateLimitResponseBody is the type of the "Relayer" service
// "getOnlineAccounts" endpoint HTTP response body for the "rate_limit" error.
type GetOnlineAccountsRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOnlineAccountsInternalResponseBody is the type of the "Relayer" service
// "getOnlineAccounts" endpoint HTTP response body for the "internal" error.
type GetOnlineAccountsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOnlineAccountsNotImplementedResponseBody is the type of the "Relayer"
// service "getOnlineAccounts" endpoint HTTP response body for the
// "not_implemented" error.
type GetOnlineAccountsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOnlineAccountsValidationErrorResponseBody is the type of the "Relayer"
// service "getOnlineAccounts" endpoint HTTP response body for the
// "validation_error" error.
type GetOnlineAccountsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// GetEthTransactionsNotFoundResponseBody is the type of the "Relayer" service
// "getEthTransactions" endpoint HTTP response body for the "not_found" error.
type GetEthTransactionsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetEthTransactionsRateLimitResponseBody is the type of the "Relayer" service
// "getEthTransactions" endpoint HTTP response body for the "rate_limit" error.
type GetEthTransactionsRateLimitResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetEthTransactionsInternalResponseBody is the type of the "Relayer" service
// "getEthTransactions" endpoint HTTP response body for the "internal" error.
type GetEthTransactionsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetEthTransactionsNotImplementedResponseBody is the type of the "Relayer"
// service "getEthTransactions" endpoint HTTP response body for the
// "not_implemented" error.
type GetEthTransactionsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetEthTransactionsValidationErrorResponseBody is the type of the "Relayer"
// service "getEthTransactions" endpoint HTTP response body for the
// "validation_error" error.
type GetEthTransactionsValidationErrorResponseBody struct {
	// General error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// A list of explained validation errors.
	ValidationErrors []*ValidationErrorResponseBody `form:"validationErrors,omitempty" json:"validationErrors,omitempty" xml:"validationErrors,omitempty"`
}

// AssetPairRecordResponseBody is used to define fields on response body types.
type AssetPairRecordResponseBody struct {
	// First asset record of the pair.
	AssetDataA *AssetRecordResponseBody `form:"assetDataA,omitempty" json:"assetDataA,omitempty" xml:"assetDataA,omitempty"`
	// Second asset record of the pair.
	AssetDataB *AssetRecordResponseBody `form:"assetDataB,omitempty" json:"assetDataB,omitempty" xml:"assetDataB,omitempty"`
}

// AssetRecordResponseBody is used to define fields on response body types.
type AssetRecordResponseBody struct {
	// ABIv2 encoded assetData representing that token.
	AssetData *string `form:"assetData,omitempty" json:"assetData,omitempty" xml:"assetData,omitempty"`
	// The minimum trade amount the relayer will accept.
	MinAmount *string `form:"minAmount,omitempty" json:"minAmount,omitempty" xml:"minAmount,omitempty"`
	// The maximum trade amount the relayer will accept.
	MaxAmount *string `form:"maxAmount,omitempty" json:"maxAmount,omitempty" xml:"maxAmount,omitempty"`
	// The desired price precision a relayer would like to support within their
	// orderbook.
	Precision *string `form:"precision,omitempty" json:"precision,omitempty" xml:"precision,omitempty"`
}

// ValidationErrorResponseBody is used to define fields on response body types.
type ValidationErrorResponseBody struct {
	// Validation error code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Validation error reason description
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Field name
	Field *string `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
}

// OrderRecordResponseBody is used to define fields on response body types.
type OrderRecordResponseBody struct {
	// Order item.
	Order *OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Additional meta data.
	MetaData interface{} `form:"metaData,omitempty" json:"metaData,omitempty" xml:"metaData,omitempty"`
}

// OrderResponseBody is used to define fields on response body types.
type OrderResponseBody struct {
	// Specify chain ID.
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// Exchange v2 contract address.
	ExchangeAddress *string `form:"exchangeAddress,omitempty" json:"exchangeAddress,omitempty" xml:"exchangeAddress,omitempty"`
	// Address that created the order.
	MakerAddress *string `form:"makerAddress,omitempty" json:"makerAddress,omitempty" xml:"makerAddress,omitempty"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress *string `form:"takerAddress,omitempty" json:"takerAddress,omitempty" xml:"takerAddress,omitempty"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress *string `form:"feeRecipientAddress,omitempty" json:"feeRecipientAddress,omitempty" xml:"feeRecipientAddress,omitempty"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress *string `form:"senderAddress,omitempty" json:"senderAddress,omitempty" xml:"senderAddress,omitempty"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount *string `form:"makerAssetAmount,omitempty" json:"makerAssetAmount,omitempty" xml:"makerAssetAmount,omitempty"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount *string `form:"takerAssetAmount,omitempty" json:"takerAssetAmount,omitempty" xml:"takerAssetAmount,omitempty"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee *string `form:"makerFee,omitempty" json:"makerFee,omitempty" xml:"makerFee,omitempty"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee *string `form:"takerFee,omitempty" json:"takerFee,omitempty" xml:"takerFee,omitempty"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds *string `form:"expirationTimeSeconds,omitempty" json:"expirationTimeSeconds,omitempty" xml:"expirationTimeSeconds,omitempty"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt *string `form:"salt,omitempty" json:"salt,omitempty" xml:"salt,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData *string `form:"makerAssetData,omitempty" json:"makerAssetData,omitempty" xml:"makerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData *string `form:"takerAssetData,omitempty" json:"takerAssetData,omitempty" xml:"takerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData *string `form:"makerFeeAssetData,omitempty" json:"makerFeeAssetData,omitempty" xml:"makerFeeAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData *string `form:"takerFeeAssetData,omitempty" json:"takerFeeAssetData,omitempty" xml:"takerFeeAssetData,omitempty"`
	// Order signature.
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// OrderbookRecordsResponseBody is used to define fields on response body types.
type OrderbookRecordsResponseBody struct {
	// Total records found in collection.
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// The page number, starts from 1.
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Records limit per each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty" xml:"perPage,omitempty"`
	// Array of signed orders
	Records []*OrderRecordResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
}

// OrderRequestBody is used to define fields on request body types.
type OrderRequestBody struct {
	// Specify chain ID.
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// Exchange v2 contract address.
	ExchangeAddress string `form:"exchangeAddress" json:"exchangeAddress" xml:"exchangeAddress"`
	// Address that created the order.
	MakerAddress string `form:"makerAddress" json:"makerAddress" xml:"makerAddress"`
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress string `form:"takerAddress" json:"takerAddress" xml:"takerAddress"`
	// Address that will receive fees when order is filled.
	FeeRecipientAddress string `form:"feeRecipientAddress" json:"feeRecipientAddress" xml:"feeRecipientAddress"`
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress string `form:"senderAddress" json:"senderAddress" xml:"senderAddress"`
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount string `form:"makerAssetAmount" json:"makerAssetAmount" xml:"makerAssetAmount"`
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount string `form:"takerAssetAmount" json:"takerAssetAmount" xml:"takerAssetAmount"`
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee string `form:"makerFee" json:"makerFee" xml:"makerFee"`
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee string `form:"takerFee" json:"takerFee" xml:"takerFee"`
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string `form:"expirationTimeSeconds" json:"expirationTimeSeconds" xml:"expirationTimeSeconds"`
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt string `form:"salt" json:"salt" xml:"salt"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string `form:"makerAssetData" json:"makerAssetData" xml:"makerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string `form:"takerAssetData" json:"takerAssetData" xml:"takerAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData string `form:"makerFeeAssetData" json:"makerFeeAssetData" xml:"makerFeeAssetData"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData string `form:"takerFeeAssetData" json:"takerFeeAssetData" xml:"takerFeeAssetData"`
	// Order signature.
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// TradePairResponseBody is used to define fields on response body types.
type TradePairResponseBody struct {
	// A name of the pair in format AAA/BBB, where AAA - maker's asset, BBB -
	// taker's asset.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData *string `form:"makerAssetData,omitempty" json:"makerAssetData,omitempty" xml:"makerAssetData,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData *string `form:"takerAssetData,omitempty" json:"takerAssetData,omitempty" xml:"takerAssetData,omitempty"`
	// Hash of both asset data, to identify the trading pair in store.
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
	// If false, then the pair is suspended and trades cannot be made.
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
}

// RelayerAccountResponseBody is used to define fields on response body types.
type RelayerAccountResponseBody struct {
	// Cosmos address of the relayer account.
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Public key of the relayer account, as hex string.
	PublicKey *string `form:"publicKey,omitempty" json:"publicKey,omitempty" xml:"publicKey,omitempty"`
	// Timestamp in UNIX seconds of the last time seen.
	LastSeen *int64 `form:"lastSeen,omitempty" json:"lastSeen,omitempty" xml:"lastSeen,omitempty"`
	// Last logic version seen.
	LastVersion *string `form:"lastVersion,omitempty" json:"lastVersion,omitempty" xml:"lastVersion,omitempty"`
	// A flag of liveness status of the account. Must be considered with lastSeen
	// timestamp.
	IsOnline *bool `form:"isOnline,omitempty" json:"isOnline,omitempty" xml:"isOnline,omitempty"`
}

// EthTransactionResponseBody is used to define fields on response body types.
type EthTransactionResponseBody struct {
	// Proposer is a leader chosen from online validators pool that must commit the
	// transaction into Ethereum.
	Proposer *string `form:"proposer,omitempty" json:"proposer,omitempty" xml:"proposer,omitempty"`
	// A list of trade references to be submitted in the transaction.
	TradeHashes []string `form:"tradeHashes,omitempty" json:"tradeHashes,omitempty" xml:"tradeHashes,omitempty"`
	// The block height when the transaction has been created and must've been
	// acknowledged by the selected proposer.
	Block *int64 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// TxHash is the reported hash of an Ethereum transaction.
	TxHash *string `form:"txHash,omitempty" json:"txHash,omitempty" xml:"txHash,omitempty"`
	// Ethereum address the transaction has been sent from (proposer's wallet).
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// ReviewedBy is a list of other validators that reviewed transaction existence
	// and correctness.
	ReviewedBy []string `form:"reviewedBy,omitempty" json:"reviewedBy,omitempty" xml:"reviewedBy,omitempty"`
}

// NewOrdersRequestBody builds the HTTP request body from the payload of the
// "orders" endpoint of the "Relayer" service.
func NewOrdersRequestBody(p *relayer.OrdersPayload) *OrdersRequestBody {
	body := &OrdersRequestBody{
		MakerFeeAssetData: p.MakerFeeAssetData,
		TakerFeeAssetData: p.TakerFeeAssetData,
	}
	return body
}

// NewOrderConfigRequestBody builds the HTTP request body from the payload of
// the "orderConfig" endpoint of the "Relayer" service.
func NewOrderConfigRequestBody(p *relayer.OrderConfigPayload) *OrderConfigRequestBody {
	body := &OrderConfigRequestBody{
		ChainID:               p.ChainID,
		ExchangeAddress:       p.ExchangeAddress,
		MakerAddress:          p.MakerAddress,
		TakerAddress:          p.TakerAddress,
		MakerAssetAmount:      p.MakerAssetAmount,
		TakerAssetAmount:      p.TakerAssetAmount,
		MakerAssetData:        p.MakerAssetData,
		TakerAssetData:        p.TakerAssetData,
		ExpirationTimeSeconds: p.ExpirationTimeSeconds,
	}
	return body
}

// NewPostOrderRequestBody builds the HTTP request body from the payload of the
// "postOrder" endpoint of the "Relayer" service.
func NewPostOrderRequestBody(p *relayer.PostOrderPayload) *PostOrderRequestBody {
	body := &PostOrderRequestBody{
		ChainID:               p.ChainID,
		ExchangeAddress:       p.ExchangeAddress,
		MakerAddress:          p.MakerAddress,
		TakerAddress:          p.TakerAddress,
		FeeRecipientAddress:   p.FeeRecipientAddress,
		SenderAddress:         p.SenderAddress,
		MakerAssetAmount:      p.MakerAssetAmount,
		TakerAssetAmount:      p.TakerAssetAmount,
		MakerFee:              p.MakerFee,
		TakerFee:              p.TakerFee,
		ExpirationTimeSeconds: p.ExpirationTimeSeconds,
		Salt:                  p.Salt,
		MakerAssetData:        p.MakerAssetData,
		TakerAssetData:        p.TakerAssetData,
		MakerFeeAssetData:     p.MakerFeeAssetData,
		TakerFeeAssetData:     p.TakerFeeAssetData,
		Signature:             p.Signature,
	}
	return body
}

// NewTakeOrderRequestBody builds the HTTP request body from the payload of the
// "takeOrder" endpoint of the "Relayer" service.
func NewTakeOrderRequestBody(p *relayer.TakeOrderPayload) *TakeOrderRequestBody {
	body := &TakeOrderRequestBody{}
	if p.TakeOrder != nil {
		body.TakeOrder = marshalRelayerOrderToOrderRequestBody(p.TakeOrder)
	}
	if p.MakeOrders != nil {
		body.MakeOrders = make([]*OrderRequestBody, len(p.MakeOrders))
		for i, val := range p.MakeOrders {
			body.MakeOrders[i] = marshalRelayerOrderToOrderRequestBody(val)
		}
	}
	if p.MakeOrderFillAmounts != nil {
		body.MakeOrderFillAmounts = make([]string, len(p.MakeOrderFillAmounts))
		for i, val := range p.MakeOrderFillAmounts {
			body.MakeOrderFillAmounts[i] = val
		}
	}
	return body
}

// NewListOrdersRequestBody builds the HTTP request body from the payload of
// the "listOrders" endpoint of the "Relayer" service.
func NewListOrdersRequestBody(p *relayer.ListOrdersPayload) *ListOrdersRequestBody {
	body := &ListOrdersRequestBody{
		Status:        p.Status,
		Collection:    p.Collection,
		TradePairHash: p.TradePairHash,
		SortByVdf:     p.SortByVdf,
		Limit:         p.Limit,
	}
	return body
}

// NewListTradePairsRequestBody builds the HTTP request body from the payload
// of the "listTradePairs" endpoint of the "Relayer" service.
func NewListTradePairsRequestBody(p *relayer.ListTradePairsPayload) *ListTradePairsRequestBody {
	body := &ListTradePairsRequestBody{
		All: p.All,
	}
	return body
}

// NewGetEthTransactionsRequestBody builds the HTTP request body from the
// payload of the "getEthTransactions" endpoint of the "Relayer" service.
func NewGetEthTransactionsRequestBody(p *relayer.GetEthTransactionsPayload) *GetEthTransactionsRequestBody {
	body := &GetEthTransactionsRequestBody{
		Proposer:    p.Proposer,
		From:        p.From,
		TradeHash:   p.TradeHash,
		BlockFrom:   p.BlockFrom,
		BlockBefore: p.BlockBefore,
		ReviewedBy:  p.ReviewedBy,
	}
	return body
}

// NewAssetPairsResultOK builds a "Relayer" service "assetPairs" endpoint
// result from a HTTP "OK" response.
func NewAssetPairsResultOK(body *AssetPairsResponseBody) *relayer.AssetPairsResult {
	v := &relayer.AssetPairsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		Total:           *body.Total,
		Page:            *body.Page,
		PerPage:         *body.PerPage,
	}
	if body.Records != nil {
		v.Records = make([]*relayer.AssetPairRecord, len(body.Records))
		for i, val := range body.Records {
			v.Records[i] = unmarshalAssetPairRecordResponseBodyToRelayerAssetPairRecord(val)
		}
	}
	return v
}

// NewAssetPairsNotFound builds a Relayer service assetPairs endpoint not_found
// error.
func NewAssetPairsNotFound(body *AssetPairsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewAssetPairsRateLimit builds a Relayer service assetPairs endpoint
// rate_limit error.
func NewAssetPairsRateLimit(body *AssetPairsRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewAssetPairsInternal builds a Relayer service assetPairs endpoint internal
// error.
func NewAssetPairsInternal(body *AssetPairsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewAssetPairsNotImplemented builds a Relayer service assetPairs endpoint
// not_implemented error.
func NewAssetPairsNotImplemented(body *AssetPairsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewAssetPairsValidationError builds a Relayer service assetPairs endpoint
// validation_error error.
func NewAssetPairsValidationError(body *AssetPairsValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewOrdersResultOK builds a "Relayer" service "orders" endpoint result from a
// HTTP "OK" response.
func NewOrdersResultOK(body *OrdersResponseBody) *relayer.OrdersResult {
	v := &relayer.OrdersResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		Total:           *body.Total,
		Page:            *body.Page,
		PerPage:         *body.PerPage,
	}
	if body.Records != nil {
		v.Records = make([]*relayer.OrderRecord, len(body.Records))
		for i, val := range body.Records {
			v.Records[i] = unmarshalOrderRecordResponseBodyToRelayerOrderRecord(val)
		}
	}
	return v
}

// NewOrdersNotFound builds a Relayer service orders endpoint not_found error.
func NewOrdersNotFound(body *OrdersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrdersRateLimit builds a Relayer service orders endpoint rate_limit error.
func NewOrdersRateLimit(body *OrdersRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrdersInternal builds a Relayer service orders endpoint internal error.
func NewOrdersInternal(body *OrdersInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrdersNotImplemented builds a Relayer service orders endpoint
// not_implemented error.
func NewOrdersNotImplemented(body *OrdersNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrdersValidationError builds a Relayer service orders endpoint
// validation_error error.
func NewOrdersValidationError(body *OrdersValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewOrderByHashResultOK builds a "Relayer" service "orderByHash" endpoint
// result from a HTTP "OK" response.
func NewOrderByHashResultOK(body *OrderByHashResponseBody) *relayer.OrderByHashResult {
	v := &relayer.OrderByHashResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Order != nil {
		v.Order = unmarshalOrderResponseBodyToRelayerOrder(body.Order)
	}
	return v
}

// NewOrderByHashNotFound builds a Relayer service orderByHash endpoint
// not_found error.
func NewOrderByHashNotFound(body *OrderByHashNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderByHashRateLimit builds a Relayer service orderByHash endpoint
// rate_limit error.
func NewOrderByHashRateLimit(body *OrderByHashRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderByHashInternal builds a Relayer service orderByHash endpoint
// internal error.
func NewOrderByHashInternal(body *OrderByHashInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderByHashNotImplemented builds a Relayer service orderByHash endpoint
// not_implemented error.
func NewOrderByHashNotImplemented(body *OrderByHashNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderByHashValidationError builds a Relayer service orderByHash endpoint
// validation_error error.
func NewOrderByHashValidationError(body *OrderByHashValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewOrderbookResultOK builds a "Relayer" service "orderbook" endpoint result
// from a HTTP "OK" response.
func NewOrderbookResultOK(body *OrderbookResponseBody) *relayer.OrderbookResult {
	v := &relayer.OrderbookResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}
	if body.Bids != nil {
		v.Bids = unmarshalOrderbookRecordsResponseBodyToRelayerOrderbookRecords(body.Bids)
	}
	if body.Asks != nil {
		v.Asks = unmarshalOrderbookRecordsResponseBodyToRelayerOrderbookRecords(body.Asks)
	}
	return v
}

// NewOrderbookNotFound builds a Relayer service orderbook endpoint not_found
// error.
func NewOrderbookNotFound(body *OrderbookNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderbookRateLimit builds a Relayer service orderbook endpoint rate_limit
// error.
func NewOrderbookRateLimit(body *OrderbookRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderbookInternal builds a Relayer service orderbook endpoint internal
// error.
func NewOrderbookInternal(body *OrderbookInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderbookNotImplemented builds a Relayer service orderbook endpoint
// not_implemented error.
func NewOrderbookNotImplemented(body *OrderbookNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderbookValidationError builds a Relayer service orderbook endpoint
// validation_error error.
func NewOrderbookValidationError(body *OrderbookValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewOrderConfigResultCreated builds a "Relayer" service "orderConfig"
// endpoint result from a HTTP "Created" response.
func NewOrderConfigResultCreated(body *OrderConfigResponseBody) *relayer.OrderConfigResult {
	v := &relayer.OrderConfigResult{
		RLimitLimit:         body.RLimitLimit,
		RLimitRemaining:     body.RLimitRemaining,
		RLimitReset:         body.RLimitReset,
		SenderAddress:       *body.SenderAddress,
		FeeRecipientAddress: *body.FeeRecipientAddress,
		MakerFee:            *body.MakerFee,
		TakerFee:            *body.TakerFee,
		MakerFeeAssetData:   *body.MakerFeeAssetData,
		TakerFeeAssetData:   *body.TakerFeeAssetData,
	}
	return v
}

// NewOrderConfigNotFound builds a Relayer service orderConfig endpoint
// not_found error.
func NewOrderConfigNotFound(body *OrderConfigNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderConfigRateLimit builds a Relayer service orderConfig endpoint
// rate_limit error.
func NewOrderConfigRateLimit(body *OrderConfigRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderConfigInternal builds a Relayer service orderConfig endpoint
// internal error.
func NewOrderConfigInternal(body *OrderConfigInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderConfigNotImplemented builds a Relayer service orderConfig endpoint
// not_implemented error.
func NewOrderConfigNotImplemented(body *OrderConfigNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewOrderConfigValidationError builds a Relayer service orderConfig endpoint
// validation_error error.
func NewOrderConfigValidationError(body *OrderConfigValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewFeeRecipientsResultOK builds a "Relayer" service "feeRecipients" endpoint
// result from a HTTP "OK" response.
func NewFeeRecipientsResultOK(body *FeeRecipientsResponseBody) *relayer.FeeRecipientsResult {
	v := &relayer.FeeRecipientsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		Total:           *body.Total,
		Page:            *body.Page,
		PerPage:         *body.PerPage,
	}
	if body.Records != nil {
		v.Records = make([]string, len(body.Records))
		for i, val := range body.Records {
			v.Records[i] = val
		}
	}
	return v
}

// NewFeeRecipientsNotFound builds a Relayer service feeRecipients endpoint
// not_found error.
func NewFeeRecipientsNotFound(body *FeeRecipientsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewFeeRecipientsRateLimit builds a Relayer service feeRecipients endpoint
// rate_limit error.
func NewFeeRecipientsRateLimit(body *FeeRecipientsRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewFeeRecipientsInternal builds a Relayer service feeRecipients endpoint
// internal error.
func NewFeeRecipientsInternal(body *FeeRecipientsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewFeeRecipientsNotImplemented builds a Relayer service feeRecipients
// endpoint not_implemented error.
func NewFeeRecipientsNotImplemented(body *FeeRecipientsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewFeeRecipientsValidationError builds a Relayer service feeRecipients
// endpoint validation_error error.
func NewFeeRecipientsValidationError(body *FeeRecipientsValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewPostOrderResultCreated builds a "Relayer" service "postOrder" endpoint
// result from a HTTP "Created" response.
func NewPostOrderResultCreated(body *PostOrderResponseBody) *relayer.PostOrderResult {
	v := &relayer.PostOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}
	return v
}

// NewPostOrderNotFound builds a Relayer service postOrder endpoint not_found
// error.
func NewPostOrderNotFound(body *PostOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewPostOrderRateLimit builds a Relayer service postOrder endpoint rate_limit
// error.
func NewPostOrderRateLimit(body *PostOrderRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewPostOrderInternal builds a Relayer service postOrder endpoint internal
// error.
func NewPostOrderInternal(body *PostOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewPostOrderNotImplemented builds a Relayer service postOrder endpoint
// not_implemented error.
func NewPostOrderNotImplemented(body *PostOrderNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewPostOrderValidationError builds a Relayer service postOrder endpoint
// validation_error error.
func NewPostOrderValidationError(body *PostOrderValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewTakeOrderResultCreated builds a "Relayer" service "takeOrder" endpoint
// result from a HTTP "Created" response.
func NewTakeOrderResultCreated(body *TakeOrderResponseBody) *relayer.TakeOrderResult {
	v := &relayer.TakeOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
	}
	return v
}

// NewTakeOrderNotFound builds a Relayer service takeOrder endpoint not_found
// error.
func NewTakeOrderNotFound(body *TakeOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewTakeOrderRateLimit builds a Relayer service takeOrder endpoint rate_limit
// error.
func NewTakeOrderRateLimit(body *TakeOrderRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewTakeOrderInternal builds a Relayer service takeOrder endpoint internal
// error.
func NewTakeOrderInternal(body *TakeOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewTakeOrderNotImplemented builds a Relayer service takeOrder endpoint
// not_implemented error.
func NewTakeOrderNotImplemented(body *TakeOrderNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewTakeOrderValidationError builds a Relayer service takeOrder endpoint
// validation_error error.
func NewTakeOrderValidationError(body *TakeOrderValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewGetActiveOrderResultOK builds a "Relayer" service "getActiveOrder"
// endpoint result from a HTTP "OK" response.
func NewGetActiveOrderResultOK(body *GetActiveOrderResponseBody) *relayer.GetActiveOrderResult {
	v := &relayer.GetActiveOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Order != nil {
		v.Order = unmarshalOrderResponseBodyToRelayerOrder(body.Order)
	}
	return v
}

// NewGetActiveOrderNotFound builds a Relayer service getActiveOrder endpoint
// not_found error.
func NewGetActiveOrderNotFound(body *GetActiveOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetActiveOrderRateLimit builds a Relayer service getActiveOrder endpoint
// rate_limit error.
func NewGetActiveOrderRateLimit(body *GetActiveOrderRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetActiveOrderInternal builds a Relayer service getActiveOrder endpoint
// internal error.
func NewGetActiveOrderInternal(body *GetActiveOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetActiveOrderNotImplemented builds a Relayer service getActiveOrder
// endpoint not_implemented error.
func NewGetActiveOrderNotImplemented(body *GetActiveOrderNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetActiveOrderValidationError builds a Relayer service getActiveOrder
// endpoint validation_error error.
func NewGetActiveOrderValidationError(body *GetActiveOrderValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewGetArchiveOrderResultOK builds a "Relayer" service "getArchiveOrder"
// endpoint result from a HTTP "OK" response.
func NewGetArchiveOrderResultOK(body *GetArchiveOrderResponseBody) *relayer.GetArchiveOrderResult {
	v := &relayer.GetArchiveOrderResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Order != nil {
		v.Order = unmarshalOrderResponseBodyToRelayerOrder(body.Order)
	}
	return v
}

// NewGetArchiveOrderNotFound builds a Relayer service getArchiveOrder endpoint
// not_found error.
func NewGetArchiveOrderNotFound(body *GetArchiveOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetArchiveOrderRateLimit builds a Relayer service getArchiveOrder
// endpoint rate_limit error.
func NewGetArchiveOrderRateLimit(body *GetArchiveOrderRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetArchiveOrderInternal builds a Relayer service getArchiveOrder endpoint
// internal error.
func NewGetArchiveOrderInternal(body *GetArchiveOrderInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetArchiveOrderNotImplemented builds a Relayer service getArchiveOrder
// endpoint not_implemented error.
func NewGetArchiveOrderNotImplemented(body *GetArchiveOrderNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetArchiveOrderValidationError builds a Relayer service getArchiveOrder
// endpoint validation_error error.
func NewGetArchiveOrderValidationError(body *GetArchiveOrderValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewListOrdersResultOK builds a "Relayer" service "listOrders" endpoint
// result from a HTTP "OK" response.
func NewListOrdersResultOK(body *ListOrdersResponseBody) *relayer.ListOrdersResult {
	v := &relayer.ListOrdersResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.TakeOrders != nil {
		v.TakeOrders = make([]*relayer.Order, len(body.TakeOrders))
		for i, val := range body.TakeOrders {
			v.TakeOrders[i] = unmarshalOrderResponseBodyToRelayerOrder(val)
		}
	}
	if body.MakeOrders != nil {
		v.MakeOrders = make([]*relayer.Order, len(body.MakeOrders))
		for i, val := range body.MakeOrders {
			v.MakeOrders[i] = unmarshalOrderResponseBodyToRelayerOrder(val)
		}
	}
	return v
}

// NewListOrdersNotFound builds a Relayer service listOrders endpoint not_found
// error.
func NewListOrdersNotFound(body *ListOrdersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListOrdersRateLimit builds a Relayer service listOrders endpoint
// rate_limit error.
func NewListOrdersRateLimit(body *ListOrdersRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListOrdersInternal builds a Relayer service listOrders endpoint internal
// error.
func NewListOrdersInternal(body *ListOrdersInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListOrdersNotImplemented builds a Relayer service listOrders endpoint
// not_implemented error.
func NewListOrdersNotImplemented(body *ListOrdersNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListOrdersValidationError builds a Relayer service listOrders endpoint
// validation_error error.
func NewListOrdersValidationError(body *ListOrdersValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewGetTradePairResultOK builds a "Relayer" service "getTradePair" endpoint
// result from a HTTP "OK" response.
func NewGetTradePairResultOK(body *GetTradePairResponseBody) *relayer.GetTradePairResult {
	v := &relayer.GetTradePairResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.TradePair != nil {
		v.TradePair = unmarshalTradePairResponseBodyToRelayerTradePair(body.TradePair)
	}
	return v
}

// NewGetTradePairNotFound builds a Relayer service getTradePair endpoint
// not_found error.
func NewGetTradePairNotFound(body *GetTradePairNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetTradePairRateLimit builds a Relayer service getTradePair endpoint
// rate_limit error.
func NewGetTradePairRateLimit(body *GetTradePairRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetTradePairInternal builds a Relayer service getTradePair endpoint
// internal error.
func NewGetTradePairInternal(body *GetTradePairInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetTradePairNotImplemented builds a Relayer service getTradePair endpoint
// not_implemented error.
func NewGetTradePairNotImplemented(body *GetTradePairNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetTradePairValidationError builds a Relayer service getTradePair
// endpoint validation_error error.
func NewGetTradePairValidationError(body *GetTradePairValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewListTradePairsResultOK builds a "Relayer" service "listTradePairs"
// endpoint result from a HTTP "OK" response.
func NewListTradePairsResultOK(body *ListTradePairsResponseBody) *relayer.ListTradePairsResult {
	v := &relayer.ListTradePairsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.TradePairs != nil {
		v.TradePairs = make([]*relayer.TradePair, len(body.TradePairs))
		for i, val := range body.TradePairs {
			v.TradePairs[i] = unmarshalTradePairResponseBodyToRelayerTradePair(val)
		}
	}
	return v
}

// NewListTradePairsNotFound builds a Relayer service listTradePairs endpoint
// not_found error.
func NewListTradePairsNotFound(body *ListTradePairsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListTradePairsRateLimit builds a Relayer service listTradePairs endpoint
// rate_limit error.
func NewListTradePairsRateLimit(body *ListTradePairsRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListTradePairsInternal builds a Relayer service listTradePairs endpoint
// internal error.
func NewListTradePairsInternal(body *ListTradePairsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListTradePairsNotImplemented builds a Relayer service listTradePairs
// endpoint not_implemented error.
func NewListTradePairsNotImplemented(body *ListTradePairsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewListTradePairsValidationError builds a Relayer service listTradePairs
// endpoint validation_error error.
func NewListTradePairsValidationError(body *ListTradePairsValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewGetAccountResultOK builds a "Relayer" service "getAccount" endpoint
// result from a HTTP "OK" response.
func NewGetAccountResultOK(body *GetAccountResponseBody) *relayer.GetAccountResult {
	v := &relayer.GetAccountResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Account != nil {
		v.Account = unmarshalRelayerAccountResponseBodyToRelayerRelayerAccount(body.Account)
	}
	return v
}

// NewGetAccountNotFound builds a Relayer service getAccount endpoint not_found
// error.
func NewGetAccountNotFound(body *GetAccountNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetAccountRateLimit builds a Relayer service getAccount endpoint
// rate_limit error.
func NewGetAccountRateLimit(body *GetAccountRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetAccountInternal builds a Relayer service getAccount endpoint internal
// error.
func NewGetAccountInternal(body *GetAccountInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetAccountNotImplemented builds a Relayer service getAccount endpoint
// not_implemented error.
func NewGetAccountNotImplemented(body *GetAccountNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetAccountValidationError builds a Relayer service getAccount endpoint
// validation_error error.
func NewGetAccountValidationError(body *GetAccountValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewGetOnlineAccountsResultOK builds a "Relayer" service "getOnlineAccounts"
// endpoint result from a HTTP "OK" response.
func NewGetOnlineAccountsResultOK(body *GetOnlineAccountsResponseBody) *relayer.GetOnlineAccountsResult {
	v := &relayer.GetOnlineAccountsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Accounts != nil {
		v.Accounts = make([]*relayer.RelayerAccount, len(body.Accounts))
		for i, val := range body.Accounts {
			v.Accounts[i] = unmarshalRelayerAccountResponseBodyToRelayerRelayerAccount(val)
		}
	}
	return v
}

// NewGetOnlineAccountsNotFound builds a Relayer service getOnlineAccounts
// endpoint not_found error.
func NewGetOnlineAccountsNotFound(body *GetOnlineAccountsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetOnlineAccountsRateLimit builds a Relayer service getOnlineAccounts
// endpoint rate_limit error.
func NewGetOnlineAccountsRateLimit(body *GetOnlineAccountsRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetOnlineAccountsInternal builds a Relayer service getOnlineAccounts
// endpoint internal error.
func NewGetOnlineAccountsInternal(body *GetOnlineAccountsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetOnlineAccountsNotImplemented builds a Relayer service
// getOnlineAccounts endpoint not_implemented error.
func NewGetOnlineAccountsNotImplemented(body *GetOnlineAccountsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetOnlineAccountsValidationError builds a Relayer service
// getOnlineAccounts endpoint validation_error error.
func NewGetOnlineAccountsValidationError(body *GetOnlineAccountsValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewGetEthTransactionsResultOK builds a "Relayer" service
// "getEthTransactions" endpoint result from a HTTP "OK" response.
func NewGetEthTransactionsResultOK(body *GetEthTransactionsResponseBody) *relayer.GetEthTransactionsResult {
	v := &relayer.GetEthTransactionsResult{
		RLimitLimit:     body.RLimitLimit,
		RLimitRemaining: body.RLimitRemaining,
		RLimitReset:     body.RLimitReset,
		MetaData:        body.MetaData,
	}
	if body.Transactions != nil {
		v.Transactions = make([]*relayer.EthTransaction, len(body.Transactions))
		for i, val := range body.Transactions {
			v.Transactions[i] = unmarshalEthTransactionResponseBodyToRelayerEthTransaction(val)
		}
	}
	return v
}

// NewGetEthTransactionsNotFound builds a Relayer service getEthTransactions
// endpoint not_found error.
func NewGetEthTransactionsNotFound(body *GetEthTransactionsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetEthTransactionsRateLimit builds a Relayer service getEthTransactions
// endpoint rate_limit error.
func NewGetEthTransactionsRateLimit(body *GetEthTransactionsRateLimitResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetEthTransactionsInternal builds a Relayer service getEthTransactions
// endpoint internal error.
func NewGetEthTransactionsInternal(body *GetEthTransactionsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetEthTransactionsNotImplemented builds a Relayer service
// getEthTransactions endpoint not_implemented error.
func NewGetEthTransactionsNotImplemented(body *GetEthTransactionsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetEthTransactionsValidationError builds a Relayer service
// getEthTransactions endpoint validation_error error.
func NewGetEthTransactionsValidationError(body *GetEthTransactionsValidationErrorResponseBody) *relayer.ErrorBadRequest {
	v := &relayer.ErrorBadRequest{
		Code:   *body.Code,
		Reason: *body.Reason,
	}
	if body.ValidationErrors != nil {
		v.ValidationErrors = make([]*relayer.ValidationError, len(body.ValidationErrors))
		for i, val := range body.ValidationErrors {
			v.ValidationErrors[i] = unmarshalValidationErrorResponseBodyToRelayerValidationError(val)
		}
	}
	return v
}

// NewVersionResultOK builds a "Relayer" service "version" endpoint result from
// a HTTP "OK" response.
func NewVersionResultOK(body *VersionResponseBody) *relayer.VersionResult {
	v := &relayer.VersionResult{
		Version: *body.Version,
	}
	if body.MetaData != nil {
		v.MetaData = make(map[string]string, len(body.MetaData))
		for key, val := range body.MetaData {
			tk := key
			tv := val
			v.MetaData[tk] = tv
		}
	}
	return v
}

// ValidateAssetPairsResponseBody runs the validations defined on
// AssetPairsResponseBody
func ValidateAssetPairsResponseBody(body *AssetPairsResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		if e != nil {
			if err2 := ValidateAssetPairRecordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrdersResponseBody runs the validations defined on OrdersResponseBody
func ValidateOrdersResponseBody(body *OrdersResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		if e != nil {
			if err2 := ValidateOrderRecordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderByHashResponseBody runs the validations defined on
// OrderByHashResponseBody
func ValidateOrderByHashResponseBody(body *OrderByHashResponseBody) (err error) {
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderbookResponseBody runs the validations defined on
// OrderbookResponseBody
func ValidateOrderbookResponseBody(body *OrderbookResponseBody) (err error) {
	if body.Bids != nil {
		if err2 := ValidateOrderbookRecordsResponseBody(body.Bids); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Asks != nil {
		if err2 := ValidateOrderbookRecordsResponseBody(body.Asks); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderConfigResponseBody runs the validations defined on
// OrderConfigResponseBody
func ValidateOrderConfigResponseBody(body *OrderConfigResponseBody) (err error) {
	if body.SenderAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("senderAddress", "body"))
	}
	if body.FeeRecipientAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feeRecipientAddress", "body"))
	}
	if body.MakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFee", "body"))
	}
	if body.TakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFee", "body"))
	}
	if body.MakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFeeAssetData", "body"))
	}
	if body.TakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFeeAssetData", "body"))
	}
	if body.SenderAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", *body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, true))
		}
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, false))
		}
	}
	if body.FeeRecipientAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", *body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, true))
		}
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, false))
		}
	}
	if body.MakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", *body.MakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerFee != nil {
		if utf8.RuneCountInString(*body.MakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", *body.MakerFee, utf8.RuneCountInString(*body.MakerFee), 100, false))
		}
	}
	if body.TakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", *body.TakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerFee != nil {
		if utf8.RuneCountInString(*body.TakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", *body.TakerFee, utf8.RuneCountInString(*body.TakerFee), 100, false))
		}
	}
	if body.MakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", *body.MakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, true))
		}
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, false))
		}
	}
	if body.TakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", *body.TakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, true))
		}
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, false))
		}
	}
	return
}

// ValidateFeeRecipientsResponseBody runs the validations defined on
// FeeRecipientsResponseBody
func ValidateFeeRecipientsResponseBody(body *FeeRecipientsResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.records[*]", e, "^0x[0-9a-fA-F]{40}$"))
		if utf8.RuneCountInString(e) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.records[*]", e, utf8.RuneCountInString(e), 42, true))
		}
		if utf8.RuneCountInString(e) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.records[*]", e, utf8.RuneCountInString(e), 42, false))
		}
	}
	return
}

// ValidateGetActiveOrderResponseBody runs the validations defined on
// GetActiveOrderResponseBody
func ValidateGetActiveOrderResponseBody(body *GetActiveOrderResponseBody) (err error) {
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetArchiveOrderResponseBody runs the validations defined on
// GetArchiveOrderResponseBody
func ValidateGetArchiveOrderResponseBody(body *GetArchiveOrderResponseBody) (err error) {
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListOrdersResponseBody runs the validations defined on
// ListOrdersResponseBody
func ValidateListOrdersResponseBody(body *ListOrdersResponseBody) (err error) {
	for _, e := range body.TakeOrders {
		if e != nil {
			if err2 := ValidateOrderResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.MakeOrders {
		if e != nil {
			if err2 := ValidateOrderResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetTradePairResponseBody runs the validations defined on
// GetTradePairResponseBody
func ValidateGetTradePairResponseBody(body *GetTradePairResponseBody) (err error) {
	if body.TradePair != nil {
		if err2 := ValidateTradePairResponseBody(body.TradePair); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListTradePairsResponseBody runs the validations defined on
// ListTradePairsResponseBody
func ValidateListTradePairsResponseBody(body *ListTradePairsResponseBody) (err error) {
	for _, e := range body.TradePairs {
		if e != nil {
			if err2 := ValidateTradePairResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAccountResponseBody runs the validations defined on
// GetAccountResponseBody
func ValidateGetAccountResponseBody(body *GetAccountResponseBody) (err error) {
	if body.Account != nil {
		if err2 := ValidateRelayerAccountResponseBody(body.Account); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetOnlineAccountsResponseBody runs the validations defined on
// GetOnlineAccountsResponseBody
func ValidateGetOnlineAccountsResponseBody(body *GetOnlineAccountsResponseBody) (err error) {
	for _, e := range body.Accounts {
		if e != nil {
			if err2 := ValidateRelayerAccountResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetEthTransactionsResponseBody runs the validations defined on
// GetEthTransactionsResponseBody
func ValidateGetEthTransactionsResponseBody(body *GetEthTransactionsResponseBody) (err error) {
	for _, e := range body.Transactions {
		if e != nil {
			if err2 := ValidateEthTransactionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateVersionResponseBody runs the validations defined on
// VersionResponseBody
func ValidateVersionResponseBody(body *VersionResponseBody) (err error) {
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	return
}

// ValidateAssetPairsNotFoundResponseBody runs the validations defined on
// assetPairs_not_found_response_body
func ValidateAssetPairsNotFoundResponseBody(body *AssetPairsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsRateLimitResponseBody runs the validations defined on
// assetPairs_rate_limit_response_body
func ValidateAssetPairsRateLimitResponseBody(body *AssetPairsRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsInternalResponseBody runs the validations defined on
// assetPairs_internal_response_body
func ValidateAssetPairsInternalResponseBody(body *AssetPairsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsNotImplementedResponseBody runs the validations defined on
// assetPairs_not_implemented_response_body
func ValidateAssetPairsNotImplementedResponseBody(body *AssetPairsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAssetPairsValidationErrorResponseBody runs the validations defined
// on assetPairs_validation_error_response_body
func ValidateAssetPairsValidationErrorResponseBody(body *AssetPairsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrdersNotFoundResponseBody runs the validations defined on
// orders_not_found_response_body
func ValidateOrdersNotFoundResponseBody(body *OrdersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersRateLimitResponseBody runs the validations defined on
// orders_rate_limit_response_body
func ValidateOrdersRateLimitResponseBody(body *OrdersRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersInternalResponseBody runs the validations defined on
// orders_internal_response_body
func ValidateOrdersInternalResponseBody(body *OrdersInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersNotImplementedResponseBody runs the validations defined on
// orders_not_implemented_response_body
func ValidateOrdersNotImplementedResponseBody(body *OrdersNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrdersValidationErrorResponseBody runs the validations defined on
// orders_validation_error_response_body
func ValidateOrdersValidationErrorResponseBody(body *OrdersValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderByHashNotFoundResponseBody runs the validations defined on
// orderByHash_not_found_response_body
func ValidateOrderByHashNotFoundResponseBody(body *OrderByHashNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashRateLimitResponseBody runs the validations defined on
// orderByHash_rate_limit_response_body
func ValidateOrderByHashRateLimitResponseBody(body *OrderByHashRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashInternalResponseBody runs the validations defined on
// orderByHash_internal_response_body
func ValidateOrderByHashInternalResponseBody(body *OrderByHashInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashNotImplementedResponseBody runs the validations defined
// on orderByHash_not_implemented_response_body
func ValidateOrderByHashNotImplementedResponseBody(body *OrderByHashNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderByHashValidationErrorResponseBody runs the validations defined
// on orderByHash_validation_error_response_body
func ValidateOrderByHashValidationErrorResponseBody(body *OrderByHashValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderbookNotFoundResponseBody runs the validations defined on
// orderbook_not_found_response_body
func ValidateOrderbookNotFoundResponseBody(body *OrderbookNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookRateLimitResponseBody runs the validations defined on
// orderbook_rate_limit_response_body
func ValidateOrderbookRateLimitResponseBody(body *OrderbookRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookInternalResponseBody runs the validations defined on
// orderbook_internal_response_body
func ValidateOrderbookInternalResponseBody(body *OrderbookInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookNotImplementedResponseBody runs the validations defined on
// orderbook_not_implemented_response_body
func ValidateOrderbookNotImplementedResponseBody(body *OrderbookNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderbookValidationErrorResponseBody runs the validations defined on
// orderbook_validation_error_response_body
func ValidateOrderbookValidationErrorResponseBody(body *OrderbookValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderConfigNotFoundResponseBody runs the validations defined on
// orderConfig_not_found_response_body
func ValidateOrderConfigNotFoundResponseBody(body *OrderConfigNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigRateLimitResponseBody runs the validations defined on
// orderConfig_rate_limit_response_body
func ValidateOrderConfigRateLimitResponseBody(body *OrderConfigRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigInternalResponseBody runs the validations defined on
// orderConfig_internal_response_body
func ValidateOrderConfigInternalResponseBody(body *OrderConfigInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigNotImplementedResponseBody runs the validations defined
// on orderConfig_not_implemented_response_body
func ValidateOrderConfigNotImplementedResponseBody(body *OrderConfigNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderConfigValidationErrorResponseBody runs the validations defined
// on orderConfig_validation_error_response_body
func ValidateOrderConfigValidationErrorResponseBody(body *OrderConfigValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFeeRecipientsNotFoundResponseBody runs the validations defined on
// feeRecipients_not_found_response_body
func ValidateFeeRecipientsNotFoundResponseBody(body *FeeRecipientsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsRateLimitResponseBody runs the validations defined on
// feeRecipients_rate_limit_response_body
func ValidateFeeRecipientsRateLimitResponseBody(body *FeeRecipientsRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsInternalResponseBody runs the validations defined on
// feeRecipients_internal_response_body
func ValidateFeeRecipientsInternalResponseBody(body *FeeRecipientsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsNotImplementedResponseBody runs the validations defined
// on feeRecipients_not_implemented_response_body
func ValidateFeeRecipientsNotImplementedResponseBody(body *FeeRecipientsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFeeRecipientsValidationErrorResponseBody runs the validations
// defined on feeRecipients_validation_error_response_body
func ValidateFeeRecipientsValidationErrorResponseBody(body *FeeRecipientsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePostOrderNotFoundResponseBody runs the validations defined on
// postOrder_not_found_response_body
func ValidatePostOrderNotFoundResponseBody(body *PostOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderRateLimitResponseBody runs the validations defined on
// postOrder_rate_limit_response_body
func ValidatePostOrderRateLimitResponseBody(body *PostOrderRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderInternalResponseBody runs the validations defined on
// postOrder_internal_response_body
func ValidatePostOrderInternalResponseBody(body *PostOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderNotImplementedResponseBody runs the validations defined on
// postOrder_not_implemented_response_body
func ValidatePostOrderNotImplementedResponseBody(body *PostOrderNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostOrderValidationErrorResponseBody runs the validations defined on
// postOrder_validation_error_response_body
func ValidatePostOrderValidationErrorResponseBody(body *PostOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTakeOrderNotFoundResponseBody runs the validations defined on
// takeOrder_not_found_response_body
func ValidateTakeOrderNotFoundResponseBody(body *TakeOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTakeOrderRateLimitResponseBody runs the validations defined on
// takeOrder_rate_limit_response_body
func ValidateTakeOrderRateLimitResponseBody(body *TakeOrderRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTakeOrderInternalResponseBody runs the validations defined on
// takeOrder_internal_response_body
func ValidateTakeOrderInternalResponseBody(body *TakeOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTakeOrderNotImplementedResponseBody runs the validations defined on
// takeOrder_not_implemented_response_body
func ValidateTakeOrderNotImplementedResponseBody(body *TakeOrderNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTakeOrderValidationErrorResponseBody runs the validations defined on
// takeOrder_validation_error_response_body
func ValidateTakeOrderValidationErrorResponseBody(body *TakeOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetActiveOrderNotFoundResponseBody runs the validations defined on
// getActiveOrder_not_found_response_body
func ValidateGetActiveOrderNotFoundResponseBody(body *GetActiveOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActiveOrderRateLimitResponseBody runs the validations defined on
// getActiveOrder_rate_limit_response_body
func ValidateGetActiveOrderRateLimitResponseBody(body *GetActiveOrderRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActiveOrderInternalResponseBody runs the validations defined on
// getActiveOrder_internal_response_body
func ValidateGetActiveOrderInternalResponseBody(body *GetActiveOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActiveOrderNotImplementedResponseBody runs the validations
// defined on getActiveOrder_not_implemented_response_body
func ValidateGetActiveOrderNotImplementedResponseBody(body *GetActiveOrderNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActiveOrderValidationErrorResponseBody runs the validations
// defined on getActiveOrder_validation_error_response_body
func ValidateGetActiveOrderValidationErrorResponseBody(body *GetActiveOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetArchiveOrderNotFoundResponseBody runs the validations defined on
// getArchiveOrder_not_found_response_body
func ValidateGetArchiveOrderNotFoundResponseBody(body *GetArchiveOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetArchiveOrderRateLimitResponseBody runs the validations defined on
// getArchiveOrder_rate_limit_response_body
func ValidateGetArchiveOrderRateLimitResponseBody(body *GetArchiveOrderRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetArchiveOrderInternalResponseBody runs the validations defined on
// getArchiveOrder_internal_response_body
func ValidateGetArchiveOrderInternalResponseBody(body *GetArchiveOrderInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetArchiveOrderNotImplementedResponseBody runs the validations
// defined on getArchiveOrder_not_implemented_response_body
func ValidateGetArchiveOrderNotImplementedResponseBody(body *GetArchiveOrderNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetArchiveOrderValidationErrorResponseBody runs the validations
// defined on getArchiveOrder_validation_error_response_body
func ValidateGetArchiveOrderValidationErrorResponseBody(body *GetArchiveOrderValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListOrdersNotFoundResponseBody runs the validations defined on
// listOrders_not_found_response_body
func ValidateListOrdersNotFoundResponseBody(body *ListOrdersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersRateLimitResponseBody runs the validations defined on
// listOrders_rate_limit_response_body
func ValidateListOrdersRateLimitResponseBody(body *ListOrdersRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersInternalResponseBody runs the validations defined on
// listOrders_internal_response_body
func ValidateListOrdersInternalResponseBody(body *ListOrdersInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersNotImplementedResponseBody runs the validations defined on
// listOrders_not_implemented_response_body
func ValidateListOrdersNotImplementedResponseBody(body *ListOrdersNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersValidationErrorResponseBody runs the validations defined
// on listOrders_validation_error_response_body
func ValidateListOrdersValidationErrorResponseBody(body *ListOrdersValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetTradePairNotFoundResponseBody runs the validations defined on
// getTradePair_not_found_response_body
func ValidateGetTradePairNotFoundResponseBody(body *GetTradePairNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetTradePairRateLimitResponseBody runs the validations defined on
// getTradePair_rate_limit_response_body
func ValidateGetTradePairRateLimitResponseBody(body *GetTradePairRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetTradePairInternalResponseBody runs the validations defined on
// getTradePair_internal_response_body
func ValidateGetTradePairInternalResponseBody(body *GetTradePairInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetTradePairNotImplementedResponseBody runs the validations defined
// on getTradePair_not_implemented_response_body
func ValidateGetTradePairNotImplementedResponseBody(body *GetTradePairNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetTradePairValidationErrorResponseBody runs the validations defined
// on getTradePair_validation_error_response_body
func ValidateGetTradePairValidationErrorResponseBody(body *GetTradePairValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListTradePairsNotFoundResponseBody runs the validations defined on
// listTradePairs_not_found_response_body
func ValidateListTradePairsNotFoundResponseBody(body *ListTradePairsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListTradePairsRateLimitResponseBody runs the validations defined on
// listTradePairs_rate_limit_response_body
func ValidateListTradePairsRateLimitResponseBody(body *ListTradePairsRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListTradePairsInternalResponseBody runs the validations defined on
// listTradePairs_internal_response_body
func ValidateListTradePairsInternalResponseBody(body *ListTradePairsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListTradePairsNotImplementedResponseBody runs the validations
// defined on listTradePairs_not_implemented_response_body
func ValidateListTradePairsNotImplementedResponseBody(body *ListTradePairsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListTradePairsValidationErrorResponseBody runs the validations
// defined on listTradePairs_validation_error_response_body
func ValidateListTradePairsValidationErrorResponseBody(body *ListTradePairsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAccountNotFoundResponseBody runs the validations defined on
// getAccount_not_found_response_body
func ValidateGetAccountNotFoundResponseBody(body *GetAccountNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountRateLimitResponseBody runs the validations defined on
// getAccount_rate_limit_response_body
func ValidateGetAccountRateLimitResponseBody(body *GetAccountRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountInternalResponseBody runs the validations defined on
// getAccount_internal_response_body
func ValidateGetAccountInternalResponseBody(body *GetAccountInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountNotImplementedResponseBody runs the validations defined on
// getAccount_not_implemented_response_body
func ValidateGetAccountNotImplementedResponseBody(body *GetAccountNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountValidationErrorResponseBody runs the validations defined
// on getAccount_validation_error_response_body
func ValidateGetAccountValidationErrorResponseBody(body *GetAccountValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetOnlineAccountsNotFoundResponseBody runs the validations defined
// on getOnlineAccounts_not_found_response_body
func ValidateGetOnlineAccountsNotFoundResponseBody(body *GetOnlineAccountsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOnlineAccountsRateLimitResponseBody runs the validations defined
// on getOnlineAccounts_rate_limit_response_body
func ValidateGetOnlineAccountsRateLimitResponseBody(body *GetOnlineAccountsRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOnlineAccountsInternalResponseBody runs the validations defined
// on getOnlineAccounts_internal_response_body
func ValidateGetOnlineAccountsInternalResponseBody(body *GetOnlineAccountsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOnlineAccountsNotImplementedResponseBody runs the validations
// defined on getOnlineAccounts_not_implemented_response_body
func ValidateGetOnlineAccountsNotImplementedResponseBody(body *GetOnlineAccountsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOnlineAccountsValidationErrorResponseBody runs the validations
// defined on getOnlineAccounts_validation_error_response_body
func ValidateGetOnlineAccountsValidationErrorResponseBody(body *GetOnlineAccountsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetEthTransactionsNotFoundResponseBody runs the validations defined
// on getEthTransactions_not_found_response_body
func ValidateGetEthTransactionsNotFoundResponseBody(body *GetEthTransactionsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetEthTransactionsRateLimitResponseBody runs the validations defined
// on getEthTransactions_rate_limit_response_body
func ValidateGetEthTransactionsRateLimitResponseBody(body *GetEthTransactionsRateLimitResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetEthTransactionsInternalResponseBody runs the validations defined
// on getEthTransactions_internal_response_body
func ValidateGetEthTransactionsInternalResponseBody(body *GetEthTransactionsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetEthTransactionsNotImplementedResponseBody runs the validations
// defined on getEthTransactions_not_implemented_response_body
func ValidateGetEthTransactionsNotImplementedResponseBody(body *GetEthTransactionsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetEthTransactionsValidationErrorResponseBody runs the validations
// defined on getEthTransactions_validation_error_response_body
func ValidateGetEthTransactionsValidationErrorResponseBody(body *GetEthTransactionsValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 100 || *body.Code == 101 || *body.Code == 102 || *body.Code == 103) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{100, 101, 102, 103}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Validation Failed" || *body.Reason == "Malformed JSON" || *body.Reason == "Order submission disabled" || *body.Reason == "Throttled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Validation Failed", "Malformed JSON", "Order submission disabled", "Throttled"}))
		}
	}
	for _, e := range body.ValidationErrors {
		if e != nil {
			if err2 := ValidateValidationErrorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAssetPairRecordResponseBody runs the validations defined on
// AssetPairRecordResponseBody
func ValidateAssetPairRecordResponseBody(body *AssetPairRecordResponseBody) (err error) {
	if body.AssetDataA == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetDataA", "body"))
	}
	if body.AssetDataB == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetDataB", "body"))
	}
	if body.AssetDataA != nil {
		if err2 := ValidateAssetRecordResponseBody(body.AssetDataA); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.AssetDataB != nil {
		if err2 := ValidateAssetRecordResponseBody(body.AssetDataB); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAssetRecordResponseBody runs the validations defined on
// AssetRecordResponseBody
func ValidateAssetRecordResponseBody(body *AssetRecordResponseBody) (err error) {
	if body.AssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetData", "body"))
	}
	if body.MinAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("minAmount", "body"))
	}
	if body.MaxAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("maxAmount", "body"))
	}
	if body.Precision == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("precision", "body"))
	}
	if body.AssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.assetData", *body.AssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.AssetData != nil {
		if utf8.RuneCountInString(*body.AssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.assetData", *body.AssetData, utf8.RuneCountInString(*body.AssetData), 74, true))
		}
	}
	if body.AssetData != nil {
		if utf8.RuneCountInString(*body.AssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.assetData", *body.AssetData, utf8.RuneCountInString(*body.AssetData), 74, false))
		}
	}
	if body.MinAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.minAmount", *body.MinAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MinAmount != nil {
		if utf8.RuneCountInString(*body.MinAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.minAmount", *body.MinAmount, utf8.RuneCountInString(*body.MinAmount), 100, false))
		}
	}
	if body.MaxAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.maxAmount", *body.MaxAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MaxAmount != nil {
		if utf8.RuneCountInString(*body.MaxAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.maxAmount", *body.MaxAmount, utf8.RuneCountInString(*body.MaxAmount), 100, false))
		}
	}
	if body.Precision != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.precision", *body.Precision, "^\\d+(\\.\\d+)?$"))
	}
	if body.Precision != nil {
		if utf8.RuneCountInString(*body.Precision) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.precision", *body.Precision, utf8.RuneCountInString(*body.Precision), 100, false))
		}
	}
	return
}

// ValidateValidationErrorResponseBody runs the validations defined on
// ValidationErrorResponseBody
func ValidateValidationErrorResponseBody(body *ValidationErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.Code != nil {
		if !(*body.Code == 1000 || *body.Code == 1001 || *body.Code == 1002 || *body.Code == 1003 || *body.Code == 1004 || *body.Code == 1005 || *body.Code == 1006) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{1000, 1001, 1002, 1003, 1004, 1005, 1006}))
		}
	}
	if body.Reason != nil {
		if !(*body.Reason == "Required field" || *body.Reason == "Incorrect format" || *body.Reason == "Invalid address" || *body.Reason == "Address not supported" || *body.Reason == "Value out of range" || *body.Reason == "Invalid signature or hash" || *body.Reason == "Unsupported option") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"Required field", "Incorrect format", "Invalid address", "Address not supported", "Value out of range", "Invalid signature or hash", "Unsupported option"}))
		}
	}
	return
}

// ValidateOrderRecordResponseBody runs the validations defined on
// OrderRecordResponseBody
func ValidateOrderRecordResponseBody(body *OrderRecordResponseBody) (err error) {
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderResponseBody runs the validations defined on OrderResponseBody
func ValidateOrderResponseBody(body *OrderResponseBody) (err error) {
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	if body.ExchangeAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exchangeAddress", "body"))
	}
	if body.MakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAddress", "body"))
	}
	if body.TakerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAddress", "body"))
	}
	if body.FeeRecipientAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feeRecipientAddress", "body"))
	}
	if body.SenderAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("senderAddress", "body"))
	}
	if body.MakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetAmount", "body"))
	}
	if body.TakerAssetAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetAmount", "body"))
	}
	if body.MakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFee", "body"))
	}
	if body.TakerFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFee", "body"))
	}
	if body.ExpirationTimeSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expirationTimeSeconds", "body"))
	}
	if body.Salt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("salt", "body"))
	}
	if body.MakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetData", "body"))
	}
	if body.TakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetData", "body"))
	}
	if body.MakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerFeeAssetData", "body"))
	}
	if body.TakerFeeAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerFeeAssetData", "body"))
	}
	if body.Signature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("signature", "body"))
	}
	if body.ChainID != nil {
		if !(*body.ChainID == 1 || *body.ChainID == 42 || *body.ChainID == 3 || *body.ChainID == 4 || *body.ChainID == 1337) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.chainId", *body.ChainID, []interface{}{1, 42, 3, 4, 1337}))
		}
	}
	if body.ExchangeAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.exchangeAddress", *body.ExchangeAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, true))
		}
	}
	if body.ExchangeAddress != nil {
		if utf8.RuneCountInString(*body.ExchangeAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", *body.ExchangeAddress, utf8.RuneCountInString(*body.ExchangeAddress), 42, false))
		}
	}
	if body.MakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAddress", *body.MakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, true))
		}
	}
	if body.MakerAddress != nil {
		if utf8.RuneCountInString(*body.MakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", *body.MakerAddress, utf8.RuneCountInString(*body.MakerAddress), 42, false))
		}
	}
	if body.TakerAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAddress", *body.TakerAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, true))
		}
	}
	if body.TakerAddress != nil {
		if utf8.RuneCountInString(*body.TakerAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", *body.TakerAddress, utf8.RuneCountInString(*body.TakerAddress), 42, false))
		}
	}
	if body.FeeRecipientAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", *body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, true))
		}
	}
	if body.FeeRecipientAddress != nil {
		if utf8.RuneCountInString(*body.FeeRecipientAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", *body.FeeRecipientAddress, utf8.RuneCountInString(*body.FeeRecipientAddress), 42, false))
		}
	}
	if body.SenderAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", *body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, true))
		}
	}
	if body.SenderAddress != nil {
		if utf8.RuneCountInString(*body.SenderAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", *body.SenderAddress, utf8.RuneCountInString(*body.SenderAddress), 42, false))
		}
	}
	if body.MakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetAmount", *body.MakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.MakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetAmount", *body.MakerAssetAmount, utf8.RuneCountInString(*body.MakerAssetAmount), 100, false))
		}
	}
	if body.TakerAssetAmount != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetAmount", *body.TakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerAssetAmount != nil {
		if utf8.RuneCountInString(*body.TakerAssetAmount) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetAmount", *body.TakerAssetAmount, utf8.RuneCountInString(*body.TakerAssetAmount), 100, false))
		}
	}
	if body.MakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", *body.MakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.MakerFee != nil {
		if utf8.RuneCountInString(*body.MakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", *body.MakerFee, utf8.RuneCountInString(*body.MakerFee), 100, false))
		}
	}
	if body.TakerFee != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", *body.TakerFee, "^\\d+(\\.\\d+)?$"))
	}
	if body.TakerFee != nil {
		if utf8.RuneCountInString(*body.TakerFee) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", *body.TakerFee, utf8.RuneCountInString(*body.TakerFee), 100, false))
		}
	}
	if body.ExpirationTimeSeconds != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, "^\\d+(\\.\\d+)?$"))
	}
	if body.ExpirationTimeSeconds != nil {
		if utf8.RuneCountInString(*body.ExpirationTimeSeconds) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.expirationTimeSeconds", *body.ExpirationTimeSeconds, utf8.RuneCountInString(*body.ExpirationTimeSeconds), 100, false))
		}
	}
	if body.Salt != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.salt", *body.Salt, "^\\d+(\\.\\d+)?$"))
	}
	if body.Salt != nil {
		if utf8.RuneCountInString(*body.Salt) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.salt", *body.Salt, utf8.RuneCountInString(*body.Salt), 100, false))
		}
	}
	if body.MakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", *body.MakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, true))
		}
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, false))
		}
	}
	if body.TakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", *body.TakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, true))
		}
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, false))
		}
	}
	if body.MakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", *body.MakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, true))
		}
	}
	if body.MakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.MakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", *body.MakerFeeAssetData, utf8.RuneCountInString(*body.MakerFeeAssetData), 74, false))
		}
	}
	if body.TakerFeeAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", *body.TakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, true))
		}
	}
	if body.TakerFeeAssetData != nil {
		if utf8.RuneCountInString(*body.TakerFeeAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", *body.TakerFeeAssetData, utf8.RuneCountInString(*body.TakerFeeAssetData), 74, false))
		}
	}
	if body.Signature != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.signature", *body.Signature, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	if body.Signature != nil {
		if utf8.RuneCountInString(*body.Signature) > 512 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.signature", *body.Signature, utf8.RuneCountInString(*body.Signature), 512, false))
		}
	}
	return
}

// ValidateOrderbookRecordsResponseBody runs the validations defined on
// OrderbookRecordsResponseBody
func ValidateOrderbookRecordsResponseBody(body *OrderbookRecordsResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.PerPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("perPage", "body"))
	}
	for _, e := range body.Records {
		if e != nil {
			if err2 := ValidateOrderRecordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderRequestBody runs the validations defined on OrderRequestBody
func ValidateOrderRequestBody(body *OrderRequestBody) (err error) {
	if !(body.ChainID == 1 || body.ChainID == 42 || body.ChainID == 3 || body.ChainID == 4 || body.ChainID == 1337) {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.chainId", body.ChainID, []interface{}{1, 42, 3, 4, 1337}))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.exchangeAddress", body.ExchangeAddress, "^0x[0-9a-fA-F]{40}$"))
	if utf8.RuneCountInString(body.ExchangeAddress) < 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", body.ExchangeAddress, utf8.RuneCountInString(body.ExchangeAddress), 42, true))
	}
	if utf8.RuneCountInString(body.ExchangeAddress) > 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.exchangeAddress", body.ExchangeAddress, utf8.RuneCountInString(body.ExchangeAddress), 42, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAddress", body.MakerAddress, "^0x[0-9a-fA-F]{40}$"))
	if utf8.RuneCountInString(body.MakerAddress) < 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", body.MakerAddress, utf8.RuneCountInString(body.MakerAddress), 42, true))
	}
	if utf8.RuneCountInString(body.MakerAddress) > 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAddress", body.MakerAddress, utf8.RuneCountInString(body.MakerAddress), 42, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAddress", body.TakerAddress, "^0x[0-9a-fA-F]{40}$"))
	if utf8.RuneCountInString(body.TakerAddress) < 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", body.TakerAddress, utf8.RuneCountInString(body.TakerAddress), 42, true))
	}
	if utf8.RuneCountInString(body.TakerAddress) > 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAddress", body.TakerAddress, utf8.RuneCountInString(body.TakerAddress), 42, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.feeRecipientAddress", body.FeeRecipientAddress, "^0x[0-9a-fA-F]{40}$"))
	if utf8.RuneCountInString(body.FeeRecipientAddress) < 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", body.FeeRecipientAddress, utf8.RuneCountInString(body.FeeRecipientAddress), 42, true))
	}
	if utf8.RuneCountInString(body.FeeRecipientAddress) > 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.feeRecipientAddress", body.FeeRecipientAddress, utf8.RuneCountInString(body.FeeRecipientAddress), 42, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.senderAddress", body.SenderAddress, "^0x[0-9a-fA-F]{40}$"))
	if utf8.RuneCountInString(body.SenderAddress) < 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", body.SenderAddress, utf8.RuneCountInString(body.SenderAddress), 42, true))
	}
	if utf8.RuneCountInString(body.SenderAddress) > 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.senderAddress", body.SenderAddress, utf8.RuneCountInString(body.SenderAddress), 42, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetAmount", body.MakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(body.MakerAssetAmount) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetAmount", body.MakerAssetAmount, utf8.RuneCountInString(body.MakerAssetAmount), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetAmount", body.TakerAssetAmount, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(body.TakerAssetAmount) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetAmount", body.TakerAssetAmount, utf8.RuneCountInString(body.TakerAssetAmount), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFee", body.MakerFee, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(body.MakerFee) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFee", body.MakerFee, utf8.RuneCountInString(body.MakerFee), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFee", body.TakerFee, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(body.TakerFee) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFee", body.TakerFee, utf8.RuneCountInString(body.TakerFee), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.expirationTimeSeconds", body.ExpirationTimeSeconds, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(body.ExpirationTimeSeconds) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.expirationTimeSeconds", body.ExpirationTimeSeconds, utf8.RuneCountInString(body.ExpirationTimeSeconds), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.salt", body.Salt, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(body.Salt) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.salt", body.Salt, utf8.RuneCountInString(body.Salt), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", body.MakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	if utf8.RuneCountInString(body.MakerAssetData) < 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", body.MakerAssetData, utf8.RuneCountInString(body.MakerAssetData), 74, true))
	}
	if utf8.RuneCountInString(body.MakerAssetData) > 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", body.MakerAssetData, utf8.RuneCountInString(body.MakerAssetData), 74, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", body.TakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	if utf8.RuneCountInString(body.TakerAssetData) < 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", body.TakerAssetData, utf8.RuneCountInString(body.TakerAssetData), 74, true))
	}
	if utf8.RuneCountInString(body.TakerAssetData) > 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", body.TakerAssetData, utf8.RuneCountInString(body.TakerAssetData), 74, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.makerFeeAssetData", body.MakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	if utf8.RuneCountInString(body.MakerFeeAssetData) < 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", body.MakerFeeAssetData, utf8.RuneCountInString(body.MakerFeeAssetData), 74, true))
	}
	if utf8.RuneCountInString(body.MakerFeeAssetData) > 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerFeeAssetData", body.MakerFeeAssetData, utf8.RuneCountInString(body.MakerFeeAssetData), 74, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.takerFeeAssetData", body.TakerFeeAssetData, "^0x[0-9a-fA-F]{72}$"))
	if utf8.RuneCountInString(body.TakerFeeAssetData) < 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", body.TakerFeeAssetData, utf8.RuneCountInString(body.TakerFeeAssetData), 74, true))
	}
	if utf8.RuneCountInString(body.TakerFeeAssetData) > 74 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerFeeAssetData", body.TakerFeeAssetData, utf8.RuneCountInString(body.TakerFeeAssetData), 74, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.signature", body.Signature, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	if utf8.RuneCountInString(body.Signature) > 512 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.signature", body.Signature, utf8.RuneCountInString(body.Signature), 512, false))
	}
	return
}

// ValidateTradePairResponseBody runs the validations defined on
// TradePairResponseBody
func ValidateTradePairResponseBody(body *TradePairResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("makerAssetData", "body"))
	}
	if body.TakerAssetData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("takerAssetData", "body"))
	}
	if body.Hash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hash", "body"))
	}
	if body.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "body"))
	}
	if body.MakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.makerAssetData", *body.MakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, true))
		}
	}
	if body.MakerAssetData != nil {
		if utf8.RuneCountInString(*body.MakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.makerAssetData", *body.MakerAssetData, utf8.RuneCountInString(*body.MakerAssetData), 74, false))
		}
	}
	if body.TakerAssetData != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.takerAssetData", *body.TakerAssetData, "^0x[0-9a-fA-F]{72}$"))
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) < 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, true))
		}
	}
	if body.TakerAssetData != nil {
		if utf8.RuneCountInString(*body.TakerAssetData) > 74 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.takerAssetData", *body.TakerAssetData, utf8.RuneCountInString(*body.TakerAssetData), 74, false))
		}
	}
	if body.Hash != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.hash", *body.Hash, "^0x[0-9a-fA-F]{64}$"))
	}
	if body.Hash != nil {
		if utf8.RuneCountInString(*body.Hash) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.hash", *body.Hash, utf8.RuneCountInString(*body.Hash), 66, true))
		}
	}
	if body.Hash != nil {
		if utf8.RuneCountInString(*body.Hash) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.hash", *body.Hash, utf8.RuneCountInString(*body.Hash), 66, false))
		}
	}
	return
}

// ValidateRelayerAccountResponseBody runs the validations defined on
// RelayerAccountResponseBody
func ValidateRelayerAccountResponseBody(body *RelayerAccountResponseBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.PublicKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publicKey", "body"))
	}
	if body.LastSeen == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastSeen", "body"))
	}
	if body.LastVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastVersion", "body"))
	}
	if body.IsOnline == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isOnline", "body"))
	}
	if body.Address != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.address", *body.Address, "^cosmos1[0-9a-zA-Z]{38}$"))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 45, true))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 45, false))
		}
	}
	if body.PublicKey != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.publicKey", *body.PublicKey, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	if body.PublicKey != nil {
		if utf8.RuneCountInString(*body.PublicKey) > 512 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.publicKey", *body.PublicKey, utf8.RuneCountInString(*body.PublicKey), 512, false))
		}
	}
	return
}

// ValidateEthTransactionResponseBody runs the validations defined on
// EthTransactionResponseBody
func ValidateEthTransactionResponseBody(body *EthTransactionResponseBody) (err error) {
	if body.Proposer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("proposer", "body"))
	}
	if body.Block == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("block", "body"))
	}
	if body.TradeHashes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tradeHashes", "body"))
	}
	if body.Proposer != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.proposer", *body.Proposer, "^cosmos1[0-9a-zA-Z]{38}$"))
	}
	if body.Proposer != nil {
		if utf8.RuneCountInString(*body.Proposer) < 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.proposer", *body.Proposer, utf8.RuneCountInString(*body.Proposer), 45, true))
		}
	}
	if body.Proposer != nil {
		if utf8.RuneCountInString(*body.Proposer) > 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.proposer", *body.Proposer, utf8.RuneCountInString(*body.Proposer), 45, false))
		}
	}
	for _, e := range body.TradeHashes {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.tradeHashes[*]", e, "^0x[0-9a-fA-F]{64}$"))
		if utf8.RuneCountInString(e) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tradeHashes[*]", e, utf8.RuneCountInString(e), 66, true))
		}
		if utf8.RuneCountInString(e) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tradeHashes[*]", e, utf8.RuneCountInString(e), 66, false))
		}
	}
	if body.TxHash != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.txHash", *body.TxHash, "^0x(([0-9a-fA-F][0-9a-fA-F])+)?$"))
	}
	if body.TxHash != nil {
		if utf8.RuneCountInString(*body.TxHash) > 512 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.txHash", *body.TxHash, utf8.RuneCountInString(*body.TxHash), 512, false))
		}
	}
	if body.From != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.from", *body.From, "^0x[0-9a-fA-F]{40}$"))
	}
	if body.From != nil {
		if utf8.RuneCountInString(*body.From) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.from", *body.From, utf8.RuneCountInString(*body.From), 42, true))
		}
	}
	if body.From != nil {
		if utf8.RuneCountInString(*body.From) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.from", *body.From, utf8.RuneCountInString(*body.From), 42, false))
		}
	}
	for _, e := range body.ReviewedBy {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.reviewedBy[*]", e, "^cosmos1[0-9a-zA-Z]{38}$"))
		if utf8.RuneCountInString(e) < 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.reviewedBy[*]", e, utf8.RuneCountInString(e), 45, true))
		}
		if utf8.RuneCountInString(e) > 45 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.reviewedBy[*]", e, utf8.RuneCountInString(e), 45, false))
		}
	}
	return
}
