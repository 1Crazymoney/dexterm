// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Relayer client HTTP transport
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../../api

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Relayer service endpoint HTTP clients.
type Client struct {
	// AssetPairs Doer is the HTTP client used to make requests to the assetPairs
	// endpoint.
	AssetPairsDoer goahttp.Doer

	// Orders Doer is the HTTP client used to make requests to the orders endpoint.
	OrdersDoer goahttp.Doer

	// OrderByHash Doer is the HTTP client used to make requests to the orderByHash
	// endpoint.
	OrderByHashDoer goahttp.Doer

	// Orderbook Doer is the HTTP client used to make requests to the orderbook
	// endpoint.
	OrderbookDoer goahttp.Doer

	// OrderConfig Doer is the HTTP client used to make requests to the orderConfig
	// endpoint.
	OrderConfigDoer goahttp.Doer

	// FeeRecipients Doer is the HTTP client used to make requests to the
	// feeRecipients endpoint.
	FeeRecipientsDoer goahttp.Doer

	// PostOrder Doer is the HTTP client used to make requests to the postOrder
	// endpoint.
	PostOrderDoer goahttp.Doer

	// TakeOrder Doer is the HTTP client used to make requests to the takeOrder
	// endpoint.
	TakeOrderDoer goahttp.Doer

	// GetActiveOrder Doer is the HTTP client used to make requests to the
	// getActiveOrder endpoint.
	GetActiveOrderDoer goahttp.Doer

	// GetArchiveOrder Doer is the HTTP client used to make requests to the
	// getArchiveOrder endpoint.
	GetArchiveOrderDoer goahttp.Doer

	// ListOrders Doer is the HTTP client used to make requests to the listOrders
	// endpoint.
	ListOrdersDoer goahttp.Doer

	// GetTradePair Doer is the HTTP client used to make requests to the
	// getTradePair endpoint.
	GetTradePairDoer goahttp.Doer

	// ListTradePairs Doer is the HTTP client used to make requests to the
	// listTradePairs endpoint.
	ListTradePairsDoer goahttp.Doer

	// GetAccount Doer is the HTTP client used to make requests to the getAccount
	// endpoint.
	GetAccountDoer goahttp.Doer

	// GetOnlineAccounts Doer is the HTTP client used to make requests to the
	// getOnlineAccounts endpoint.
	GetOnlineAccountsDoer goahttp.Doer

	// GetEthTransactions Doer is the HTTP client used to make requests to the
	// getEthTransactions endpoint.
	GetEthTransactionsDoer goahttp.Doer

	// Version Doer is the HTTP client used to make requests to the version
	// endpoint.
	VersionDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Relayer service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AssetPairsDoer:         doer,
		OrdersDoer:             doer,
		OrderByHashDoer:        doer,
		OrderbookDoer:          doer,
		OrderConfigDoer:        doer,
		FeeRecipientsDoer:      doer,
		PostOrderDoer:          doer,
		TakeOrderDoer:          doer,
		GetActiveOrderDoer:     doer,
		GetArchiveOrderDoer:    doer,
		ListOrdersDoer:         doer,
		GetTradePairDoer:       doer,
		ListTradePairsDoer:     doer,
		GetAccountDoer:         doer,
		GetOnlineAccountsDoer:  doer,
		GetEthTransactionsDoer: doer,
		VersionDoer:            doer,
		CORSDoer:               doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// AssetPairs returns an endpoint that makes HTTP requests to the Relayer
// service assetPairs server.
func (c *Client) AssetPairs() goa.Endpoint {
	var (
		encodeRequest  = EncodeAssetPairsRequest(c.encoder)
		decodeResponse = DecodeAssetPairsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAssetPairsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AssetPairsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "assetPairs", err)
		}
		return decodeResponse(resp)
	}
}

// Orders returns an endpoint that makes HTTP requests to the Relayer service
// orders server.
func (c *Client) Orders() goa.Endpoint {
	var (
		encodeRequest  = EncodeOrdersRequest(c.encoder)
		decodeResponse = DecodeOrdersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildOrdersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.OrdersDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "orders", err)
		}
		return decodeResponse(resp)
	}
}

// OrderByHash returns an endpoint that makes HTTP requests to the Relayer
// service orderByHash server.
func (c *Client) OrderByHash() goa.Endpoint {
	var (
		decodeResponse = DecodeOrderByHashResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildOrderByHashRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.OrderByHashDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "orderByHash", err)
		}
		return decodeResponse(resp)
	}
}

// Orderbook returns an endpoint that makes HTTP requests to the Relayer
// service orderbook server.
func (c *Client) Orderbook() goa.Endpoint {
	var (
		encodeRequest  = EncodeOrderbookRequest(c.encoder)
		decodeResponse = DecodeOrderbookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildOrderbookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.OrderbookDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "orderbook", err)
		}
		return decodeResponse(resp)
	}
}

// OrderConfig returns an endpoint that makes HTTP requests to the Relayer
// service orderConfig server.
func (c *Client) OrderConfig() goa.Endpoint {
	var (
		encodeRequest  = EncodeOrderConfigRequest(c.encoder)
		decodeResponse = DecodeOrderConfigResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildOrderConfigRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.OrderConfigDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "orderConfig", err)
		}
		return decodeResponse(resp)
	}
}

// FeeRecipients returns an endpoint that makes HTTP requests to the Relayer
// service feeRecipients server.
func (c *Client) FeeRecipients() goa.Endpoint {
	var (
		decodeResponse = DecodeFeeRecipientsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFeeRecipientsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FeeRecipientsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "feeRecipients", err)
		}
		return decodeResponse(resp)
	}
}

// PostOrder returns an endpoint that makes HTTP requests to the Relayer
// service postOrder server.
func (c *Client) PostOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodePostOrderRequest(c.encoder)
		decodeResponse = DecodePostOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPostOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PostOrderDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "postOrder", err)
		}
		return decodeResponse(resp)
	}
}

// TakeOrder returns an endpoint that makes HTTP requests to the Relayer
// service takeOrder server.
func (c *Client) TakeOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeTakeOrderRequest(c.encoder)
		decodeResponse = DecodeTakeOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTakeOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TakeOrderDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "takeOrder", err)
		}
		return decodeResponse(resp)
	}
}

// GetActiveOrder returns an endpoint that makes HTTP requests to the Relayer
// service getActiveOrder server.
func (c *Client) GetActiveOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetActiveOrderRequest(c.encoder)
		decodeResponse = DecodeGetActiveOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetActiveOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetActiveOrderDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "getActiveOrder", err)
		}
		return decodeResponse(resp)
	}
}

// GetArchiveOrder returns an endpoint that makes HTTP requests to the Relayer
// service getArchiveOrder server.
func (c *Client) GetArchiveOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetArchiveOrderRequest(c.encoder)
		decodeResponse = DecodeGetArchiveOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetArchiveOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetArchiveOrderDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "getArchiveOrder", err)
		}
		return decodeResponse(resp)
	}
}

// ListOrders returns an endpoint that makes HTTP requests to the Relayer
// service listOrders server.
func (c *Client) ListOrders() goa.Endpoint {
	var (
		encodeRequest  = EncodeListOrdersRequest(c.encoder)
		decodeResponse = DecodeListOrdersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListOrdersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListOrdersDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "listOrders", err)
		}
		return decodeResponse(resp)
	}
}

// GetTradePair returns an endpoint that makes HTTP requests to the Relayer
// service getTradePair server.
func (c *Client) GetTradePair() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTradePairRequest(c.encoder)
		decodeResponse = DecodeGetTradePairResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetTradePairRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTradePairDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "getTradePair", err)
		}
		return decodeResponse(resp)
	}
}

// ListTradePairs returns an endpoint that makes HTTP requests to the Relayer
// service listTradePairs server.
func (c *Client) ListTradePairs() goa.Endpoint {
	var (
		encodeRequest  = EncodeListTradePairsRequest(c.encoder)
		decodeResponse = DecodeListTradePairsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListTradePairsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListTradePairsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "listTradePairs", err)
		}
		return decodeResponse(resp)
	}
}

// GetAccount returns an endpoint that makes HTTP requests to the Relayer
// service getAccount server.
func (c *Client) GetAccount() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAccountRequest(c.encoder)
		decodeResponse = DecodeGetAccountResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetAccountRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAccountDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "getAccount", err)
		}
		return decodeResponse(resp)
	}
}

// GetOnlineAccounts returns an endpoint that makes HTTP requests to the
// Relayer service getOnlineAccounts server.
func (c *Client) GetOnlineAccounts() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOnlineAccountsRequest(c.encoder)
		decodeResponse = DecodeGetOnlineAccountsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetOnlineAccountsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOnlineAccountsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "getOnlineAccounts", err)
		}
		return decodeResponse(resp)
	}
}

// GetEthTransactions returns an endpoint that makes HTTP requests to the
// Relayer service getEthTransactions server.
func (c *Client) GetEthTransactions() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetEthTransactionsRequest(c.encoder)
		decodeResponse = DecodeGetEthTransactionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetEthTransactionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetEthTransactionsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "getEthTransactions", err)
		}
		return decodeResponse(resp)
	}
}

// Version returns an endpoint that makes HTTP requests to the Relayer service
// version server.
func (c *Client) Version() goa.Endpoint {
	var (
		decodeResponse = DecodeVersionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVersionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VersionDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Relayer", "version", err)
		}
		return decodeResponse(resp)
	}
}
