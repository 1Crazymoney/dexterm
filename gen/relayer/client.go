// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Relayer client
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../../api

package relayer

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Relayer" service client.
type Client struct {
	AssetPairsEndpoint         goa.Endpoint
	OrdersEndpoint             goa.Endpoint
	OrderByHashEndpoint        goa.Endpoint
	OrderbookEndpoint          goa.Endpoint
	OrderConfigEndpoint        goa.Endpoint
	FeeRecipientsEndpoint      goa.Endpoint
	PostOrderEndpoint          goa.Endpoint
	TakeOrderEndpoint          goa.Endpoint
	GetActiveOrderEndpoint     goa.Endpoint
	GetArchiveOrderEndpoint    goa.Endpoint
	ListOrdersEndpoint         goa.Endpoint
	GetTradePairEndpoint       goa.Endpoint
	ListTradePairsEndpoint     goa.Endpoint
	GetAccountEndpoint         goa.Endpoint
	GetOnlineAccountsEndpoint  goa.Endpoint
	GetEthTransactionsEndpoint goa.Endpoint
	VersionEndpoint            goa.Endpoint
}

// NewClient initializes a "Relayer" service client given the endpoints.
func NewClient(assetPairs, orders, orderByHash, orderbook, orderConfig, feeRecipients, postOrder, takeOrder, getActiveOrder, getArchiveOrder, listOrders, getTradePair, listTradePairs, getAccount, getOnlineAccounts, getEthTransactions, version goa.Endpoint) *Client {
	return &Client{
		AssetPairsEndpoint:         assetPairs,
		OrdersEndpoint:             orders,
		OrderByHashEndpoint:        orderByHash,
		OrderbookEndpoint:          orderbook,
		OrderConfigEndpoint:        orderConfig,
		FeeRecipientsEndpoint:      feeRecipients,
		PostOrderEndpoint:          postOrder,
		TakeOrderEndpoint:          takeOrder,
		GetActiveOrderEndpoint:     getActiveOrder,
		GetArchiveOrderEndpoint:    getArchiveOrder,
		ListOrdersEndpoint:         listOrders,
		GetTradePairEndpoint:       getTradePair,
		ListTradePairsEndpoint:     listTradePairs,
		GetAccountEndpoint:         getAccount,
		GetOnlineAccountsEndpoint:  getOnlineAccounts,
		GetEthTransactionsEndpoint: getEthTransactions,
		VersionEndpoint:            version,
	}
}

// AssetPairs calls the "assetPairs" endpoint of the "Relayer" service.
func (c *Client) AssetPairs(ctx context.Context, p *AssetPairsPayload) (res *AssetPairsResult, err error) {
	var ires interface{}
	ires, err = c.AssetPairsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AssetPairsResult), nil
}

// Orders calls the "orders" endpoint of the "Relayer" service.
func (c *Client) Orders(ctx context.Context, p *OrdersPayload) (res *OrdersResult, err error) {
	var ires interface{}
	ires, err = c.OrdersEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OrdersResult), nil
}

// OrderByHash calls the "orderByHash" endpoint of the "Relayer" service.
func (c *Client) OrderByHash(ctx context.Context, p *OrderByHashPayload) (res *OrderByHashResult, err error) {
	var ires interface{}
	ires, err = c.OrderByHashEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OrderByHashResult), nil
}

// Orderbook calls the "orderbook" endpoint of the "Relayer" service.
func (c *Client) Orderbook(ctx context.Context, p *OrderbookPayload) (res *OrderbookResult, err error) {
	var ires interface{}
	ires, err = c.OrderbookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OrderbookResult), nil
}

// OrderConfig calls the "orderConfig" endpoint of the "Relayer" service.
func (c *Client) OrderConfig(ctx context.Context, p *OrderConfigPayload) (res *OrderConfigResult, err error) {
	var ires interface{}
	ires, err = c.OrderConfigEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OrderConfigResult), nil
}

// FeeRecipients calls the "feeRecipients" endpoint of the "Relayer" service.
func (c *Client) FeeRecipients(ctx context.Context) (res *FeeRecipientsResult, err error) {
	var ires interface{}
	ires, err = c.FeeRecipientsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*FeeRecipientsResult), nil
}

// PostOrder calls the "postOrder" endpoint of the "Relayer" service.
func (c *Client) PostOrder(ctx context.Context, p *PostOrderPayload) (res *PostOrderResult, err error) {
	var ires interface{}
	ires, err = c.PostOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PostOrderResult), nil
}

// TakeOrder calls the "takeOrder" endpoint of the "Relayer" service.
func (c *Client) TakeOrder(ctx context.Context, p *TakeOrderPayload) (res *TakeOrderResult, err error) {
	var ires interface{}
	ires, err = c.TakeOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TakeOrderResult), nil
}

// GetActiveOrder calls the "getActiveOrder" endpoint of the "Relayer" service.
func (c *Client) GetActiveOrder(ctx context.Context, p *GetActiveOrderPayload) (res *GetActiveOrderResult, err error) {
	var ires interface{}
	ires, err = c.GetActiveOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetActiveOrderResult), nil
}

// GetArchiveOrder calls the "getArchiveOrder" endpoint of the "Relayer"
// service.
func (c *Client) GetArchiveOrder(ctx context.Context, p *GetArchiveOrderPayload) (res *GetArchiveOrderResult, err error) {
	var ires interface{}
	ires, err = c.GetArchiveOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetArchiveOrderResult), nil
}

// ListOrders calls the "listOrders" endpoint of the "Relayer" service.
func (c *Client) ListOrders(ctx context.Context, p *ListOrdersPayload) (res *ListOrdersResult, err error) {
	var ires interface{}
	ires, err = c.ListOrdersEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListOrdersResult), nil
}

// GetTradePair calls the "getTradePair" endpoint of the "Relayer" service.
func (c *Client) GetTradePair(ctx context.Context, p *GetTradePairPayload) (res *GetTradePairResult, err error) {
	var ires interface{}
	ires, err = c.GetTradePairEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetTradePairResult), nil
}

// ListTradePairs calls the "listTradePairs" endpoint of the "Relayer" service.
func (c *Client) ListTradePairs(ctx context.Context, p *ListTradePairsPayload) (res *ListTradePairsResult, err error) {
	var ires interface{}
	ires, err = c.ListTradePairsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListTradePairsResult), nil
}

// GetAccount calls the "getAccount" endpoint of the "Relayer" service.
func (c *Client) GetAccount(ctx context.Context, p *GetAccountPayload) (res *GetAccountResult, err error) {
	var ires interface{}
	ires, err = c.GetAccountEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetAccountResult), nil
}

// GetOnlineAccounts calls the "getOnlineAccounts" endpoint of the "Relayer"
// service.
func (c *Client) GetOnlineAccounts(ctx context.Context, p *GetOnlineAccountsPayload) (res *GetOnlineAccountsResult, err error) {
	var ires interface{}
	ires, err = c.GetOnlineAccountsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetOnlineAccountsResult), nil
}

// GetEthTransactions calls the "getEthTransactions" endpoint of the "Relayer"
// service.
func (c *Client) GetEthTransactions(ctx context.Context, p *GetEthTransactionsPayload) (res *GetEthTransactionsResult, err error) {
	var ires interface{}
	ires, err = c.GetEthTransactionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetEthTransactionsResult), nil
}

// Version calls the "version" endpoint of the "Relayer" service.
func (c *Client) Version(ctx context.Context) (res *VersionResult, err error) {
	var ires interface{}
	ires, err = c.VersionEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*VersionResult), nil
}
