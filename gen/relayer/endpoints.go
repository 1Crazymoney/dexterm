// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Relayer endpoints
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../../api

package relayer

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Relayer" service endpoints.
type Endpoints struct {
	AssetPairs         goa.Endpoint
	Orders             goa.Endpoint
	OrderByHash        goa.Endpoint
	Orderbook          goa.Endpoint
	OrderConfig        goa.Endpoint
	FeeRecipients      goa.Endpoint
	PostOrder          goa.Endpoint
	TakeOrder          goa.Endpoint
	GetActiveOrder     goa.Endpoint
	GetArchiveOrder    goa.Endpoint
	ListOrders         goa.Endpoint
	GetTradePair       goa.Endpoint
	ListTradePairs     goa.Endpoint
	GetAccount         goa.Endpoint
	GetOnlineAccounts  goa.Endpoint
	GetEthTransactions goa.Endpoint
	Version            goa.Endpoint
}

// NewEndpoints wraps the methods of the "Relayer" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		AssetPairs:         NewAssetPairsEndpoint(s),
		Orders:             NewOrdersEndpoint(s),
		OrderByHash:        NewOrderByHashEndpoint(s),
		Orderbook:          NewOrderbookEndpoint(s),
		OrderConfig:        NewOrderConfigEndpoint(s),
		FeeRecipients:      NewFeeRecipientsEndpoint(s),
		PostOrder:          NewPostOrderEndpoint(s),
		TakeOrder:          NewTakeOrderEndpoint(s),
		GetActiveOrder:     NewGetActiveOrderEndpoint(s),
		GetArchiveOrder:    NewGetArchiveOrderEndpoint(s),
		ListOrders:         NewListOrdersEndpoint(s),
		GetTradePair:       NewGetTradePairEndpoint(s),
		ListTradePairs:     NewListTradePairsEndpoint(s),
		GetAccount:         NewGetAccountEndpoint(s),
		GetOnlineAccounts:  NewGetOnlineAccountsEndpoint(s),
		GetEthTransactions: NewGetEthTransactionsEndpoint(s),
		Version:            NewVersionEndpoint(s),
	}
}

// Use applies the given middleware to all the "Relayer" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.AssetPairs = m(e.AssetPairs)
	e.Orders = m(e.Orders)
	e.OrderByHash = m(e.OrderByHash)
	e.Orderbook = m(e.Orderbook)
	e.OrderConfig = m(e.OrderConfig)
	e.FeeRecipients = m(e.FeeRecipients)
	e.PostOrder = m(e.PostOrder)
	e.TakeOrder = m(e.TakeOrder)
	e.GetActiveOrder = m(e.GetActiveOrder)
	e.GetArchiveOrder = m(e.GetArchiveOrder)
	e.ListOrders = m(e.ListOrders)
	e.GetTradePair = m(e.GetTradePair)
	e.ListTradePairs = m(e.ListTradePairs)
	e.GetAccount = m(e.GetAccount)
	e.GetOnlineAccounts = m(e.GetOnlineAccounts)
	e.GetEthTransactions = m(e.GetEthTransactions)
	e.Version = m(e.Version)
}

// NewAssetPairsEndpoint returns an endpoint function that calls the method
// "assetPairs" of service "Relayer".
func NewAssetPairsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AssetPairsPayload)
		return s.AssetPairs(ctx, p)
	}
}

// NewOrdersEndpoint returns an endpoint function that calls the method
// "orders" of service "Relayer".
func NewOrdersEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrdersPayload)
		return s.Orders(ctx, p)
	}
}

// NewOrderByHashEndpoint returns an endpoint function that calls the method
// "orderByHash" of service "Relayer".
func NewOrderByHashEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrderByHashPayload)
		return s.OrderByHash(ctx, p)
	}
}

// NewOrderbookEndpoint returns an endpoint function that calls the method
// "orderbook" of service "Relayer".
func NewOrderbookEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrderbookPayload)
		return s.Orderbook(ctx, p)
	}
}

// NewOrderConfigEndpoint returns an endpoint function that calls the method
// "orderConfig" of service "Relayer".
func NewOrderConfigEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrderConfigPayload)
		return s.OrderConfig(ctx, p)
	}
}

// NewFeeRecipientsEndpoint returns an endpoint function that calls the method
// "feeRecipients" of service "Relayer".
func NewFeeRecipientsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FeeRecipients(ctx)
	}
}

// NewPostOrderEndpoint returns an endpoint function that calls the method
// "postOrder" of service "Relayer".
func NewPostOrderEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PostOrderPayload)
		return s.PostOrder(ctx, p)
	}
}

// NewTakeOrderEndpoint returns an endpoint function that calls the method
// "takeOrder" of service "Relayer".
func NewTakeOrderEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TakeOrderPayload)
		return s.TakeOrder(ctx, p)
	}
}

// NewGetActiveOrderEndpoint returns an endpoint function that calls the method
// "getActiveOrder" of service "Relayer".
func NewGetActiveOrderEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetActiveOrderPayload)
		return s.GetActiveOrder(ctx, p)
	}
}

// NewGetArchiveOrderEndpoint returns an endpoint function that calls the
// method "getArchiveOrder" of service "Relayer".
func NewGetArchiveOrderEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetArchiveOrderPayload)
		return s.GetArchiveOrder(ctx, p)
	}
}

// NewListOrdersEndpoint returns an endpoint function that calls the method
// "listOrders" of service "Relayer".
func NewListOrdersEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListOrdersPayload)
		return s.ListOrders(ctx, p)
	}
}

// NewGetTradePairEndpoint returns an endpoint function that calls the method
// "getTradePair" of service "Relayer".
func NewGetTradePairEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetTradePairPayload)
		return s.GetTradePair(ctx, p)
	}
}

// NewListTradePairsEndpoint returns an endpoint function that calls the method
// "listTradePairs" of service "Relayer".
func NewListTradePairsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListTradePairsPayload)
		return s.ListTradePairs(ctx, p)
	}
}

// NewGetAccountEndpoint returns an endpoint function that calls the method
// "getAccount" of service "Relayer".
func NewGetAccountEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetAccountPayload)
		return s.GetAccount(ctx, p)
	}
}

// NewGetOnlineAccountsEndpoint returns an endpoint function that calls the
// method "getOnlineAccounts" of service "Relayer".
func NewGetOnlineAccountsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetOnlineAccountsPayload)
		return s.GetOnlineAccounts(ctx, p)
	}
}

// NewGetEthTransactionsEndpoint returns an endpoint function that calls the
// method "getEthTransactions" of service "Relayer".
func NewGetEthTransactionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetEthTransactionsPayload)
		return s.GetEthTransactions(ctx, p)
	}
}

// NewVersionEndpoint returns an endpoint function that calls the method
// "version" of service "Relayer".
func NewVersionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Version(ctx)
	}
}
