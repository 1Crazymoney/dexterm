// Code generated by goa v3.1.1, DO NOT EDIT.
//
// RestAPI service
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-core/api/design -o ../

package restapi

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// RestAPI implements misc API methods for external clients. Not part of any
// standard (yet).
type Service interface {
	// Retrieves an active 0x order with meta info that is associated with the hash.
	GetActiveOrder(context.Context, *GetActiveOrderPayload) (res *GetActiveOrderResult, err error)
	// Retrieves an archive 0x order with meta info that is associated with the
	// hash.
	GetArchiveOrder(context.Context, *GetArchiveOrderPayload) (res *GetArchiveOrderResult, err error)
	// Retrieves a list of 0x orders matching the filtering rules.
	ListOrders(context.Context, *ListOrdersPayload) (res *ListOrdersResult, err error)
	// Retrieves a trade pair by name or hash.
	GetTradePair(context.Context, *GetTradePairPayload) (res *GetTradePairResult, err error)
	// Retrieves a list trade pairs.
	ListTradePairs(context.Context, *ListTradePairsPayload) (res *ListTradePairsResult, err error)
	// Retrieves a list trade pairs.
	ListDerivativeMarkets(context.Context, *ListDerivativeMarketsPayload) (res *ListDerivativeMarketsResult, err error)
	// Retrieves a relayer account by address.
	GetAccount(context.Context, *GetAccountPayload) (res *GetAccountResult, err error)
	// Retrieves online relayer accounts only.
	GetOnlineAccounts(context.Context, *GetOnlineAccountsPayload) (res *GetOnlineAccountsResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "RestAPI"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"getActiveOrder", "getArchiveOrder", "listOrders", "getTradePair", "listTradePairs", "listDerivativeMarkets", "getAccount", "getOnlineAccounts"}

// GetActiveOrderPayload is the payload type of the RestAPI service
// getActiveOrder method.
type GetActiveOrderPayload struct {
	// The hash of the desired 0x order.
	OrderHash string
}

// GetActiveOrderResult is the result type of the RestAPI service
// getActiveOrder method.
type GetActiveOrderResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Found active 0x order.
	Order *Order
	// Additional meta data.
	MetaData interface{}
}

// GetArchiveOrderPayload is the payload type of the RestAPI service
// getArchiveOrder method.
type GetArchiveOrderPayload struct {
	// The hash of the desired 0x order.
	OrderHash string
}

// GetArchiveOrderResult is the result type of the RestAPI service
// getArchiveOrder method.
type GetArchiveOrderResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Order item.
	Order *Order
	// Additional meta data.
	MetaData map[string]string
}

// ListOrdersPayload is the payload type of the RestAPI service listOrders
// method.
type ListOrdersPayload struct {
	// Filter by status of the order
	Status *string
	// Filter by collection of the order
	Collection *string
	// Filter by trade pair hash
	TradePairHash *string
	// Enabled sort by VDF (1 = asc, -1 = desc)
	SortByVdf *int32
	// Limits the amout of results by top N
	Limit *int32
}

// ListOrdersResult is the result type of the RestAPI service listOrders method.
type ListOrdersResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Filtered orders.
	Orders []*Order
	// Additional meta data.
	MetaData interface{}
}

// GetTradePairPayload is the payload type of the RestAPI service getTradePair
// method.
type GetTradePairPayload struct {
	// Specify name of the trade pair.
	Name *string
	// Most effective way is to specify hash of the trade pair.
	Hash *string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData *string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData *string
}

// GetTradePairResult is the result type of the RestAPI service getTradePair
// method.
type GetTradePairResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Found trade pair.
	TradePair *TradePair
	// Additional meta data.
	MetaData interface{}
}

// ListTradePairsPayload is the payload type of the RestAPI service
// listTradePairs method.
type ListTradePairsPayload struct {
	// Specify to include all trade pairs, suspended and active.
	All *bool
}

// ListTradePairsResult is the result type of the RestAPI service
// listTradePairs method.
type ListTradePairsResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Filtered trade pairs.
	TradePairs []*TradePair
	// Additional meta data.
	MetaData interface{}
}

// ListDerivativeMarketsPayload is the payload type of the RestAPI service
// listDerivativeMarkets method.
type ListDerivativeMarketsPayload struct {
	// Specify to include all trade pairs, suspended and active.
	All *bool
}

// ListDerivativeMarketsResult is the result type of the RestAPI service
// listDerivativeMarkets method.
type ListDerivativeMarketsResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Derivative Markets.
	Markets []*DerivativeMarket
}

// GetAccountPayload is the payload type of the RestAPI service getAccount
// method.
type GetAccountPayload struct {
	// Address of the relayer account.
	Address string
}

// GetAccountResult is the result type of the RestAPI service getAccount method.
type GetAccountResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Found relayer account.
	Account *RelayerAccount
	// Additional meta data.
	MetaData interface{}
}

// GetOnlineAccountsPayload is the payload type of the RestAPI service
// getOnlineAccounts method.
type GetOnlineAccountsPayload struct {
	// Specify a version to filter online accounts with this logic version.
	Version *string
	// Specify a threshold in seconds to filter online accounts within a period of
	// time.
	Threshold *int64
}

// GetOnlineAccountsResult is the result type of the RestAPI service
// getOnlineAccounts method.
type GetOnlineAccountsResult struct {
	RLimitLimit     *string
	RLimitRemaining *string
	RLimitReset     *string
	// Filtered online relayer accounts.
	Accounts []*RelayerAccount
	// Additional meta data.
	MetaData interface{}
}

// A valid signed 0x order based on the schema.
type Order struct {
	// Specify chain ID.
	ChainID int64
	// Exchange v3 contract address.
	ExchangeAddress string
	// Address that created the order.
	MakerAddress string
	// Address that is allowed to fill the order. If set to 0, any address is
	// allowed to fill the order.
	TakerAddress string
	// Address that will receive fees when order is filled.
	FeeRecipientAddress string
	// Address that is allowed to call Exchange contract methods that affect this
	// order. If set to 0, any address is allowed to call these methods.
	SenderAddress string
	// Amount of makerAsset being offered by maker. Must be greater than 0.
	MakerAssetAmount string
	// Amount of takerAsset being bid on by maker. Must be greater than 0.
	TakerAssetAmount string
	// Amount of ZRX paid to feeRecipient by maker when order is filled. If set to
	// 0, no transfer of ZRX from maker to feeRecipient will be attempted.
	MakerFee string
	// Amount of ZRX paid to feeRecipient by taker when order is filled. If set to
	// 0, no transfer of ZRX from taker to feeRecipient will be attempted.
	TakerFee string
	// Timestamp in seconds at which order expires.
	ExpirationTimeSeconds string
	// Arbitrary number to facilitate uniqueness of the order's hash.
	Salt string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerFee.
	MakerFeeAssetData string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerFee.
	TakerFeeAssetData string
	// Order signature.
	Signature string
}

// An object describing trade pair of two assets.
type TradePair struct {
	// A name of the pair in format AAA/BBB, where AAA - maker's asset, BBB -
	// taker's asset.
	Name string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string
	// Hash of both asset data, to identify the trading pair in store.
	Hash string
	// If false, then the pair is suspended and trades cannot be made.
	Enabled bool
}

// An object describing a derivative market in the Injective Futures Protocol.
type DerivativeMarket struct {
	// Ticker for the derivative contract.
	Ticker string
	// Address of the oracle for the derivative contract
	Oracle string
	// Address of the base currency for the derivative contract
	BaseCurrency string
	// Random number to faciltate uniqueness of the derivative market ID
	Nonce string
	// MarketID identifying the market.
	MarketID string
	// If false, then the pair is suspended and trades cannot be made.
	Enabled bool
}

// A relayer account that enhances Cosmos Account with liveness info.
type RelayerAccount struct {
	// Cosmos address of the relayer account.
	Address string
	// Ethereum address associated with this relayer account.
	StakerAddress *string
	// Public key of the relayer account, as hex string.
	PublicKey string
	// Timestamp in UNIX seconds of the last time seen.
	LastSeen int64
	// Last logic version seen.
	LastVersion string
	// A flag of liveness status of the account. Must be considered with lastSeen
	// timestamp.
	IsOnline bool
}

// Error and description for bad requests.
type RESTValidationErrorResponse struct {
	// General error code
	Code int
	// Error reason description
	Reason string
	// A list of explained validation errors.
	ValidationErrors []*RESTValidationError
}

// Order validation error explained
type RESTValidationError struct {
	// Validation error code
	Code int
	// Validation error reason description
	Reason string
	// Field name
	Field *string
}

// Error returns an error description.
func (e *RESTValidationErrorResponse) Error() string {
	return "Error and description for bad requests."
}

// ErrorName returns "RESTValidationErrorResponse".
func (e *RESTValidationErrorResponse) ErrorName() string {
	return "validation_error"
}

// Error returns an error description.
func (e *RESTValidationError) Error() string {
	return "Order validation error explained"
}

// ErrorName returns "RESTValidationError".
func (e *RESTValidationError) ErrorName() string {
	return "RESTValidationError"
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternal builds a goa.ServiceError from an error.
func MakeInternal(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
